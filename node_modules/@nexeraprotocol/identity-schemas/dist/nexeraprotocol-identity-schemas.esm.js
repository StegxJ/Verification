import { z } from 'zod';
import { C as CredentialTypes } from './kyc.schema-d70e1cdb.esm.js';
export { A as ACTIVE_CHAIN_VALUES, K as ALPHA_2_COUNTRIES, g as AddressSchema, L as Alpha2Country, h as AptosAddress, j as AptosSignature, y as BLOCKCHAIN_NAMESPACES, B as BlockchainAddress, z as BlockchainNamespace, x as BlockchainSignature, v as CardanoAddress, w as CardanoSignature, d as ChainId, n as CosmosAddress, o as CosmosSignature, E as EIP155Signature, G as ENVS, q as EdSignature, H as EnvironmentSchema, F as FunctionCallData, J as ISO3CountryCode, N as NEXERA_CHAINS, a as NEXERA_CHAIN_NAMES, b as NEXERA_CHAIN_NAMES_LIST, c as NEXERA_CHAIN_VALUES, t as P2Signature, P as POLYGON_NETWORK_NAMES, l as PolkadotAddress, m as PolkadotSignature, e as PolygonNetworkNames, f as PrivateKey, r as SpSignature, S as StarknetAddress, k as StarknetSignature, p as TezosAddress, u as TezosSignature, T as TxHash, U as UuidString, Z as ZodParse, D as coerceBoolean, O as countryISO2toISO3Mapping, M as countryISO3toISO2Mapping, i as isValidAddress, Q as isoCountriesNameFromISO2, R as parseISO3CountryCode, s as shortAddress, I as shortBlockchainAddress } from './kyc.schema-d70e1cdb.esm.js';

var decodeUint8Array = function decodeUint8Array(data) {
  var salt = data;
  return new Uint8Array(Object.keys(salt).map(function (key) {
    return salt[key];
  }));
};
var EncryptedKycKey = z.object({
  address: z.string(),
  encryptedPrivateKey: z.string(),
  signingMessage: z.string(),
  // Why use unknown here if it's going to be used as EncodedUint8Array in the decodeUint8Array func?
  salt: z.preprocess(decodeUint8Array, z.unknown()),
  iv: z.preprocess(decodeUint8Array, z.unknown()),
  did: z.string().optional()
});
var EncryptedVerifiableCredentialDataSchema = z.object({
  iv: z.preprocess(decodeUint8Array, z.unknown()),
  ephemPublicKey: z.preprocess(decodeUint8Array, z.unknown()),
  ciphertext: z.preprocess(decodeUint8Array, z.unknown()),
  mac: z.preprocess(decodeUint8Array, z.unknown())
});
var EncryptedVerifiableCredentialSchema = z.object({
  id: z.number().optional(),
  did: z.string(),
  journeyId: z.string().optional(),
  type: z["enum"](CredentialTypes),
  datetime: z.coerce.date(),
  credential: EncryptedVerifiableCredentialDataSchema,
  identifier: z.string().optional()
});
var DownloadableKycSchema = z.object({
  vcs: z.array(z.any()),
  key: EncryptedKycKey
});

export { DownloadableKycSchema, EncryptedKycKey, EncryptedVerifiableCredentialDataSchema, EncryptedVerifiableCredentialSchema };
