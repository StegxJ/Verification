import { z, ZodOptional, ZodNumber } from 'zod';

var ID3CredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("Journey ID of when credential was generated"),
  amendmentsData: z.object({
    data: z.object({
      citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("The country of citizenship of the credential subject ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      documentType: z["enum"](["Agents License", "Driving License", "Electoral Card", "Foreigner Identification Card", "Health Card", "Job License", "Membership Identification Card", "Military Identification Card", "National Identification Card", "Passport", "Proof of Age Card", "Travel Permit", "Visa", "Weapons Licence"]).describe("The type of document used to verify the credential subject").optional(),
      firstName: z.string().describe("The first name of the credential subject").optional(),
      lastName: z.string().describe("The last name of the credential subject").optional(),
      gender: z.string().describe("Gender of the credential subject").optional(),
      addressLine1: z.string().describe("Address line 1 of the credential subject").optional(),
      addressLine2: z.string().describe("Address line 2 of the credential subject").optional(),
      birthday: z.string().describe("Birthday of the credential subject").optional(),
      placeOfBirth: z.string().describe("Place of birth of the credential subject").optional(),
      countryOfResidence: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of residence of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
      city: z.string().describe("City of the credential subject").optional(),
      province: z.string().describe("Province of the credential subject").optional(),
      postalCode: z.string().describe("Postal code of the credential subject").optional(),
      emailAddress: z.string().describe("Email address of the credential subject").optional(),
      phoneNumber: z.string().describe("Phone number of the credential subject").optional(),
      countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of birth of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      middleName: z.string().describe("Middle name of the credential subject").optional()
    }).describe("Personal details manually amended by the holder/user during authentication process.").optional(),
    authenticateSPResult: z.object({
      AuthenticationID: z.string().describe("The ID of the authentication request").optional(),
      Timestamp: z.string().datetime().describe("The timestamp of the authentication request").optional(),
      CustomerRef: z.string().describe("The customer reference of the authentication request").optional(),
      ProfileID: z.string().describe("The ID of the profile used for the authentication request").optional(),
      ProfileName: z.string().describe("The name of the profile used for the authentication request").optional(),
      ProfileVersion: z.number()["int"]().describe("The version of the profile used for the authentication request").optional(),
      ProfileRevision: z.number()["int"]().describe("The revision of the profile used for the authentication request").optional(),
      ProfileState: z.string().describe("The state of the profile used for the authentication request").optional(),
      ResultCodes: z.object({
        GlobalItemCheckResultCodes: z.array(z.object({
          Name: z.string().optional(),
          Description: z.string().optional(),
          Comment: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Match: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Warning: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Mismatch: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          ID: z.number()["int"]().optional(),
          Pass: z.string().optional(),
          Address: z.string().optional(),
          Forename: z.string().optional(),
          Surname: z.string().optional(),
          DOB: z.string().optional(),
          Alert: z.string().optional(),
          SanctionsMatches: z.object({
            GlobalSanctionsMatch: z.array(z.object({
              SanctionID: z.string().optional(),
              Url: z.string().optional(),
              Rank: z.number()["int"]().optional(),
              CaseID: z.string().optional(),
              SearchID: z.string().optional()
            })).optional()
          }).optional()
        })).optional()
      }).describe("The result codes of the authentication request").optional(),
      Score: z.number()["int"]().describe("The score of the authentication request").optional(),
      BandText: z.string().describe("The band text of the authentication request").optional(),
      Country: z.string().describe("Country type of the authentication request").optional(),
      ItemCheckDecisionBands: z.object({
        GlobalItemCheckDecisionBands: z.array(z.object({
          ID: z.number()["int"]().optional(),
          BandScore: z.number()["int"]().optional(),
          BandText: z.string().optional()
        })).optional()
      }).describe("The item check decision bands of the authentication request").optional()
    }).describe("Result of the authentication request").optional(),
    pepIntelligenceResult: z.array(z.object({
      Fullname: z.string().optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional(),
      SanctionsPositions: z.object({
        GlobalSanctionsPosition: z.array(z.object({
          Position: z.string().optional(),
          Country: z.string().optional()
        })).optional()
      }).optional()
    })).optional(),
    sanctionsEnforcementsResult: z.array(z.object({
      Fullname: z.string().optional(),
      SanctionsBodies: z.object({
        elements: z.array(z.number()["int"]()).optional()
      }).optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional()
    })).optional()
  }).describe("Details related to the amendments made to the original data."),
  originalData: z.object({
    data: z.object({
      citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("The country of citizenship of the credential subject ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      documentType: z["enum"](["Agents License", "Driving License", "Electoral Card", "Foreigner Identification Card", "Health Card", "Job License", "Membership Identification Card", "Military Identification Card", "National Identification Card", "Passport", "Proof of Age Card", "Travel Permit", "Visa", "Weapons Licence"]).describe("The type of document used to verify the credential subject").optional(),
      firstName: z.string().describe("The first name of the credential subject").optional(),
      lastName: z.string().describe("The last name of the credential subject").optional(),
      gender: z.string().describe("Gender of the credential subject").optional(),
      addressLine1: z.string().describe("Address line 1 of the credential subject").optional(),
      addressLine2: z.string().describe("Address line 2 of the credential subject").optional(),
      birthday: z.string().describe("Birthday of the credential subject").optional(),
      placeOfBirth: z.string().describe("Place of birth of the credential subject").optional(),
      countryOfResidence: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of residence of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
      city: z.string().describe("City of the credential subject").optional(),
      province: z.string().describe("Province of the credential subject").optional(),
      postalCode: z.string().describe("Postal code of the credential subject").optional(),
      emailAddress: z.string().describe("Email address of the credential subject").optional(),
      phoneNumber: z.string().describe("Phone number of the credential subject").optional(),
      countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of birth of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      middleName: z.string().describe("Middle name of the credential subject").optional()
    }).describe("Unmodified personal details imported directly from document during authentication process.").optional(),
    authenticateSPResult: z.object({
      AuthenticationID: z.string().describe("The ID of the authentication request").optional(),
      Timestamp: z.string().datetime().describe("The date and time of the authentication request").optional(),
      CustomerRef: z.string().describe("The customer reference of the authentication request").optional(),
      ProfileID: z.string().describe("The ID of the profile used for the authentication request").optional(),
      ProfileName: z.string().describe("The name of the profile used for the authentication request").optional(),
      ProfileVersion: z.number()["int"]().describe("The version of the profile used for the authentication request").optional(),
      ProfileRevision: z.number()["int"]().describe("The revision of the profile used for the authentication request").optional(),
      ProfileState: z.string().describe("The state of the profile used for the authentication request").optional(),
      ResultCodes: z.object({
        GlobalItemCheckResultCodes: z.array(z.object({
          Name: z.string().optional(),
          Description: z.string().optional(),
          Comment: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Match: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Warning: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Mismatch: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          ID: z.number()["int"]().optional(),
          Pass: z.string().optional(),
          Address: z.string().optional(),
          Forename: z.string().optional(),
          Surname: z.string().optional(),
          DOB: z.string().optional(),
          Alert: z.string().optional(),
          SanctionsMatches: z.object({
            GlobalSanctionsMatch: z.array(z.object({
              SanctionID: z.string().optional(),
              Url: z.string().optional(),
              Rank: z.number()["int"]().optional(),
              CaseID: z.string().optional(),
              SearchID: z.string().optional()
            })).optional()
          }).optional()
        })).optional()
      }).describe("The result codes of the authentication request").optional(),
      Score: z.number()["int"]().describe("The score of the authentication request").optional(),
      BandText: z.string().describe("The band text of the authentication request").optional(),
      Country: z.string().describe("The country type of the authentication request").optional()
    }).describe("The result of the Authenticate SP check").optional(),
    pepIntelligenceResult: z.array(z.object({
      Fullname: z.string().optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional(),
      SanctionsPositions: z.object({
        GlobalSanctionsPosition: z.array(z.object({
          Position: z.string().optional(),
          Country: z.string().optional()
        })).optional()
      }).optional()
    })).describe("The result of the PEP Intelligence check").optional(),
    sanctionsEnforcementsResult: z.array(z.object({
      Fullname: z.string().optional(),
      SanctionsBodies: z.object({
        elements: z.array(z.number()["int"]()).optional()
      }).optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional()
    })).describe("The result of the Sanctions Enforcements check").optional()
  }).describe("Details related to the original data before any amendments"),
  personalDetails: z.object({
    citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("The country of citizenship of the credential subject ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    documentType: z["enum"](["Agents License", "Driving License", "Electoral Card", "Foreigner Identification Card", "Health Card", "Job License", "Membership Identification Card", "Military Identification Card", "National Identification Card", "Passport", "Proof of Age Card", "Travel Permit", "Visa", "Weapons Licence"]).describe("The type of document used to verify the credential subject").optional(),
    firstName: z.string().describe("The first name of the credential subject").optional(),
    lastName: z.string().describe("The last name of the credential subject").optional(),
    gender: z.string().describe("Gender of the credential subject").optional(),
    addressLine1: z.string().describe("Address line 1 of the credential subject").optional(),
    addressLine2: z.string().describe("Address line 2 of the credential subject").optional(),
    birthday: z.string().describe("Birthday of the credential subject").optional(),
    placeOfBirth: z.string().describe("Place of birth of the credential subject").optional(),
    countryOfResidence: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of residence of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
    city: z.string().describe("City of the credential subject").optional(),
    province: z.string().describe("Province of the credential subject").optional(),
    postalCode: z.string().describe("Postal code of the credential subject").optional(),
    emailAddress: z.string().describe("Email address of the credential subject").optional(),
    phoneNumber: z.string().describe("Phone number of the credential subject").optional(),
    countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of birth of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    middleName: z.string().describe("Middle name of the credential subject").optional()
  }).describe("Personal details of the credential subject")
}).describe("Stores the data of the credential");

var IDScanCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("Journey ID of when credential was generated"),
  highLevelResult: z["enum"](["Refer", "NotAccepted", "Notsupported", "Passed", "Refer", "Undefined"]).describe("High level result of the kyc check").optional(),
  firstName: z.string().describe("First name of the credential subject").optional(),
  middleName: z.string().describe("Middle name of the credential subject").optional(),
  lastName: z.string().describe("Last name of the credential subject").optional(),
  gender: z.string().describe("Gender of the credential subject").optional(),
  age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
  citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
  documentCategory: z.string().describe("Category of the document provided by the credential subject").optional(),
  documentName: z.string().describe("Name of the document provided by the credential subject").optional(),
  documentSide: z["enum"](["Front", "Back"]).describe("Side of the document provided by the credential subject").optional(),
  documentType: z["enum"](["Agents License", "Driving License", "Electoral Card", "Foreigner Identification Card", "Health Card", "Job License", "Membership Identification Card", "Military Identification Card", "National Identification Card", "Passport", "Proof of Age Card", "Travel Permit", "Visa", "Weapons Licence"]).describe("Type of the document provided by the credential subject").optional(),
  entryDate: z.string().describe("Entry date associated with the credential").optional(),
  entryTime: z.string().describe("Entry time associated with the credential").optional(),
  fullName: z.string().describe("Full name of the credential subject").optional(),
  addressLine1: z.string().describe("First line of the address of the credential subject").optional(),
  addressLine2: z.string().describe("Second line of the address of the credential subject").optional(),
  birthDate: z.string().describe("Date of birth of the credential subject").optional(),
  birthPlace: z.string().nullable().optional(),
  highLevelResultDetails: z.object({
    documentOverallValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Overall validation status of the document").optional(),
    documentBlockingPolicy: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Blocking policy of the document").optional(),
    documentExpiry: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Expiry status of the document").optional(),
    documentSupport: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Support status of the document").optional(),
    documentValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Validation status of the document").optional(),
    faceMatchValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Validation status of face match").optional(),
    accumulativeLivenessResult: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Result of accumulative liveness check").optional()
  }).describe("Detailed results of the high level KYC check").optional(),
  faceMatchScore: z.string().describe("Score for the face match validation").optional(),
  qualityCheckDetails: z.array(z.object({
    id: z.string().describe("ID of the quality check item").optional(),
    title: z.string().describe("Title of the quality check item").optional(),
    description: z.string().describe("Description of the quality check item").optional(),
    state: z.number()["int"]().describe("State of the quality check item").optional()
  }).describe("Quality check item details")).describe("Details of quality checks performed").optional(),
  validationDetails: z.array(z.object({
    name: z.string().describe("Name of the validation item").optional(),
    description: z.string().describe("Detailed description of the validation item").optional(),
    result: z.number()["int"]().describe("Result code of the validation").optional()
  }).describe("Details of a specific validation item")).describe("Details of the validation performed").optional()
}).describe("Stores the data of the credential");

var IDScanPassportCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64: z.string().describe("Base64 encoded image of the passport image"),
  name: z.string().describe("Name of the docuemnt (e.g. passport.jpg)"),
  documentType: z.string().describe("Type of the document (e.g. image/jpeg, image/png)")
}).describe("Stores the data of the credential");

var IDScanSelfieCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64: z.string().describe("Base64 encoded image of the selfie image"),
  name: z.string().describe("Name of the docuemnt (e.g. selfie.jpg)"),
  documentType: z.string().describe("Type of the document (e.g. image/jpeg, image/png)")
}).describe("Stores the data of the credential");

var OLD_IDImageCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64: z.string().describe("Base64 encoded image of the passport image"),
  name: z.string().describe("Name of the document (e.g. passport.jpg)"),
  documentType: z["enum"](["Agents_License", "Driving_License", "Electoral_Card", "Foreigner_Identification_Card", "Health_Card", "Job_License", "Membership_Identification_Card", "Military_Identification_Card", "National_Identification_Card", "Passport", "Proof_of_Age_Card", "Travel_Permit", "Visa", "Weapons_Licence"]).describe("Type of the document (e.g. passport)"),
  mediaType: z["enum"](["image/jpeg", "image/jpg", "image/png"]).describe("Media type of the document (e.g. image/jpeg, image/png, application/pdf)")
}).describe("Stores the data of the credential");

var OLD_IDInformationCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("Journey ID of when credential was generated"),
  highLevelResult: z["enum"](["Refer", "NotAccepted", "Notsupported", "Passed", "Refer", "Undefined"]).describe("High level result of the kyc check").optional(),
  highLevelResultDetails: z.object({
    documentOverallValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Overall validation status of the document").optional(),
    documentBlockingPolicy: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Blocking policy of the document").optional(),
    documentExpiry: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Expiry status of the document").optional(),
    documentSupport: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Support status of the document").optional(),
    documentValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Validation status of the document").optional(),
    faceMatchValidation: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Validation status of face match").optional(),
    accumulativeLivenessResult: z["enum"](["FAILED", "NOTNEEDED", "PASSED", "SKIPPED", "NEEDED"]).describe("Result of accumulative liveness check").optional()
  }).describe("Detailed results of the high level KYC check").optional(),
  faceMatchScore: z.string().describe("Score for the face match validation").optional(),
  qualityCheckDetails: z.array(z.object({
    id: z.string().describe("ID of the quality check item").optional(),
    title: z.string().describe("Title of the quality check item").optional(),
    description: z.string().describe("Description of the quality check item").optional(),
    state: z.number()["int"]().describe("State of the quality check item").optional()
  }).describe("Quality check item details")).describe("Details of quality checks performed").optional(),
  validationDetails: z.array(z.object({
    name: z.string().describe("Name of the validation item").optional(),
    description: z.string().describe("Detailed description of the validation item").optional(),
    result: z.number()["int"]().describe("Result code of the validation").optional()
  }).describe("Details of a specific validation item")).describe("Details of the validation performed").optional(),
  documentCategory: z.string().describe("Category of the document provided by the credential subject").optional(),
  documentName: z.string().describe("Name of the document provided by the credential subject"),
  documentType: z["enum"](["Agents_License", "Driving_License", "Electoral_Card", "Foreigner_Identification_Card", "Health_Card", "Job_License", "Membership_Identification_Card", "Military_Identification_Card", "National_Identification_Card", "Passport", "Proof_of_Age_Card", "Travel_Permit", "Visa", "Weapons_Licence"]).describe("Type of the document provided by the credential subject"),
  entryDate: z.number()["int"]().describe("Entry date associated with the credential"),
  entryTime: z.string().describe("Entry time associated with the credential"),
  originalData: z.object({
    firstName: z.string().describe("First name of the credential subject").optional(),
    middleName: z.string().describe("Middle name of the credential subject").optional(),
    lastName: z.string().describe("Last name of the credential subject").optional(),
    gender: z.string().describe("Gender of the credential subject").optional(),
    age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
    citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    fullName: z.string().describe("Full name of the credential subject").optional(),
    addressLine1: z.string().describe("First line of the address of the credential subject").optional(),
    addressLine2: z.string().describe("Second line of the address of the credential subject").optional(),
    birthDate: z.number()["int"]().describe("Birth Date of the credential subject in integer format of yyyymmdd, example: 20231226 2023 year, 12-December, 26-day").optional(),
    placeOfBirth: z.string().nullable().describe("Place of birth of the credential subject").optional()
  }).describe("Original data extracted by the provider"),
  amendmentsData: z.object({
    firstName: z.string().describe("The first name of the credential subject").optional(),
    middleName: z.string().describe("Middle name of the credential subject").optional(),
    lastName: z.string().describe("The last name of the credential subject").optional(),
    gender: z.string().describe("Gender of the credential subject").optional(),
    age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
    citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    fullName: z.string().describe("Full name of the credential subject").optional(),
    addressLine1: z.string().describe("Address line 1 of the credential subject").optional(),
    addressLine2: z.string().describe("Address line 2 of the credential subject").optional(),
    birthDate: z.number()["int"]().describe("Birth Date of the credential subject in integer format of yyyymmdd, example: 20231226 2023 year, 12-December, 26-day").optional(),
    placeOfBirth: z.string().describe("Place of birth of the credential subject").optional(),
    countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of birth of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional()
  }).describe("Personal details manually amended by the holder/user during authentication process.")
}).describe("Stores the data of the credential");

var OLD_ProofOfResidenceCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with").optional(),
  country: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("The country of residence - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
  base64: z.string().describe("Base64 encoded image of the proof of residence").optional(),
  name: z.string().describe("Name of the document (e.g. ProofOfResidence.jpg)").optional(),
  documentType: z["enum"](["Gas_bill", "Internet_bill", "Electricity_bill", "Rent_agreement", "Bank_statement"]).describe("Type of the document (e.g. Gas bill, Internet bill, Electricity bill, Rent agreement, Bank statement)").optional(),
  mediaType: z["enum"](["image/jpeg", "image/jpg", "image/png", "application/pdf"]).describe("Media type of the document (e.g. image/jpeg, image/png, application/pdf)").optional(),
  county: z.string().describe("The county of residence").optional(),
  city: z.string().describe("The city of residence").optional(),
  streetName: z.string().describe("The street name of residence").optional(),
  postalCode: z.string().describe("The postal code of residence").optional()
}).describe("Stores the data of the credential");

var OLD_SelfieImageCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64: z.string().describe("Base64 encoded image of the selfie image"),
  name: z.string().describe("Name of the docuemnt (e.g. selfie.jpg)"),
  mediaType: z["enum"](["image/jpeg", "image/jpg", "application/pdf", "image/png"]).describe("Media type of the document (e.g. image/jpeg, image/png)")
}).describe("Stores the data of the credential");

var OLD_AMLScreeningsResultsCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("Journey ID of when credential was generated"),
  amendmentsData: z.object({
    data: z.object({
      firstName: z.string().describe("The first name of the credential subject").optional(),
      middleName: z.string().describe("Middle name of the credential subject").optional(),
      lastName: z.string().describe("The last name of the credential subject").optional(),
      gender: z.string().describe("Gender of the credential subject").optional(),
      age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
      citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      fullName: z.string().describe("Full name of the credential subject").optional(),
      addressLine1: z.string().describe("Address line 1 of the credential subject").optional(),
      addressLine2: z.string().describe("Address line 2 of the credential subject").optional(),
      birthDate: z.number()["int"]().describe("Birth Date of the credential subject in integer format of yyyymmdd, example: 20231226 2023 year, 12-December, 26-day").optional(),
      placeOfBirth: z.string().describe("Place of birth of the credential subject").optional(),
      countryOfResidence: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of residence of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      city: z.string().describe("City of the credential subject").optional(),
      province: z.string().describe("Province of the credential subject").optional(),
      postalCode: z.string().describe("Postal code of the credential subject").optional(),
      emailAddress: z.string().email().describe("Email address of the credential subject").optional(),
      phoneNumber: z.string().describe("Phone number of the credential subject").optional(),
      countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Country of birth of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional()
    }).describe("Personal details manually amended by the holder/user during authentication process.").optional(),
    authenticateSPResult: z.object({
      AuthenticationID: z.string().describe("The ID of the authentication request").optional(),
      Timestamp: z.string().datetime().describe("The timestamp of the authentication request").optional(),
      CustomerRef: z.string().describe("The customer reference of the authentication request").optional(),
      ProfileID: z.string().describe("The ID of the profile used for the authentication request").optional(),
      ProfileName: z.string().describe("The name of the profile used for the authentication request").optional(),
      ProfileVersion: z.number()["int"]().describe("The version of the profile used for the authentication request").optional(),
      ProfileRevision: z.number()["int"]().describe("The revision of the profile used for the authentication request").optional(),
      ProfileState: z.string().describe("The state of the profile used for the authentication request").optional(),
      ResultCodes: z.object({
        GlobalItemCheckResultCodes: z.array(z.object({
          Name: z.string().optional(),
          Description: z.string().optional(),
          Comment: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Match: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Warning: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Mismatch: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          ID: z.number()["int"]().optional(),
          Pass: z.string().optional(),
          Address: z.string().optional(),
          Forename: z.string().optional(),
          Surname: z.string().optional(),
          DOB: z.string().optional(),
          Alert: z.string().optional(),
          SanctionsMatches: z.object({
            GlobalSanctionsMatch: z.array(z.object({
              SanctionID: z.string().optional(),
              Url: z.string().optional(),
              Rank: z.number()["int"]().optional(),
              CaseID: z.string().optional(),
              SearchID: z.string().optional()
            })).optional()
          }).optional()
        })).optional()
      }).describe("The result codes of the authentication request").optional(),
      Score: z.number()["int"]().describe("The score of the authentication request").optional(),
      BandText: z.string().describe("The band text of the authentication request").optional(),
      Country: z.string().describe("Country type of the authentication request").optional(),
      ItemCheckDecisionBands: z.object({
        GlobalItemCheckDecisionBands: z.array(z.object({
          ID: z.number()["int"]().optional(),
          BandScore: z.number()["int"]().optional(),
          BandText: z.string().optional()
        })).optional()
      }).describe("The item check decision bands of the authentication request").optional()
    }).describe("Result of the authentication request").optional(),
    pepIntelligenceResult: z.array(z.object({
      Fullname: z.string().optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional(),
      SanctionsPositions: z.object({
        GlobalSanctionsPosition: z.array(z.object({
          Position: z.string().optional(),
          Country: z.string().optional()
        })).optional()
      }).optional()
    })).optional(),
    sanctionsEnforcementsResult: z.array(z.object({
      Fullname: z.string().optional(),
      SanctionsBodies: z.object({
        elements: z.array(z.number()["int"]()).optional()
      }).optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional()
    })).optional()
  }).describe("Details related to the amendments made to the original data."),
  originalData: z.object({
    data: z.object({
      firstName: z.string().describe("First name of the credential subject").optional(),
      middleName: z.string().describe("Middle name of the credential subject").optional(),
      lastName: z.string().describe("Last name of the credential subject").optional(),
      gender: z.string().describe("Gender of the credential subject").optional(),
      age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
      citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
      fullName: z.string().describe("Full name of the credential subject").optional(),
      addressLine1: z.string().describe("First line of the address of the credential subject").optional(),
      addressLine2: z.string().describe("Second line of the address of the credential subject").optional(),
      birthDate: z.number()["int"]().describe("Birth Date of the credential subject in integer format of yyyymmdd, example: 20231226 2023 year, 12-December, 26-day").optional(),
      placeOfBirth: z.string().nullable().optional()
    }).describe("Unmodified personal details imported directly from document during authentication process.").optional(),
    authenticateSPResult: z.object({
      AuthenticationID: z.string().describe("The ID of the authentication request").optional(),
      Timestamp: z.string().datetime().describe("The date and time of the authentication request").optional(),
      CustomerRef: z.string().describe("The customer reference of the authentication request").optional(),
      ProfileID: z.string().describe("The ID of the profile used for the authentication request").optional(),
      ProfileName: z.string().describe("The name of the profile used for the authentication request").optional(),
      ProfileVersion: z.number()["int"]().describe("The version of the profile used for the authentication request").optional(),
      ProfileRevision: z.number()["int"]().describe("The revision of the profile used for the authentication request").optional(),
      ProfileState: z.string().describe("The state of the profile used for the authentication request").optional(),
      ResultCodes: z.object({
        GlobalItemCheckResultCodes: z.array(z.object({
          Name: z.string().optional(),
          Description: z.string().optional(),
          Comment: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Match: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Warning: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          Mismatch: z.object({
            GlobalItemCheckResultCode: z.array(z.object({
              Description: z.string().optional(),
              Code: z.number()["int"]().optional()
            })).optional()
          }).optional(),
          ID: z.number()["int"]().optional(),
          Pass: z.string().optional(),
          Address: z.string().optional(),
          Forename: z.string().optional(),
          Surname: z.string().optional(),
          DOB: z.string().optional(),
          Alert: z.string().optional(),
          SanctionsMatches: z.object({
            GlobalSanctionsMatch: z.array(z.object({
              SanctionID: z.string().optional(),
              Url: z.string().optional(),
              Rank: z.number()["int"]().optional(),
              CaseID: z.string().optional(),
              SearchID: z.string().optional()
            })).optional()
          }).optional()
        })).optional()
      }).describe("The result codes of the authentication request").optional(),
      Score: z.number()["int"]().describe("The score of the authentication request").optional(),
      BandText: z.string().describe("The band text of the authentication request").optional(),
      Country: z.string().describe("The country type of the authentication request").optional()
    }).describe("The result of the Authenticate SP check").optional(),
    pepIntelligenceResult: z.array(z.object({
      Fullname: z.string().optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional(),
      SanctionsPositions: z.object({
        GlobalSanctionsPosition: z.array(z.object({
          Position: z.string().optional(),
          Country: z.string().optional()
        })).optional()
      }).optional()
    })).describe("The result of the PEP Intelligence check").optional(),
    sanctionsEnforcementsResult: z.array(z.object({
      Fullname: z.string().optional(),
      SanctionsBodies: z.object({
        elements: z.array(z.number()["int"]()).optional()
      }).optional(),
      Aliases: z.object({
        elements: z.array(z.string()).optional()
      }).optional(),
      SanctionsAddresses: z.object({
        GlobalSanctionsAddress: z.array(z.object({
          AddressLine: z.string().optional(),
          City: z.string().optional(),
          Country: z.string().describe("Full name of country").optional(),
          Region: z.string().optional()
        })).optional()
      }).optional(),
      SanctionsDates: z.object({
        GlobalSanctionsDate: z.object({
          DateType: z.string().optional(),
          Day: z.number()["int"]().optional(),
          Month: z.number()["int"]().optional(),
          Year: z.number()["int"]().optional()
        }).optional()
      }).optional(),
      IdentityInformation: z.string().optional()
    })).describe("The result of the Sanctions Enforcements check").optional()
  }).describe("Details related to the original data before any amendments")
}).describe("Stores the data of the credential");

var IDInformationCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("Journey ID of when credential was generated"),
  reviewAnswer: z["enum"](["RED", "YELLOW", "GREEN"]).describe("Review result from kyc provider"),
  reviewRejectType: z["enum"](["FINAL", "RETRY"]).describe("Review reject type").optional(),
  reviewRejectLabels: z.array(z["enum"](["FORGERY", "DOCUMENT_TEMPLATE", "LOW_QUALITY", "SPAM", "NOT_DOCUMENT", "SELFIE_MISMATCH", "ID_INVALID", "FOREIGNER", "DUPLICATE", "BAD_AVATAR", "WRONG_USER_REGION", "INCOMPLETE_DOCUMENT", "BLACKLIST", "BLOCKLIST", "UNSATISFACTORY_PHOTOS", "DOCUMENT_PAGE_MISSING", "DOCUMENT_DAMAGED", "REGULATIONS_VIOLATIONS", "INCONSISTENT_PROFILE", "PROBLEMATIC_APPLICANT_DATA", "ADDITIONAL_DOCUMENT_REQUIRED", "AGE_REQUIREMENT_MISMATCH", "EXPERIENCE_REQUIREMENT_MISMATCH", "CRIMINAL", "WRONG_ADDRESS", "GRAPHIC_EDITOR", "DOCUMENT_DEPRIVED", "COMPROMISED_PERSONS", "PEP", "ADVERSE_MEDIA", "FRAUDULENT_PATTERNS", "SANCTIONS", "NOT_ALL_CHECKS_COMPLETED", "FRONT_SIDE_MISSING", "BACK_SIDE_MISSING", "SCREENSHOTS", "BLACK_AND_WHITE", "INCOMPATIBLE_LANGUAGE", "EXPIRATION_DATE", "UNFILLED_ID", "BAD_SELFIE", "BAD_VIDEO_SELFIE", "BAD_FACE_MATCHING", "BAD_PROOF_OF_IDENTITY", "BAD_PROOF_OF_ADDRESS", "BAD_PROOF_OF_PAYMENT", "SELFIE_WITH_PAPER", "FRAUDULENT_LIVENESS", "OTHER", "REQUESTED_DATA_MISMATCH", "OK", "COMPANY_NOT_DEFINED_STRUCTURE", "COMPANY_NOT_DEFINED_BENEFICIARIES", "COMPANY_NOT_VALIDATED_BENEFICIARIES", "COMPANY_NOT_DEFINED_REPRESENTATIVES", "COMPANY_NOT_VALIDATED_REPRESENTATIVES", "APPLICANT_INTERRUPTED_INTERVIEW", "DOCUMENT_MISSING", "UNSUITABLE_ENV", "CONNECTION_INTERRUPTED", "UNSUPPORTED_LANGUAGE", "THIRD_PARTY_INVOLVED", "CHECK_UNAVAILABLE", "INCORRECT_SOCIAL_NUMBER"])).describe("Reject labels").optional(),
  documentType: z["enum"](["ID_CARD", "PASSPORT", "DRIVERS", "RESIDENCE_PERMIT", "UTILITY_BILL", "SELFIE", "VIDEO_SELFIE", "PROFILE_IMAGE", "ID_DOC_PHOTO", "AGREEMENT", "CONTRACT", "DRIVERS_TRANSLATION", "INVESTOR_DOC", "VEHICLE_REGISTRATION_CERTIFICATE", "INCOME_SOURCE", "PAYMENT_METHOD", "BANK_CARD", "COVID_VACCINATION_FORM", "OTHER"]).describe("Type of the document provided by the credential subject"),
  entryDate: z.number()["int"]().describe("Entry date associated with the credential"),
  entryTime: z.string().describe("Entry time associated with the credential"),
  personalData: z.object({
    firstName: z.string().describe("First name of the credential subject").optional(),
    middleName: z.string().describe("Middle name of the credential subject").optional(),
    lastName: z.string().describe("Last name of the credential subject").optional(),
    gender: z.string().describe("Gender of the credential subject").optional(),
    age: z.number()["int"]().gte(0).lte(125).describe("Age of the credential subject").optional(),
    citizenship: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA", "ANT", "XKX"]).describe("Citizenship status of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    country: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA", "ANT", "XKX"]).describe("Country of the credential subject - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    fullName: z.string().describe("Full name of the credential subject").optional(),
    birthDate: z.number()["int"]().describe("Birth Date of the credential subject in integer format of yyyymmdd, example: 20231226 2023 year, 12-December, 26-day").optional(),
    countryOfBirth: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA", "ANT", "XKX"]).describe("Country of birth of the credential subject - - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
    stateOfBirth: z.string().describe("State of birth of the credential subject").optional()
  }).describe("Original data extracted by the provider"),
  isSandbox: z["boolean"]().describe("Indicates if the credential was generated in a sandbox environment").optional()
}).describe("Stores the data of the credential");

var IDImageCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64_front: z.string().describe("Base64 encoded image of the front of the document"),
  base64_back: z.string().describe("Base64 encoded image of the back of the document").optional(),
  name: z.string().describe("Name of the document (e.g. passport.jpg)"),
  documentType: z["enum"](["ID_CARD", "PASSPORT", "DRIVERS", "RESIDENCE_PERMIT", "UTILITY_BILL", "SELFIE", "VIDEO_SELFIE", "PROFILE_IMAGE", "ID_DOC_PHOTO", "AGREEMENT", "CONTRACT", "DRIVERS_TRANSLATION", "INVESTOR_DOC", "VEHICLE_REGISTRATION_CERTIFICATE", "INCOME_SOURCE", "PAYMENT_METHOD", "BANK_CARD", "COVID_VACCINATION_FORM", "OTHER"]).describe("Type of the document (e.g. passport)"),
  entryDate: z.number()["int"]().describe("Entry date associated with the credential"),
  entryTime: z.string().describe("Entry time associated with the credential"),
  mediaType_front: z["enum"](["image/jpeg", "image/jpg", "image/png", "application/pdf"]).describe("Media type of the front of the document (e.g. image/jpeg, image/png, application/pdf)"),
  mediaType_back: z["enum"](["image/jpeg", "image/jpg", "image/png", "application/pdf"]).describe("Media type of the back of the document (e.g. image/jpeg, image/png, application/pdf)").optional(),
  reviewAnswer: z["enum"](["RED", "YELLOW", "GREEN"]).describe("Review answer from kyc provider"),
  reviewRejectType: z["enum"](["FINAL", "RETRY"]).describe("Review reject type").optional(),
  reviewRejectLabels: z.array(z["enum"](["FORGERY", "DOCUMENT_TEMPLATE", "LOW_QUALITY", "SPAM", "NOT_DOCUMENT", "SELFIE_MISMATCH", "ID_INVALID", "FOREIGNER", "DUPLICATE", "BAD_AVATAR", "WRONG_USER_REGION", "INCOMPLETE_DOCUMENT", "BLACKLIST", "BLOCKLIST", "UNSATISFACTORY_PHOTOS", "DOCUMENT_PAGE_MISSING", "DOCUMENT_DAMAGED", "REGULATIONS_VIOLATIONS", "INCONSISTENT_PROFILE", "PROBLEMATIC_APPLICANT_DATA", "ADDITIONAL_DOCUMENT_REQUIRED", "AGE_REQUIREMENT_MISMATCH", "EXPERIENCE_REQUIREMENT_MISMATCH", "CRIMINAL", "WRONG_ADDRESS", "GRAPHIC_EDITOR", "DOCUMENT_DEPRIVED", "COMPROMISED_PERSONS", "PEP", "ADVERSE_MEDIA", "FRAUDULENT_PATTERNS", "SANCTIONS", "NOT_ALL_CHECKS_COMPLETED", "FRONT_SIDE_MISSING", "BACK_SIDE_MISSING", "SCREENSHOTS", "BLACK_AND_WHITE", "INCOMPATIBLE_LANGUAGE", "EXPIRATION_DATE", "UNFILLED_ID", "BAD_SELFIE", "BAD_VIDEO_SELFIE", "BAD_FACE_MATCHING", "BAD_PROOF_OF_IDENTITY", "BAD_PROOF_OF_ADDRESS", "BAD_PROOF_OF_PAYMENT", "SELFIE_WITH_PAPER", "FRAUDULENT_LIVENESS", "OTHER", "REQUESTED_DATA_MISMATCH", "OK", "COMPANY_NOT_DEFINED_STRUCTURE", "COMPANY_NOT_DEFINED_BENEFICIARIES", "COMPANY_NOT_VALIDATED_BENEFICIARIES", "COMPANY_NOT_DEFINED_REPRESENTATIVES", "COMPANY_NOT_VALIDATED_REPRESENTATIVES", "APPLICANT_INTERRUPTED_INTERVIEW", "DOCUMENT_MISSING", "UNSUITABLE_ENV", "CONNECTION_INTERRUPTED", "UNSUPPORTED_LANGUAGE", "THIRD_PARTY_INVOLVED", "CHECK_UNAVAILABLE", "INCORRECT_SOCIAL_NUMBER"])).describe("Reject labels").optional(),
  isSandbox: z["boolean"]().describe("Indicates if the credential was generated in a sandbox environment").optional()
}).describe("Stores the data of the credential");

var SelfieImageCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  base64: z.string().describe("Base64 encoded image of the selfie image"),
  name: z.string().describe("Name of the docuemnt (e.g. selfie.jpg)"),
  mediaType: z["enum"](["image/jpeg", "image/jpg", "application/pdf", "image/png"]).describe("Media type of the document (e.g. image/jpeg, image/png)"),
  entryDate: z.number()["int"]().describe("Entry date associated with the credential"),
  entryTime: z.string().describe("Entry time associated with the credential"),
  reviewAnswer: z["enum"](["RED", "YELLOW", "GREEN"]).describe("Review result from kyc provider"),
  reviewRejectType: z["enum"](["FINAL", "RETRY"]).describe("Review reject type").optional(),
  reviewRejectLabels: z.array(z["enum"](["FORGERY", "DOCUMENT_TEMPLATE", "LOW_QUALITY", "SPAM", "NOT_DOCUMENT", "SELFIE_MISMATCH", "ID_INVALID", "FOREIGNER", "DUPLICATE", "BAD_AVATAR", "WRONG_USER_REGION", "INCOMPLETE_DOCUMENT", "BLACKLIST", "BLOCKLIST", "UNSATISFACTORY_PHOTOS", "DOCUMENT_PAGE_MISSING", "DOCUMENT_DAMAGED", "REGULATIONS_VIOLATIONS", "INCONSISTENT_PROFILE", "PROBLEMATIC_APPLICANT_DATA", "ADDITIONAL_DOCUMENT_REQUIRED", "AGE_REQUIREMENT_MISMATCH", "EXPERIENCE_REQUIREMENT_MISMATCH", "CRIMINAL", "WRONG_ADDRESS", "GRAPHIC_EDITOR", "DOCUMENT_DEPRIVED", "COMPROMISED_PERSONS", "PEP", "ADVERSE_MEDIA", "FRAUDULENT_PATTERNS", "SANCTIONS", "NOT_ALL_CHECKS_COMPLETED", "FRONT_SIDE_MISSING", "BACK_SIDE_MISSING", "SCREENSHOTS", "BLACK_AND_WHITE", "INCOMPATIBLE_LANGUAGE", "EXPIRATION_DATE", "UNFILLED_ID", "BAD_SELFIE", "BAD_VIDEO_SELFIE", "BAD_FACE_MATCHING", "BAD_PROOF_OF_IDENTITY", "BAD_PROOF_OF_ADDRESS", "BAD_PROOF_OF_PAYMENT", "SELFIE_WITH_PAPER", "FRAUDULENT_LIVENESS", "OTHER", "REQUESTED_DATA_MISMATCH", "OK", "COMPANY_NOT_DEFINED_STRUCTURE", "COMPANY_NOT_DEFINED_BENEFICIARIES", "COMPANY_NOT_VALIDATED_BENEFICIARIES", "COMPANY_NOT_DEFINED_REPRESENTATIVES", "COMPANY_NOT_VALIDATED_REPRESENTATIVES", "APPLICANT_INTERRUPTED_INTERVIEW", "DOCUMENT_MISSING", "UNSUITABLE_ENV", "CONNECTION_INTERRUPTED", "UNSUPPORTED_LANGUAGE", "THIRD_PARTY_INVOLVED", "CHECK_UNAVAILABLE", "INCORRECT_SOCIAL_NUMBER"])).describe("Reject labels").optional(),
  isSandbox: z["boolean"]().describe("Indicates if the credential was generated in a sandbox environment").optional()
}).describe("Stores the data of the credential");

var ProofOfResidenceCredentialSubjectSchema = z.object({
  id: z.string().url().describe("Stores the DID of the subject that owns the credential"),
  journeyId: z.string().uuid().describe("The ID of the journey that this credential is associated with"),
  country: z["enum"](["AFG", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "CPV", "KHM", "CMR", "CAN", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COD", "COG", "COK", "CRI", "HRV", "CUB", "CUW", "CYP", "CZE", "CIV", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "SWZ", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "MKD", "ROU", "RUS", "RWA", "REU", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "UMI", "USA", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE", "ALA", "ANT", "XKX"]).describe("The country of residence - ISO 3166-1 alpha-3 country code (https://www.iban.com/country-codes)").optional(),
  base64: z.string().describe("Base64 encoded image of the proof of residence").optional(),
  name: z.string().describe("Name of the document (e.g. ProofOfResidence.jpg)").optional(),
  documentType: z["enum"](["Gas_bill", "Internet_bill", "Electricity_bill", "Rent_agreement", "Bank_statement"]).describe("Type of the document (e.g. Gas bill, Internet bill, Electricity bill, Rent agreement, Bank statement)"),
  entryDate: z.number()["int"]().describe("Entry date associated with the credential"),
  entryTime: z.string().describe("Entry time associated with the credential"),
  mediaType: z["enum"](["image/jpeg", "image/jpg", "image/png", "application/pdf"]).describe("Media type of the document (e.g. image/jpeg, image/png, application/pdf)").optional(),
  county: z.string().describe("The county of residence").optional(),
  city: z.string().describe("The city of residence").optional(),
  streetName: z.string().describe("The street name of residence").optional(),
  postalCode: z.string().describe("The postal code of residence").optional(),
  isSandbox: z["boolean"]().describe("Indicates if the credential was generated in a sandbox environment").optional()
}).describe("Stores the data of the credential");

// NB: this is supposed to reproduce W3CCredential used in polygon id js sdk

var CredentialStatusTypePID = z["enum"](["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]);
var CredentialStatusPID = z.object({
  id: z.string(),
  type: CredentialStatusTypePID,
  revocationNonce: z.number().optional()
  //statusIssuer?: CredentialStatus;
});
var CredentialSchemaPID = z.object({
  id: z.string(),
  type: z.string()
});
var GenericVerifiableCredentialSchema = z.object({
  id: z.string(),
  "@context": z.array(z.string()).optional(),
  //  context: z.array(z.string()),
  type: z.array(z.string()),
  expirationDate: z.string().optional(),
  issuanceDate: z.string().optional(),
  credentialSubject: z.record(z.string(),
  // The old version of the generated API does not handle z.union correctly.
  // Until we either
  // 1. discontinue usage of the old apiClient
  // or
  // 2. remove {nullable: true} from the birthPlace field in the IDInformation schema
  // we need to use z.any() instead.
  //
  // if you do the following test you can see that the old apiClient does not change
  // when you add z.null() to the union below.
  //
  // 1. comment out the z.any() below.
  z.any()
  // 2. uncomment the following lines
  // z.union([
  //   z.record(z.string(), z.any()),
  //   z.string(),
  //   z.number(),
  //   z.boolean(),
  //   z.null(),
  //   z.array(z.any()),
  // ]),
  // 3. run the following command: pnpnm update-api
  // 4. Notice that several generated files are modified.
  // 5. make a temporary branch to throw away later
  // 6. comment out z.null() above
  // 7. run the following command: pnpnm update-api
  // 8. notice that only the new apiClient is modified.
  // modified:   packages/clients/api/src/generated/apps/ComplianceService.ts
  // modified:   packages/clients/api/src/generated/apps/CustomersService.ts
  // modified:   packages/clients/api/src/generated/apps/ScenariosService.ts
  // modified:   packages/libs/schemas/src/compliance/vc-schemas/supported-schemas/GenericVerifiableCredentialSchema.ts
  ),
  credentialStatus: CredentialStatusPID,
  issuer: z.string(),
  credentialSchema: CredentialSchemaPID,
  proof: z.any() //object | unknown[];
});

var CredentialSchemas = {
  ProofOfResidence: ProofOfResidenceCredentialSubjectSchema,
  SelfieImage: SelfieImageCredentialSubjectSchema,
  IDImage: IDImageCredentialSubjectSchema,
  IDInformation: IDInformationCredentialSubjectSchema,
  AMLScreeningsResults: OLD_AMLScreeningsResultsCredentialSubjectSchema,
  ID3: ID3CredentialSubjectSchema,
  IDScan: IDScanCredentialSubjectSchema,
  IDScanSelfie: IDScanSelfieCredentialSubjectSchema,
  IDScanPassport: IDScanPassportCredentialSubjectSchema
};
var CredentialNames = [{
  value: "AMLScreeningsResults",
  label: "AML screening results"
}, {
  value: "ProofOfResidence",
  label: "Proof of residence"
}, {
  value: "SelfieImage",
  label: "Selfie image"
}, {
  value: "IDImage",
  label: "ID image"
}, {
  value: "IDInformation",
  label: "ID information"
}];
var CredentialTypes = ["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3",
// this is for backwards compatibility
"IDScan",
// this is for backwards compatibility
"IDScanSelfie",
// this is for backwards compatibility
"IDScanPassport" // this is for backwards compatibility
];
var NexeraCredentialType = z["enum"](CredentialTypes);
var getCredentialName = function getCredentialName(value) {
  var _CredentialNames$find;
  return (_CredentialNames$find = CredentialNames.find(function (obj) {
    return obj.value === value;
  })) === null || _CredentialNames$find === void 0 ? void 0 : _CredentialNames$find.label;
};
var CredentialType = z.string().transform(function (x) {
  return x.replace("_", "-");
}) // TODO determine why this is needed
.pipe(z["enum"](CredentialTypes));
// Should this be replaced by GenericVerifiableCredentialSchema?

var VerifiableCredential = z.object({
  issuer: z.string(),
  type: z.array(z.union([z.string(), CredentialType])),
  credentialSubject: z.record(z.unknown())
}).catchall(z.any());
var CredentialMediaType = IDImageCredentialSubjectSchema.shape.mediaType_front;

var ISO3CountryCode = IDInformationCredentialSubjectSchema.shape.personalData.shape.citizenship.unwrap();
var ALPHA_2_COUNTRIES = ["AN", "XK", "AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "VG", "IO", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "HK", "MO", "CX", "CC", "CO", "KM", "CG", "CD", "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "DK", "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "NO", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SZ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VI", "WF", "EH", "YE", "ZM", "ZW"];
var Alpha2Country = z["enum"](ALPHA_2_COUNTRIES);
var countryISO3toISO2Mapping = {
  AFG: "AF",
  ALA: "AX",
  ALB: "AL",
  DZA: "DZ",
  ASM: "AS",
  AND: "AD",
  AGO: "AO",
  AIA: "AI",
  ATA: "AQ",
  ATG: "AG",
  ARG: "AR",
  ARM: "AM",
  ABW: "AW",
  AUS: "AU",
  AUT: "AT",
  AZE: "AZ",
  BHS: "BS",
  BHR: "BH",
  BGD: "BD",
  BRB: "BB",
  BLR: "BY",
  BEL: "BE",
  BLZ: "BZ",
  BEN: "BJ",
  BMU: "BM",
  BTN: "BT",
  BOL: "BO",
  BES: "BQ",
  BIH: "BA",
  BWA: "BW",
  BVT: "BV",
  BRA: "BR",
  VGB: "VG",
  IOT: "IO",
  BRN: "BN",
  BGR: "BG",
  BFA: "BF",
  BDI: "BI",
  KHM: "KH",
  CMR: "CM",
  CAN: "CA",
  CPV: "CV",
  CYM: "KY",
  CAF: "CF",
  TCD: "TD",
  CHL: "CL",
  CHN: "CN",
  HKG: "HK",
  MAC: "MO",
  CXR: "CX",
  CCK: "CC",
  COL: "CO",
  COM: "KM",
  COG: "CG",
  COD: "CD",
  COK: "CK",
  CRI: "CR",
  CIV: "CI",
  HRV: "HR",
  CUB: "CU",
  CUW: "CW",
  CYP: "CY",
  CZE: "CZ",
  DNK: "DK",
  DJI: "DJ",
  DMA: "DM",
  DOM: "DO",
  ECU: "EC",
  EGY: "EG",
  SLV: "SV",
  GNQ: "GQ",
  ERI: "ER",
  EST: "EE",
  ETH: "ET",
  FLK: "FK",
  FRO: "FO",
  FJI: "FJ",
  FIN: "FI",
  FRA: "FR",
  GUF: "GF",
  PYF: "PF",
  ATF: "TF",
  GAB: "GA",
  GMB: "GM",
  GEO: "GE",
  DEU: "DE",
  GHA: "GH",
  GIB: "GI",
  GRC: "GR",
  GRL: "GL",
  GRD: "GD",
  GLP: "GP",
  GUM: "GU",
  GTM: "GT",
  GGY: "GG",
  GIN: "GN",
  GNB: "GW",
  GUY: "GY",
  HTI: "HT",
  HMD: "HM",
  VAT: "VA",
  HND: "HN",
  HUN: "HU",
  ISL: "IS",
  IND: "IN",
  IDN: "ID",
  IRN: "IR",
  IRQ: "IQ",
  IRL: "IE",
  IMN: "IM",
  ISR: "IL",
  ITA: "IT",
  JAM: "JM",
  JPN: "JP",
  JEY: "JE",
  JOR: "JO",
  KAZ: "KZ",
  KEN: "KE",
  KIR: "KI",
  PRK: "KP",
  KOR: "KR",
  KWT: "KW",
  KGZ: "KG",
  LAO: "LA",
  LVA: "LV",
  LBN: "LB",
  LSO: "LS",
  LBR: "LR",
  LBY: "LY",
  LIE: "LI",
  LTU: "LT",
  LUX: "LU",
  MKD: "MK",
  MDG: "MG",
  MWI: "MW",
  MYS: "MY",
  MDV: "MV",
  MLI: "ML",
  MLT: "MT",
  MHL: "MH",
  MTQ: "MQ",
  MRT: "MR",
  MUS: "MU",
  MYT: "YT",
  MEX: "MX",
  FSM: "FM",
  MDA: "MD",
  MCO: "MC",
  MNG: "MN",
  MNE: "ME",
  MSR: "MS",
  MAR: "MA",
  MOZ: "MZ",
  MMR: "MM",
  NAM: "NA",
  NRU: "NR",
  NPL: "NP",
  NLD: "NL",
  NCL: "NC",
  NZL: "NZ",
  NIC: "NI",
  NER: "NE",
  NGA: "NG",
  NIU: "NU",
  NFK: "NF",
  MNP: "MP",
  NOR: "NO",
  OMN: "OM",
  PAK: "PK",
  PLW: "PW",
  PSE: "PS",
  PAN: "PA",
  PNG: "PG",
  PRY: "PY",
  PER: "PE",
  PHL: "PH",
  PCN: "PN",
  POL: "PL",
  PRT: "PT",
  PRI: "PR",
  QAT: "QA",
  REU: "RE",
  ROU: "RO",
  RUS: "RU",
  RWA: "RW",
  BLM: "BL",
  SHN: "SH",
  KNA: "KN",
  LCA: "LC",
  MAF: "MF",
  SPM: "PM",
  VCT: "VC",
  WSM: "WS",
  SMR: "SM",
  STP: "ST",
  SAU: "SA",
  SEN: "SN",
  SRB: "RS",
  SYC: "SC",
  SLE: "SL",
  SGP: "SG",
  SXM: "SX",
  SVK: "SK",
  SVN: "SI",
  SLB: "SB",
  SOM: "SO",
  ZAF: "ZA",
  SGS: "GS",
  SSD: "SS",
  ESP: "ES",
  LKA: "LK",
  SDN: "SD",
  SUR: "SR",
  SJM: "SJ",
  SWZ: "SZ",
  SWE: "SE",
  CHE: "CH",
  SYR: "SY",
  TWN: "TW",
  TJK: "TJ",
  TZA: "TZ",
  THA: "TH",
  TLS: "TL",
  TGO: "TG",
  TKL: "TK",
  TON: "TO",
  TTO: "TT",
  TUN: "TN",
  TUR: "TR",
  TKM: "TM",
  TCA: "TC",
  TUV: "TV",
  UGA: "UG",
  UKR: "UA",
  ARE: "AE",
  GBR: "GB",
  USA: "US",
  UMI: "UM",
  URY: "UY",
  UZB: "UZ",
  VUT: "VU",
  VEN: "VE",
  VNM: "VN",
  VIR: "VI",
  WLF: "WF",
  ESH: "EH",
  YEM: "YE",
  ZMB: "ZM",
  ZWE: "ZW",
  XKX: "XK",
  ANT: "AN"
};
var countryISO2toISO3Mapping = {
  AF: "AFG",
  AX: "ALA",
  AL: "ALB",
  DZ: "DZA",
  AS: "ASM",
  AD: "AND",
  AO: "AGO",
  AI: "AIA",
  AQ: "ATA",
  AG: "ATG",
  AR: "ARG",
  AM: "ARM",
  AW: "ABW",
  AU: "AUS",
  AT: "AUT",
  AZ: "AZE",
  BS: "BHS",
  BH: "BHR",
  BD: "BGD",
  BB: "BRB",
  BY: "BLR",
  BE: "BEL",
  BZ: "BLZ",
  BJ: "BEN",
  BM: "BMU",
  BT: "BTN",
  BO: "BOL",
  BQ: "BES",
  BA: "BIH",
  BW: "BWA",
  BV: "BVT",
  BR: "BRA",
  VG: "VGB",
  IO: "IOT",
  BN: "BRN",
  BG: "BGR",
  BF: "BFA",
  BI: "BDI",
  KH: "KHM",
  CM: "CMR",
  CA: "CAN",
  CV: "CPV",
  KY: "CYM",
  CF: "CAF",
  TD: "TCD",
  CL: "CHL",
  CN: "CHN",
  HK: "HKG",
  MO: "MAC",
  CX: "CXR",
  CC: "CCK",
  CO: "COL",
  KM: "COM",
  CG: "COG",
  CD: "COD",
  CK: "COK",
  CR: "CRI",
  CI: "CIV",
  HR: "HRV",
  CU: "CUB",
  CW: "CUW",
  CY: "CYP",
  CZ: "CZE",
  DK: "DNK",
  DJ: "DJI",
  DM: "DMA",
  DO: "DOM",
  EC: "ECU",
  EG: "EGY",
  SV: "SLV",
  GQ: "GNQ",
  ER: "ERI",
  EE: "EST",
  ET: "ETH",
  FK: "FLK",
  FO: "FRO",
  FJ: "FJI",
  FI: "FIN",
  FR: "FRA",
  GF: "GUF",
  PF: "PYF",
  TF: "ATF",
  GA: "GAB",
  GM: "GMB",
  GE: "GEO",
  DE: "DEU",
  GH: "GHA",
  GI: "GIB",
  GR: "GRC",
  GL: "GRL",
  GD: "GRD",
  GP: "GLP",
  GU: "GUM",
  GT: "GTM",
  GG: "GGY",
  GN: "GIN",
  GW: "GNB",
  GY: "GUY",
  HT: "HTI",
  HM: "HMD",
  VA: "VAT",
  HN: "HND",
  HU: "HUN",
  IS: "ISL",
  IN: "IND",
  ID: "IDN",
  IR: "IRN",
  IQ: "IRQ",
  IE: "IRL",
  IM: "IMN",
  IL: "ISR",
  IT: "ITA",
  JM: "JAM",
  JP: "JPN",
  JE: "JEY",
  JO: "JOR",
  KZ: "KAZ",
  KE: "KEN",
  KI: "KIR",
  KP: "PRK",
  KR: "KOR",
  KW: "KWT",
  KG: "KGZ",
  LA: "LAO",
  LV: "LVA",
  LB: "LBN",
  LS: "LSO",
  LR: "LBR",
  LY: "LBY",
  LI: "LIE",
  LT: "LTU",
  LU: "LUX",
  MK: "MKD",
  MG: "MDG",
  MW: "MWI",
  MY: "MYS",
  MV: "MDV",
  ML: "MLI",
  MT: "MLT",
  MH: "MHL",
  MQ: "MTQ",
  MR: "MRT",
  MU: "MUS",
  YT: "MYT",
  MX: "MEX",
  FM: "FSM",
  MD: "MDA",
  MC: "MCO",
  MN: "MNG",
  ME: "MNE",
  MS: "MSR",
  MA: "MAR",
  MZ: "MOZ",
  MM: "MMR",
  NA: "NAM",
  NR: "NRU",
  NP: "NPL",
  NL: "NLD",
  NC: "NCL",
  NZ: "NZL",
  NI: "NIC",
  NE: "NER",
  NG: "NGA",
  NU: "NIU",
  NF: "NFK",
  MP: "MNP",
  NO: "NOR",
  OM: "OMN",
  PK: "PAK",
  PW: "PLW",
  PS: "PSE",
  PA: "PAN",
  PG: "PNG",
  PY: "PRY",
  PE: "PER",
  PH: "PHL",
  PN: "PCN",
  PL: "POL",
  PT: "PRT",
  PR: "PRI",
  QA: "QAT",
  RE: "REU",
  RO: "ROU",
  RU: "RUS",
  RW: "RWA",
  BL: "BLM",
  SH: "SHN",
  KN: "KNA",
  LC: "LCA",
  MF: "MAF",
  PM: "SPM",
  VC: "VCT",
  WS: "WSM",
  SM: "SMR",
  ST: "STP",
  SA: "SAU",
  SN: "SEN",
  RS: "SRB",
  SC: "SYC",
  SL: "SLE",
  SG: "SGP",
  SX: "SXM",
  SK: "SVK",
  SI: "SVN",
  SB: "SLB",
  SO: "SOM",
  ZA: "ZAF",
  GS: "SGS",
  SS: "SSD",
  ES: "ESP",
  LK: "LKA",
  SD: "SDN",
  SR: "SUR",
  SJ: "SJM",
  SZ: "SWZ",
  SE: "SWE",
  CH: "CHE",
  SY: "SYR",
  TW: "TWN",
  TJ: "TJK",
  TZ: "TZA",
  TH: "THA",
  TL: "TLS",
  TG: "TGO",
  TK: "TKL",
  TO: "TON",
  TT: "TTO",
  TN: "TUN",
  TR: "TUR",
  TM: "TKM",
  TC: "TCA",
  TV: "TUV",
  UG: "UGA",
  UA: "UKR",
  AE: "ARE",
  GB: "GBR",
  US: "USA",
  UM: "UMI",
  UY: "URY",
  UZ: "UZB",
  VU: "VUT",
  VE: "VEN",
  VN: "VNM",
  VI: "VIR",
  WF: "WLF",
  EH: "ESH",
  YE: "YEM",
  ZM: "ZMB",
  ZW: "ZWE",
  XK: "XKX",
  AN: "ANT"
};
var isoCountriesNameFromISO2 = {
  AN: "Netherlands Antiles",
  XK: "Kosovo",
  BQ: "Bonaire, Sint Eustatius and Saba	",
  CW: "Curaçao",
  KP: "Korea (the Democratic People's Republic of)",
  SX: "Sint Maarten (Dutch part)",
  SS: "South Sudan",
  AF: "Afghanistan",
  AX: "Aland Islands",
  AL: "Albania",
  DZ: "Algeria",
  AS: "American Samoa",
  AD: "Andorra",
  AO: "Angola",
  AI: "Anguilla",
  AQ: "Antarctica",
  AG: "Antigua And Barbuda",
  AR: "Argentina",
  AM: "Armenia",
  AW: "Aruba",
  AU: "Australia",
  AT: "Austria",
  AZ: "Azerbaijan",
  BS: "Bahamas",
  BH: "Bahrain",
  BD: "Bangladesh",
  BB: "Barbados",
  BY: "Belarus",
  BE: "Belgium",
  BZ: "Belize",
  BJ: "Benin",
  BM: "Bermuda",
  BT: "Bhutan",
  BO: "Bolivia",
  BA: "Bosnia And Herzegovina",
  BW: "Botswana",
  BV: "Bouvet Island",
  BR: "Brazil",
  IO: "British Indian Ocean Territory",
  BN: "Brunei Darussalam",
  BG: "Bulgaria",
  BF: "Burkina Faso",
  BI: "Burundi",
  KH: "Cambodia",
  CM: "Cameroon",
  CA: "Canada",
  CV: "Cape Verde",
  KY: "Cayman Islands",
  CF: "Central African Republic",
  TD: "Chad",
  CL: "Chile",
  CN: "China",
  CX: "Christmas Island",
  CC: "Cocos (Keeling) Islands",
  CO: "Colombia",
  KM: "Comoros",
  CG: "Congo",
  CD: "Congo, Democratic Republic",
  CK: "Cook Islands",
  CR: "Costa Rica",
  CI: "Cote D'Ivoire",
  HR: "Croatia",
  CU: "Cuba",
  CY: "Cyprus",
  CZ: "Czech Republic",
  DK: "Denmark",
  DJ: "Djibouti",
  DM: "Dominica",
  DO: "Dominican Republic",
  EC: "Ecuador",
  EG: "Egypt",
  SV: "El Salvador",
  GQ: "Equatorial Guinea",
  ER: "Eritrea",
  EE: "Estonia",
  ET: "Ethiopia",
  FK: "Falkland Islands (Malvinas)",
  FO: "Faroe Islands",
  FJ: "Fiji",
  FI: "Finland",
  FR: "France",
  GF: "French Guiana",
  PF: "French Polynesia",
  TF: "French Southern Territories",
  GA: "Gabon",
  GM: "Gambia",
  GE: "Georgia",
  DE: "Germany",
  GH: "Ghana",
  GI: "Gibraltar",
  GR: "Greece",
  GL: "Greenland",
  GD: "Grenada",
  GP: "Guadeloupe",
  GU: "Guam",
  GT: "Guatemala",
  GG: "Guernsey",
  GN: "Guinea",
  GW: "Guinea-Bissau",
  GY: "Guyana",
  HT: "Haiti",
  HM: "Heard Island & Mcdonald Islands",
  VA: "Holy See (Vatican City State)",
  HN: "Honduras",
  HK: "Hong Kong",
  HU: "Hungary",
  IS: "Iceland",
  IN: "India",
  ID: "Indonesia",
  IR: "Iran, Islamic Republic Of",
  IQ: "Iraq",
  IE: "Ireland",
  IM: "Isle Of Man",
  IL: "Israel",
  IT: "Italy",
  JM: "Jamaica",
  JP: "Japan",
  JE: "Jersey",
  JO: "Jordan",
  KZ: "Kazakhstan",
  KE: "Kenya",
  KI: "Kiribati",
  KR: "Korea",
  KW: "Kuwait",
  KG: "Kyrgyzstan",
  LA: "Lao People's Democratic Republic",
  LV: "Latvia",
  LB: "Lebanon",
  LS: "Lesotho",
  LR: "Liberia",
  LY: "Libyan Arab Jamahiriya",
  LI: "Liechtenstein",
  LT: "Lithuania",
  LU: "Luxembourg",
  MO: "Macao",
  MK: "Macedonia",
  MG: "Madagascar",
  MW: "Malawi",
  MY: "Malaysia",
  MV: "Maldives",
  ML: "Mali",
  MT: "Malta",
  MH: "Marshall Islands",
  MQ: "Martinique",
  MR: "Mauritania",
  MU: "Mauritius",
  YT: "Mayotte",
  MX: "Mexico",
  FM: "Micronesia, Federated States Of",
  MD: "Moldova",
  MC: "Monaco",
  MN: "Mongolia",
  ME: "Montenegro",
  MS: "Montserrat",
  MA: "Morocco",
  MZ: "Mozambique",
  MM: "Myanmar",
  NA: "Namibia",
  NR: "Nauru",
  NP: "Nepal",
  NL: "Netherlands",
  NC: "New Caledonia",
  NZ: "New Zealand",
  NI: "Nicaragua",
  NE: "Niger",
  NG: "Nigeria",
  NU: "Niue",
  NF: "Norfolk Island",
  MP: "Northern Mariana Islands",
  NO: "Norway",
  OM: "Oman",
  PK: "Pakistan",
  PW: "Palau",
  PS: "Palestinian Territory, Occupied",
  PA: "Panama",
  PG: "Papua New Guinea",
  PY: "Paraguay",
  PE: "Peru",
  PH: "Philippines",
  PN: "Pitcairn",
  PL: "Poland",
  PT: "Portugal",
  PR: "Puerto Rico",
  QA: "Qatar",
  RE: "Reunion",
  RO: "Romania",
  RU: "Russian Federation",
  RW: "Rwanda",
  BL: "Saint Barthelemy",
  SH: "Saint Helena",
  KN: "Saint Kitts And Nevis",
  LC: "Saint Lucia",
  MF: "Saint Martin",
  PM: "Saint Pierre And Miquelon",
  VC: "Saint Vincent And Grenadines",
  WS: "Samoa",
  SM: "San Marino",
  ST: "Sao Tome And Principe",
  SA: "Saudi Arabia",
  SN: "Senegal",
  RS: "Serbia",
  SC: "Seychelles",
  SL: "Sierra Leone",
  SG: "Singapore",
  SK: "Slovakia",
  SI: "Slovenia",
  SB: "Solomon Islands",
  SO: "Somalia",
  ZA: "South Africa",
  GS: "South Georgia And Sandwich Isl.",
  ES: "Spain",
  LK: "Sri Lanka",
  SD: "Sudan",
  SR: "Suriname",
  SJ: "Svalbard And Jan Mayen",
  SZ: "Swaziland",
  SE: "Sweden",
  CH: "Switzerland",
  SY: "Syrian Arab Republic",
  TW: "Taiwan",
  TJ: "Tajikistan",
  TZ: "Tanzania",
  TH: "Thailand",
  TL: "Timor-Leste",
  TG: "Togo",
  TK: "Tokelau",
  TO: "Tonga",
  TT: "Trinidad And Tobago",
  TN: "Tunisia",
  TR: "Turkey",
  TM: "Turkmenistan",
  TC: "Turks And Caicos Islands",
  TV: "Tuvalu",
  UG: "Uganda",
  UA: "Ukraine",
  AE: "United Arab Emirates",
  GB: "United Kingdom",
  US: "United States",
  UM: "United States Outlying Islands",
  UY: "Uruguay",
  UZ: "Uzbekistan",
  VU: "Vanuatu",
  VE: "Venezuela",
  VN: "Viet Nam",
  VG: "Virgin Islands, British",
  VI: "Virgin Islands, U.S.",
  WF: "Wallis And Futuna",
  EH: "Western Sahara",
  YE: "Yemen",
  ZM: "Zambia",
  ZW: "Zimbabwe"
};
function parseISO3CountryCode(code) {
  return ISO3CountryCode.safeParse(code).success ? ISO3CountryCode.parse(code) : undefined;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

/**
 * EIP155
 */
var isValidAddress = function isValidAddress(address) {
  var regex = /^0x[a-fA-F0-9]{40}$/;
  return regex.test(address);
};
var String0x = z.string().refine(function (value) {
  return value.startsWith("0x");
}, {
  message: "0x string must start with '0x'"
}).transform(function (value) {
  return value.toLowerCase();
}).describe("0x string");
var PrivateKey = String0x;
var HexadecimalSchema = z.string().refine(function (value) {
  return /^[0-9a-fA-F]+$/.test(value);
}, {
  message: "Input must be a hexadecimal string"
});

/**
 * Note: it might be nice to use String0x as the base object instead of z.string(),
 * but this causes update-api to fail with the following error:
 * TRPCError: [query.kyc.sumsub.getJourneyData] -
 * Input parser key: "userAddress" must be ZodString, ZodNumber, ZodBoolean, ZodBigInt or ZodDate
 */
var AddressSchema = z.string().refine(function (value) {
  return isValidAddress(value);
}).transform(function (value) {
  return value.toLowerCase();
}).describe("String value that identifies the address of a specific user. Normally tied to an EOA that includes the Smart Wallet.");
var TxHash = z.string().transform(function (value) {
  return value.toLowerCase();
}).describe("Transaction hash");
var EIP155Signature = String0x;
var FunctionCallData = String0x;
var shortAddress = function shortAddress(address) {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
  return "".concat(address.substring(0, 6), "...").concat(address.substring(address.length - 4));
};

/**
 * Aptos
 */
var AptosAddress = String0x;
var AptosSignature = z.string();
/**
 * Starknet
 */
var StarknetAddress = String0x;
var StarknetSignature = String0x;
/**
 * Polkadot
 */
var PolkadotAddress = z.string();
var PolkadotSignature = String0x;
/**
 * Cosmos
 */
var CosmosAddress = z.string().refine(function (value) {
  return value.startsWith("cosmos");
}, {
  message: "Cosmos address must start with 'cosmos'"
}).transform(function (value) {
  return value;
}).describe("Cosmos address");
var CosmosSignature = HexadecimalSchema;
/**
 * Tezos
 */
var TezosAddress = z.string().refine(function (value) {
  return value.startsWith("tz");
}, {
  message: "Tezos address must start with 'tz'"
}).transform(function (value) {
  return value;
}).describe("Tezos address");
var EdSignature = z.string().refine(function (value) {
  return value.startsWith("edsig");
}, {
  message: "EdSignature must start with 'edsig'"
});
var SpSignature = z.string().refine(function (value) {
  return value.startsWith("spsig");
}, {
  message: "SpSignature must start with 'spsig'"
});
var P2Signature = z.string().refine(function (value) {
  return value.startsWith("p2sig");
}, {
  message: "P2Signature must start with 'p2sig'"
});
var TezosSignature = z.union([EdSignature, SpSignature, P2Signature]);
/**
 * Cardano
 */
var CardanoAddress = z.string().refine(function (value) {
  return value.startsWith("addr");
}, {
  message: "Cardano address must start with 'addr'"
}).transform(function (value) {
  return value;
}).describe("Cosmos address");
var CardanoSignature = HexadecimalSchema;
/**
 * Chain agnostic schemas
 */
var BlockchainAddress = z.union([AddressSchema, TezosAddress, AptosAddress, PolkadotAddress, StarknetAddress, CosmosAddress, CardanoAddress]);
var BlockchainSignature = z.union([EIP155Signature, TezosSignature, AptosSignature, PolkadotSignature, StarknetSignature, CosmosSignature, CardanoSignature]);
var BLOCKCHAIN_NAMESPACES = ["tezos", "eip155", "aptos", "polkadot", "starknet", "cosmos", "solana", "cardano"];
var BlockchainNamespace = z["enum"](BLOCKCHAIN_NAMESPACES);
var coerceBoolean = z["enum"](["0", "1", "true", "false"])["catch"]("false").transform(function (value) {
  return value == "true" || value == "1";
});
var ENVS = ["cicd", "local", "test-dev-1", "test-dev-2", "dev", "stage", "prod"];
var EnvironmentSchema = z["enum"](ENVS);
var UuidString = z.string().uuid();
/**
 * Zod parse without throwing an error if the value is invalid
 * Rather, it returns a object with optional error and data fields
 *
 * @param schema
 * @param value
 * @constructor
 */
function ZodParse(schema, value) {
  var result = schema.safeParse(value);
  if (result.success) {
    return {
      data: result.data,
      error: undefined
    };
  } else {
    return {
      error: result.error,
      data: undefined
    };
  }
}
var shortBlockchainAddress = function shortBlockchainAddress(address) {
  return "".concat(address.substring(0, 6), "...").concat(address.substring(address.length - 4));
};

function toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var ScenarioTypes = ["ChallengeQuery", "OnChainZKP", "OffChainZKP"];
var ScenarioType = z["enum"](ScenarioTypes);
var ScenarioStatuses = ["UpToDate", "NoRulesAdded", "HasNotDeployment"];
var ScenarioStatus = z["enum"](ScenarioStatuses);
var RuleEngineResponse = z.object({
  objectType: ScenarioType,
  objectId: z.string().describe("Object id in the cms (challengeQueryid, onChainZKPid, offChainZKPid)"),
  // TODO ACTUALLY THIS MIGHT BE JUST THE CHALLENGE_QUERY ID
  name: z.string(),
  address: z.string(),
  result: z.object({
    result: z.object({
      is_valid: z["boolean"](),
      reasons: z.array(z.unknown())
    }),
    // TODO maybe start using OpaChallengeQueryResponse
    executionId: z.string().uuid()
  }),
  executionId: z.string(),
  scenarioId: z.string()
});
var ScenarioExecutionResponse = z.array(RuleEngineResponse);
var RuleResultStatuses = ["valid", "not-valid", "error", "unknown"];
var RuleResultStatus = z["enum"](RuleResultStatuses);
var RuleResultStatusLabels = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, RuleResultStatus.Enum.valid, "Valid"), RuleResultStatus.Enum["not-valid"], "Not Valid"), RuleResultStatus.Enum.error, "Error"), RuleResultStatus.Enum.unknown, "Unknown");

// Request

var MediaType = /*#__PURE__*/function (MediaType) {
  MediaType["ZKPMessage"] = "application/iden3-zkp-json";
  MediaType["PlainMessage"] = "application/iden3comm-plain-json";
  MediaType["SignedMessage"] = "application/iden3comm-signed-json";
  return MediaType;
}({});
var MediaTypePID = z.nativeEnum(MediaType);
var ZeroKnowledgeProofRequest = z.object({
  id: z.number(),
  circuitId: z.string(),
  optional: z["boolean"]().optional(),
  query: z.record(z.string(), z.any())
});
var AuthorizationRequestMessage = z.object({
  id: z.string(),
  typ: MediaTypePID,
  type: z.string(),
  thid: z.string().optional(),
  body: z.object({
    callbackUrl: z.string(),
    reason: z.string().optional(),
    did_doc: z.any().optional(),
    message: z.string().optional(),
    scope: z.array(ZeroKnowledgeProofRequest)
  }),
  from: z.string(),
  to: z.string().optional()
});
// Response
var ProofData = z.object({
  pi_a: z.array(z.string()),
  pi_b: z.array(z.array(z.string())),
  pi_c: z.array(z.string()),
  protocol: z.string(),
  curve: z.string().optional()
});
var ZeroKnowledgeProofResponse = z.object({
  id: z.number(),
  circuitId: z.string(),
  vp: z.any().optional(),
  proof: ProofData,
  pub_signals: z.array(z.string())
});
var AuthorizationResponseMessage = z.object({
  id: z.string(),
  typ: MediaTypePID.optional(),
  type: z.string(),
  thid: z.string().optional(),
  body: z.object({
    did_doc: z.any().optional(),
    message: z.string().optional(),
    scope: z.array(ZeroKnowledgeProofResponse)
  }),
  from: z.string().optional(),
  to: z.string().optional()
});
// Polygon Wallet
var CredentialQrCodeData = z.object({
  id: z.string(),
  typ: z.string(),
  type: z.string(),
  thid: z.string(),
  body: z.object({
    url: z.string(),
    credentials: z.unknown()
  }),
  from: z.string(),
  to: z.string()
});
var AuthQrCodeData = z.object({
  id: z.string(),
  typ: z.string(),
  type: z.string(),
  thid: z.string(),
  body: z.object({
    callbackUrl: z.string(),
    reason: z.string(),
    scope: z.unknown()
  }),
  from: z.string()
});
var QrCodeLinkWithSchemaType = z.object({
  qrCodeLink: z.string().nullish(),
  schemaType: z.string().nullish()
}).describe("Polygon ID Verifiable Credential Offer, to be consumed by the Polygon ID Wallet");
function parseIden3Message(input) {
  var prefix = "request_uri=";
  var startIndex = input.indexOf(prefix);
  if (startIndex === -1) {
    throw new Error("Wrong request - request doesn't start with request_uri=");
  }
  return z.string().url().parse(input.substring(startIndex + prefix.length));
}
function parseSessionIdFromUrl(urlString) {
  var url = new URL(urlString);
  var params = new URLSearchParams(url.search);
  var sessionId = params.get("sessionID");
  if (!sessionId) {
    throw new Error("No Session Id found in callback url");
  }
  return sessionId;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}

function zodEnumFromObjKeys(obj) {
  var _ref = Object.keys(obj),
    _ref2 = _toArray(_ref),
    firstKey = _ref2[0],
    otherKeys = _ref2.slice(1);
  return z["enum"]([firstKey].concat(_toConsumableArray(otherKeys)));
}
var AllCredentialAttributes = z.union([zodEnumFromObjKeys(IDInformationCredentialSubjectSchema.shape), zodEnumFromObjKeys(IDImageCredentialSubjectSchema.shape), zodEnumFromObjKeys(SelfieImageCredentialSubjectSchema.shape), zodEnumFromObjKeys(ProofOfResidenceCredentialSubjectSchema.shape)]);
var AllCredentialValues = z.union([z["boolean"](), z.string(), z.number(), z.array(z.union([z.string(), z.number()]))]);
var Operator = z["enum"](["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]);
var ZKPOperator = Operator.exclude(["$lte", "$gte"]);
var operatorDisplayMap = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Operator["enum"].$eq, "="), Operator["enum"].$gt, ">"), Operator["enum"].$lt, "<"), Operator["enum"].$gte, ">="), Operator["enum"].$lte, "<="), Operator["enum"].$ne, "!="), Operator["enum"].$in, "in"), Operator["enum"].$nin, "not in"), Operator["enum"].$noop, "noop");
var ARRAY_OPERATORS = [Operator["enum"].$in, Operator["enum"].$nin, Operator["enum"].$eq, Operator["enum"].$ne];
var ArrayOperator = z["enum"](ARRAY_OPERATORS);
var STRING_OPERATORS = [Operator["enum"].$eq, Operator["enum"].$ne, Operator["enum"].$in, Operator["enum"].$nin];
var StringOperator = z["enum"](STRING_OPERATORS);
var NUMERIC_OPERATORS = [Operator["enum"].$eq, Operator["enum"].$ne, Operator["enum"].$gt, Operator["enum"].$gte, Operator["enum"].$lt, Operator["enum"].$lte];
var NumericOperator = z["enum"](NUMERIC_OPERATORS);
var BOOLEAN_OPERATORS = [Operator["enum"].$eq, Operator["enum"].$ne];
var BooleanOperator = z["enum"](BOOLEAN_OPERATORS);
var DATE_OPERATORS = [Operator["enum"].$eq, Operator["enum"].$ne, Operator["enum"].$gt, Operator["enum"].$gte, Operator["enum"].$lt, Operator["enum"].$lte];
var DateOperator = z["enum"](DATE_OPERATORS);
var SUPPORTED_TYPES = ["string", "integer", "boolean", "number", "array", "date"];
var SupportedType = z["enum"](SUPPORTED_TYPES);
var SupportedTypes = z.object(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, SupportedType["enum"].string, StringOperator), SupportedType["enum"].integer, NumericOperator), SupportedType["enum"]["boolean"], BooleanOperator), SupportedType["enum"].number, NumericOperator), SupportedType["enum"].array, ArrayOperator), SupportedType["enum"].date, DateOperator));
var IDInformation = z.object({
  type: z.literal("IDInformation"),
  requestId: z.coerce.number().nullish(),
  attribute: z.union([z.string(), zodEnumFromObjKeys(IDInformationCredentialSubjectSchema.shape)]),
  value: AllCredentialValues,
  // TODO play with discriminatedUnion to make it dynamic based on selected attribute (e.g. if attribute age is type number in the schema, then value her shuld be number etc..)
  operator: Operator
});
var IDImage = z.object({
  type: z.literal("IDImage"),
  requestId: z.coerce.number().nullish(),
  attribute: z.union([z.string(), zodEnumFromObjKeys(IDImageCredentialSubjectSchema.shape)]),
  value: AllCredentialValues,
  // TODO play with discriminatedUnion to make it dynamic based on selected attribute (e.g. if attribute age is type number in the schema, then value her shuld be number etc..)
  operator: Operator
});
var SelfieImage = z.object({
  type: z.literal("SelfieImage"),
  requestId: z.coerce.number().nullish(),
  attribute: z.union([z.string(), zodEnumFromObjKeys(SelfieImageCredentialSubjectSchema.shape)]),
  value: AllCredentialValues,
  // TODO play with discriminatedUnion to make it dynamic based on selected attribute (e.g. if attribute age is type number in the schema, then value her shuld be number etc..)
  operator: Operator
});
var ProofOfResidence = z.object({
  type: z.literal("ProofOfResidence"),
  requestId: z.coerce.number().nullish(),
  attribute: z.union([z.string(), zodEnumFromObjKeys(ProofOfResidenceCredentialSubjectSchema.shape)]),
  value: AllCredentialValues,
  // TODO play with discriminatedUnion to make it dynamic based on selected attribute (e.g. if attribute age is type number in the schema, then value her shuld be number etc..)
  operator: Operator
});
var QueryConfig = z.discriminatedUnion("type", [IDInformation, IDImage, SelfieImage, ProofOfResidence]);
var QueryConfigSimplified = z.object({
  type: z["enum"](["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults",
  // backwards compatibility

  "ID3",
  // this is for backwards compatibility
  "IDScan",
  // this is for backwards compatibility
  "IDScanSelfie",
  // this is for backwards compatibility
  "IDScanPassport" // this is for backwards compatibility
  ]),
  requestId: z.coerce.number().nullish().describe("Request ID for ZKPs"),
  attribute: z.string(),
  value: AllCredentialValues,
  // TODO play with discriminatedUnion to make it dynamic based on selected attribute (e.g. if attribute age is type number in the schema, then value her shuld be number etc..)
  operator: Operator
});
var PartialQueryConfigSimplified = QueryConfigSimplified.partial();
var transformQuery = function transformQuery(request) {
  var schema = CredentialSchemas[request.type];
  var transformedValue = request.value;
  var shape = schema.shape[request.attribute];
  if (shape instanceof ZodOptional) {
    var wrapped = shape.unwrap();
    if (wrapped instanceof ZodNumber) {
      transformedValue = z.coerce.number().parse(request.value);
    }
  }
  return {
    requestId: request.requestId,
    type: request.type,
    attribute: request.attribute,
    operator: request.operator,
    value: transformedValue
  };
};
// this is used to parse updateQuery response
// value won't be parsed if type is not there, which is fine for now
// because we don't use value from update response
var transformPartialQuery = function transformPartialQuery(request) {
  if (!request.type || !request.value) {
    return request;
  }
  var schema = CredentialSchemas[request.type];
  var transformedValue = request.value;
  var shape = schema.shape[request.attribute];
  if (shape instanceof ZodOptional) {
    var wrapped = shape.unwrap();
    if (wrapped instanceof ZodNumber) {
      transformedValue = z.coerce.number().parse(request.value);
    }
  }
  return {
    requestId: request.requestId,
    type: request.type,
    attribute: request.attribute,
    operator: request.operator,
    value: transformedValue
  };
};
var QueryConfigSimplifiedParsed = QueryConfigSimplified.transform(transformQuery);
var QueryConfiguration = z.object({
  id: z.string(),
  query: QueryConfigSimplifiedParsed
});
var CreateQueryConfigurationInput = z.object({
  query: QueryConfigSimplified,
  scenarioId: z.string()
});
// Response should be parsed to get right value type
var CreateQueryConfigurationResponse = z.object({
  queryConfiguration: QueryConfigSimplifiedParsed
});
var UpdateQueryConfigurationInput = z.object({
  queryConfigurationId: z.string(),
  scenarioId: z.string(),
  query: PartialQueryConfigSimplified
});
// Response should be parsed to get right value type
var UpdateQueryConfigurationResponse = z.object({
  queryConfiguration: PartialQueryConfigSimplified.transform(transformPartialQuery)
});
var DeleteQueryConfigurationInput = z.object({
  queryConfigurationId: z.string(),
  scenarioId: z.string()
});
var DeleteQueryConfigurationResponse = z.object({
  queryConfigurationId: z.string()
});
var QueryCredentialTypes = ["IDInformation", "IDImage", "SelfieImage", "ProofOfResidence"];
var QueryCredentialType = z["enum"](QueryCredentialTypes);

var ScenarioAuthorizationData = z.object({
  executionId: UuidString,
  sessionId: UuidString,
  projectId: z.string(),
  address: BlockchainAddress,
  status: z["enum"](["pending", "authorised", "unauthorised"]),
  scenarioId: z.string(),
  scenarioName: z.string(),
  requestMessage: AuthorizationRequestMessage,
  responseMessage: AuthorizationResponseMessage.nullish(),
  verificationError: z.string().nullish(),
  query: QueryConfigSimplified
});
var SdkVerificationResponseSchema = z.object({
  customerId: z.string(),
  scenarioExecutionId: z.string(),
  status: RuleResultStatus,
  results: z.array(ScenarioExecutionResponse)
});
var CloseScreenNotification = z.object({
  type: z.literal("closeScreen"),
  identifier: z.string(),
  data: z.undefined()
});
var KycCompletionData = z.array(VerifiableCredential);
var KycCompletionNotification = z.object({
  type: z.literal("kycCompletion"),
  identifier: z.string(),
  data: KycCompletionData
});
var RuleEngineScenarioExecutionData = z.object({
  type: z.literal("RuleEngineScenarioExecution"),
  data: SdkVerificationResponseSchema
});
var OffChainScenarioExecutionData = z.object({
  type: z.literal("OffChainScenarioExecution"),
  data: z.array(ScenarioAuthorizationData)
});
var OnChainScenarioExecutionData = z.object({
  type: z.literal("OnChainScenarioExecution"),
  data: z.any()
});
var ScenarioExecutionData = z.union([RuleEngineScenarioExecutionData, OffChainScenarioExecutionData, OnChainScenarioExecutionData]);
var ScenarioExecutionNotification = z.object({
  type: z.literal("scenarioExecution"),
  identifier: z.string(),
  data: ScenarioExecutionData
});
var IsVerifiedNotification = z.object({
  type: z.literal("isVerifiedNotification"),
  identifier: z.string(),
  isVerified: z["boolean"]()
});
var PolygonIdInitialized = z.object({
  type: z.literal("polygonIdInitialized"),
  identifier: z.string(),
  data: z.string()
});
var OcvSdkInitialized = z.object({
  type: z.literal("ocvSdkInitialized"),
  identifier: z.string()
});
var StartCompletedNotification = z.object({
  type: z.literal("startCompletedNotification"),
  identifier: z.string()
});
var IdentityNotificationMessage = z.union([CloseScreenNotification, PolygonIdInitialized, OcvSdkInitialized, StartCompletedNotification, KycCompletionNotification, ScenarioExecutionNotification, IsVerifiedNotification]);
var InitialDataRequest = z.object({
  type: z.literal("initialDataRequest"),
  identifier: z.string()
});
var SignatureRequest = z.object({
  type: z.literal("signatureRequest"),
  identifier: z.string(),
  data: z.object({
    message: z.string()
  })
});
var TransactionData = z.object({
  accountAddress: AddressSchema,
  to: AddressSchema,
  data: PrivateKey,
  value: z.string().optional()
});
var SendTransactionRequest = z.object({
  type: z.literal("sendTransactionRequest"),
  identifier: z.string(),
  data: TransactionData
});
var IdentityRequestMessage = z.union([InitialDataRequest, SignatureRequest, SendTransactionRequest]);
var AVAILABLE_FLOWS = ["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"];
var AvailableFlow = z["enum"](AVAILABLE_FLOWS);
var DataAvailableOnStart = z.object({
  identifier: z.string().optional(),
  flow: z["enum"](AVAILABLE_FLOWS).optional(),
  accessToken: z.string(),
  signingMessage: z.string(),
  signature: z.string()
});
var InitialDataResponse = z.object({
  type: z.literal("onStartKyc"),
  data: DataAvailableOnStart
});
var SignatureResponse = z.object({
  type: z.literal("signature"),
  data: BlockchainSignature
});
var TransactionResponse = z.object({
  type: z.literal("transactionResponse"),
  data: z.object({
    txHash: TxHash
  })
});
var HostResponseMessage = z.union([InitialDataResponse, SignatureResponse, TransactionResponse]);

/**
 * Exported types
 */

// these are attributes are marked optional to be better presented by openapi.
// this is hopefully fixed in the refined version of the schema
var ChallengeQueryOperators = z.object({
  GREATER_THAN: z.optional(z.number()),
  LESS_THAN: z.optional(z.number()),
  EQUAL_TO: z.optional(z.union([z.string(), z.number(), z.array(z.never()), z.array(z.number()), z.array(z.string())])),
  NOT_EQUAL_TO: z.optional(z.union([z.string(), z.number(), z.array(z.never()), z.array(z.number()), z.array(z.string())])),
  LESS_THAN_OR_EQUAL_TO: z.optional(z.number()),
  GREATER_THAN_OR_EQUAL_TO: z.optional(z.number()),
  IN: z.optional(z.union([z.string(), z.array(z.number()), z.array(z.string())])),
  NOT_IN: z.optional(z.union([z.string(), z.array(z.number()), z.array(z.string())]))
}).refine(function (data) {
  // make sure tht if an operator is defined, the value is also defined
  for (var operator in data) {
    var value = data[operator];
    if (value === undefined) {
      return false;
    }
  }
  // make sure that only one operator is defined at a time
  var operators = Object.keys(data);
  if (operators.length > 1) {
    return false;
  }
  return true;
});
var ChallengeQueryOperator = z["enum"](["GREATER_THAN", "LESS_THAN", "EQUAL_TO", "NOT_EQUAL_TO", "LESS_THAN_OR_EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO", "IN", "NOT_IN"]);
var OperatorToChallengeQueryOperator = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Operator["enum"].$noop, ChallengeQueryOperator["enum"].EQUAL_TO), Operator["enum"].$eq, ChallengeQueryOperator["enum"].EQUAL_TO), Operator["enum"].$lt, ChallengeQueryOperator["enum"].LESS_THAN), Operator["enum"].$lte, ChallengeQueryOperator["enum"].LESS_THAN_OR_EQUAL_TO), Operator["enum"].$gt, ChallengeQueryOperator["enum"].GREATER_THAN), Operator["enum"].$gte, ChallengeQueryOperator["enum"].GREATER_THAN_OR_EQUAL_TO), Operator["enum"].$in, ChallengeQueryOperator["enum"].IN), Operator["enum"].$nin, ChallengeQueryOperator["enum"].NOT_IN), Operator["enum"].$ne, ChallengeQueryOperator["enum"].NOT_EQUAL_TO);
var ChallengeQueryOperatorToOperator = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ChallengeQueryOperator["enum"].EQUAL_TO, Operator["enum"].$eq), ChallengeQueryOperator["enum"].LESS_THAN, Operator["enum"].$lt), ChallengeQueryOperator["enum"].LESS_THAN_OR_EQUAL_TO, Operator["enum"].$lte), ChallengeQueryOperator["enum"].GREATER_THAN, Operator["enum"].$gt), ChallengeQueryOperator["enum"].GREATER_THAN_OR_EQUAL_TO, Operator["enum"].$gte), ChallengeQueryOperator["enum"].IN, Operator["enum"].$in), ChallengeQueryOperator["enum"].NOT_IN, Operator["enum"].$nin), ChallengeQueryOperator["enum"].NOT_EQUAL_TO, Operator["enum"].$ne);
var ChallengeQuerySchema = z.object({
  id: z.string().optional(),
  query: QueryConfig
});
var ExecuteChallengeQueryInput = z.object({
  address: BlockchainAddress,
  credentials: z.array(GenericVerifiableCredentialSchema).min(1),
  challengeQuery: QueryConfig
});
var ExecuteChallengeQueryConfig = z.object({
  input: ExecuteChallengeQueryInput,
  executionId: z.string(),
  cmsObjectId: z.string(),
  cmsScenarioId: z.string().optional()
});
var OpaChallengeQueryResponse = z.object({
  result: z.object({
    is_valid: z["boolean"](),
    reasons: z.array(z.string())
  })
});
var ExecuteChallengeQueryResponse = OpaChallengeQueryResponse.extend({
  executionId: z.string()
});
var OPAChallengeQuery = z.record(ChallengeQueryOperators).refine(function (data) {
  // we are not validating the dotPath, only the operators
  for (var dotPath in data) {
    var operatorsData = data[dotPath];
    if (operatorsData === undefined) {
      return false;
    }
    // if the operator is not a valid operator, operatorsData will be {}
    var operators = Object.keys(operatorsData);
    if (operators.length === 0) {
      return false;
    }
  }
  return true;
}, {
  message: "Invalid operator found."
});
var OnChainRuleResult = z.object({
  result: z.object({
    is_valid: z["boolean"](),
    txHash: TxHash,
    scenarioVerifierAddress: AddressSchema,
    reasons: z.array(z.string())
  })
});
var OffChainZKPRuleResult = z.object({
  result: z.object({
    is_valid: z["boolean"](),
    query: QueryConfigSimplified,
    reasons: z.array(z.string())
  })
});
var SdkVerificationOutput = z.object({
  customerId: z.string(),
  scenarioExecutionId: z.string(),
  status: RuleResultStatus,
  results: z.array(ScenarioExecutionResponse)
});

var ComplianceImplementationStepsInput = z.object({
  identityChecks: z["boolean"]().nullish(),
  configureIdentity: z["boolean"]().nullish(),
  deployIdentity: z["boolean"]().nullish(),
  monitorIdentity: z["boolean"]().nullish()
});

var _NEXERA_CHAIN_NAMES, _NEXERA_CHAIN_VALUES;
var NEXERA_CHAINS = /*#__PURE__*/function (NEXERA_CHAINS) {
  NEXERA_CHAINS["ETHEREUM"] = "1";
  NEXERA_CHAINS["GOERLI"] = "5";
  NEXERA_CHAINS["ARBITRUM"] = "42161";
  NEXERA_CHAINS["ARBITRUM_GOERLI"] = "421613";
  NEXERA_CHAINS["ARBITRUM_SEPOLIA"] = "421614";
  NEXERA_CHAINS["OPTIMISM"] = "10";
  NEXERA_CHAINS["OPTIMISM_GOERLI"] = "420";
  NEXERA_CHAINS["OPTIMISM_SEPOLIA"] = "11155420";
  NEXERA_CHAINS["AVALANCHE"] = "43114";
  NEXERA_CHAINS["AVALANCHE_FUJI"] = "43113";
  NEXERA_CHAINS["POLYGON"] = "137";
  NEXERA_CHAINS["POLYGON_AMOY"] = "80002";
  NEXERA_CHAINS["SEPOLIA"] = "11155111";
  NEXERA_CHAINS["BASE"] = "8453";
  NEXERA_CHAINS["BASE_GOERLI"] = "84531";
  NEXERA_CHAINS["BASE_SEPOLIA"] = "84532";
  NEXERA_CHAINS["MOONBEAM"] = "1284";
  NEXERA_CHAINS["MOONRIVER"] = "1285";
  NEXERA_CHAINS["BNB"] = "56";
  NEXERA_CHAINS["BNB_TESTNET"] = "97";
  return NEXERA_CHAINS;
}({});
var NEXERA_CHAIN_NAMES = (_NEXERA_CHAIN_NAMES = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_NEXERA_CHAIN_NAMES, NEXERA_CHAINS.ETHEREUM, "Ethereum Mainnet"), NEXERA_CHAINS.GOERLI, "Goerli"), NEXERA_CHAINS.SEPOLIA, "Sepolia"), NEXERA_CHAINS.POLYGON, "Polygon"), NEXERA_CHAINS.POLYGON_AMOY, "Polygon Amoy"), NEXERA_CHAINS.AVALANCHE, "Avalanche"), NEXERA_CHAINS.AVALANCHE_FUJI, "Avalanche Fuji"), NEXERA_CHAINS.ARBITRUM, "Arbitrum"), NEXERA_CHAINS.ARBITRUM_SEPOLIA, "Arbitrum Sepolia"), NEXERA_CHAINS.BASE, "Base"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_NEXERA_CHAIN_NAMES, NEXERA_CHAINS.BASE_SEPOLIA, "Base Sepolia"), NEXERA_CHAINS.BNB, "BSC"), NEXERA_CHAINS.BNB_TESTNET, "BSC Testnet"), NEXERA_CHAINS.OPTIMISM, "Optimism"), NEXERA_CHAINS.OPTIMISM_SEPOLIA, "Optimism Sepolia"), NEXERA_CHAINS.MOONBEAM, "Moonbeam"), NEXERA_CHAINS.MOONRIVER, "Moonriver"));
var NEXERA_CHAIN_NAMES_LIST = Object.values(NEXERA_CHAIN_NAMES);
var NEXERA_CHAIN_VALUES = (_NEXERA_CHAIN_VALUES = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_NEXERA_CHAIN_VALUES, NEXERA_CHAINS.ETHEREUM, 1), NEXERA_CHAINS.GOERLI, 5), NEXERA_CHAINS.POLYGON, 137), NEXERA_CHAINS.POLYGON_AMOY, 80002), NEXERA_CHAINS.AVALANCHE, 43114), NEXERA_CHAINS.AVALANCHE_FUJI, 43113), NEXERA_CHAINS.ARBITRUM, 42161), NEXERA_CHAINS.ARBITRUM_GOERLI, 421613), NEXERA_CHAINS.ARBITRUM_SEPOLIA, 421614), NEXERA_CHAINS.SEPOLIA, 11155111), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_NEXERA_CHAIN_VALUES, NEXERA_CHAINS.BASE, 8453), NEXERA_CHAINS.BASE_GOERLI, 84531), NEXERA_CHAINS.BASE_SEPOLIA, 84532), NEXERA_CHAINS.MOONBEAM, 1284), NEXERA_CHAINS.MOONRIVER, 1285), NEXERA_CHAINS.OPTIMISM, 10), NEXERA_CHAINS.OPTIMISM_GOERLI, 69));
var ACTIVE_CHAIN_VALUES = [NEXERA_CHAINS.ETHEREUM, NEXERA_CHAINS.POLYGON, NEXERA_CHAINS.POLYGON_AMOY, NEXERA_CHAINS.AVALANCHE, NEXERA_CHAINS.AVALANCHE_FUJI, NEXERA_CHAINS.ARBITRUM, NEXERA_CHAINS.ARBITRUM_SEPOLIA, NEXERA_CHAINS.SEPOLIA, NEXERA_CHAINS.BASE, NEXERA_CHAINS.BASE_SEPOLIA, NEXERA_CHAINS.MOONBEAM, NEXERA_CHAINS.MOONRIVER, NEXERA_CHAINS.OPTIMISM, NEXERA_CHAINS.OPTIMISM_SEPOLIA];
var ChainId = z.preprocess(function (val) {
  return String(val);
}, z["enum"](ACTIVE_CHAIN_VALUES).describe("a numeric value that identifies the chain of the address. There are many sites that retrieve information on chainIDs such as <a href='https://chainlist.org/'>https://chainlist.org</a>."));
var POLYGON_NETWORK_NAMES = ["main", "amoy"];
var PolygonNetworkNames = z["enum"](POLYGON_NETWORK_NAMES);

var TxAuthInput = z.object({
  chainId: ChainId,
  contractAbi: z.array(z.record(z.unknown())),
  contractAddress: AddressSchema,
  functionName: z.string(),
  args: z.array(z.unknown()),
  userAddress: AddressSchema,
  blockExpiration: z.number()["int"]().optional(),
  nonce: z.number()["int"]().optional()
});
var TxSignatureResponse = z.object({
  signature: EIP155Signature,
  blockExpiration: z.number()
});
var GetTxAuthDataSignatureResponse = z.object({
  payload: z.string().optional().describe("Concatenated signature and block expiration, without 0x prefix"),
  signature: EIP155Signature.optional(),
  blockExpiration: z.number().optional(),
  isAuthorized: z["boolean"](),
  errorMessage: z.any().optional()
});

var SimplifiedCredential = z.object({
  id: z.string(),
  type: z.array(z.string()),
  issuanceDate: z.string(),
  journeyId: z.string()
});
/**
 * GetCredentialsRequest
 */
var GetCredentialsRequest = z.object({
  type: z.literal("getCredentials"),
  data: z.undefined()
});
/**
 * GetCredentialsResponse
 */
var GetCredentialsResponse = z.object({
  type: z.literal("polygonIdCredentials"),
  credentials: z.array(SimplifiedCredential),
  identifier: z.string()
});
/**
 * PolygonIdRequest
 */
var PolygonIdRequestData = z.union([z.object({
  type: z.literal("auth"),
  authRequest: AuthorizationRequestMessage
}), z.object({
  type: z.literal("credentialOffer"),
  credentialOfferRequest: QrCodeLinkWithSchemaType
}), z.object({
  type: z.literal("zkp"),
  zkpRequest: ZeroKnowledgeProofRequest
})]);
var PolygonIdRequest = z.object({
  type: z.literal("polygonIdRequest"),
  data: PolygonIdRequestData
});
/**
 * PolygonIdResponse
 */
var PolygonIdResponseData = z.union([z.object({
  type: z.literal("auth"),
  authResponse: AuthorizationResponseMessage
}), z.object({
  type: z.literal("credentialOffer"),
  credentialOfferResponse: z.array(GenericVerifiableCredentialSchema)
}), z.object({
  type: z.literal("zkp"),
  zkpResponse: ZeroKnowledgeProofResponse
}), z.object({
  type: z.literal("close"),
  screen: z["enum"](["auth", "credentialOffer", "zkp", "getCredentials"]),
  closeResponse: z.string()
})]);
var PolygonIdResponse = z.object({
  type: z.literal("polygonIdResponse"),
  identifier: z.string(),
  data: PolygonIdResponseData
});
/**
 * StartFlowRequest
 */
var StartFlowRequest = z.union([z.object({
  type: z.literal("startVerification"),
  data: z.undefined()
}), z.object({
  type: z.literal("startManagement"),
  data: z.undefined()
}), z.object({
  type: z.literal("startKYB"),
  data: z.undefined()
})]);
/**
 * IsVerifiedRequest
 */
var IsVerifiedRequest = z.object({
  type: z.literal("isVerifiedRequest"),
  data: z.object({
    userAddress: AddressSchema
  }),
  identifier: z.string()
});
/**
 * IsVerifiedResponse
 */
var IsVerifiedResponse = z.object({
  type: z.literal("isVerifiedResponse"),
  isVerified: z["boolean"](),
  identifier: z.string()
});
/**
 * GetTxAuthSigRequest
 */
var GetTxAuthSigRequest = z.object({
  type: z.literal("getTxAuthSigRequest"),
  data: TxAuthInput.omit({
    userAddress: true
  }),
  identifier: z.string()
});
/**
 * GetTxAuthSigResponse
 */
var GetTxAuthSigResponse = z.object({
  type: z.literal("getTxAuthSigResponse"),
  signatureResponse: GetTxAuthDataSignatureResponse,
  identifier: z.string()
});
var HostRequestMessage = z.union([GetCredentialsRequest, PolygonIdRequest, StartFlowRequest, IsVerifiedRequest, GetTxAuthSigRequest]);
var IdentityResponseMessage = z.union([GetCredentialsResponse, PolygonIdResponse, IsVerifiedResponse, GetTxAuthSigResponse]);

var ZKPRequest = z.object({
  id: z.number(),
  circuitId: z["enum"](["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]),
  optional: z["boolean"]().optional(),
  query: QueryConfigSimplified
});
var ZKPRequestFromZKVerifier = z.object({
  id: z.number(),
  circuitId: z.string(),
  optional: z["boolean"]().optional(),
  query: z.record(z.unknown())
});
var OffChainZKP = z.object({
  requestingAuthorizationMessage: z.string().nullish(),
  zkpRequest: z.array(ZKPRequest).nullish()
});
var CreateAuthRequestProps = z.object({
  hostUrl: z.string().url(),
  sessionId: UuidString,
  audience: z.string().describe("DID of the verifier"),
  callbackURL: z.string().describe("URL to which the auth response of the client callback will be sent"),
  query: z.array(QueryConfigSimplified),
  onChainVerification: z["boolean"]().optional(),
  id: z.string().uuid(),
  thid: z.string().uuid(),
  message: z.string().describe("Message shown to the user")
});
var CreateZKProofRequestProps = z.object({
  requestId: z.number(),
  query: QueryConfigSimplified,
  onChainVerification: z["boolean"]().optional()
});
var AllScenarioExecutionAuthorizationData = z.object({
  executionId: UuidString,
  projectId: z.string(),
  scenarioExecutionIds: z.array(UuidString)
});
var ProjectAuthorizationData = z.object({
  sessionId: z.string(),
  projectId: z.string(),
  address: z.string(),
  authorizations: z.map(z.string(), ScenarioAuthorizationData)
});
var OnChainZKP = z.object({
  scenarioVerifierAddress: AddressSchema,
  zkpRequests: z.array(ZKPRequest)
});
var OnChainZKPFromNexeraID = z.object({
  scenarioVerifierAddress: AddressSchema,
  zkpRequests: z.array(ZKPRequestFromZKVerifier)
});
var OnChainZKPScenarioFromCms = z.object({
  scenarioVerifierAddress: AddressSchema,
  zkpRequests: z.array(QueryConfigSimplified)
});
var OnChainZKPPayload = z.object({
  requestId: z.bigint(),
  inputs: z.array(z.bigint()),
  a: z.tuple([z.bigint(), z.bigint()]),
  b: z.tuple([z.tuple([z.bigint(), z.bigint()]), z.tuple([z.bigint(), z.bigint()])]),
  c: z.tuple([z.bigint(), z.bigint()])
});
var SCENARIO_AUTHORIZATION_STATUSES = ["pending", "authorised", "unauthorised"];
var ScenarioAuthorizationStatus = z["enum"](SCENARIO_AUTHORIZATION_STATUSES);

var HostMessage = z.union([HostRequestMessage, HostResponseMessage]);
var IdentityMessage = z.union([IdentityNotificationMessage, IdentityRequestMessage, IdentityResponseMessage]);
var RequiredDataRowSchema = z.object({
  type: CredentialType,
  requiredAttributes: z.array(z.object({
    attribute: z.string(),
    value: z.string(),
    operator: z.string()
  }))
});
var RequiredVerificationData = z.object({
  ruleEngine: z.object({
    requiredData: z.array(RequiredDataRowSchema)
  }),
  onchainZKP: z.object({
    requiredData: z.array(RequiredDataRowSchema),
    conditions: z.array(ZKPRequest)
  }),
  offchainZKP: z.object({
    requiredData: z.array(RequiredDataRowSchema),
    verifications: z.array(z.object({
      scenarioVerifierAddress: z.string(),
      conditions: z.array(ZKPRequest)
    }))
  })
});

export { RuleEngineScenarioExecutionData as $, ACTIVE_CHAIN_VALUES as A, BlockchainAddress as B, CredentialTypes as C, coerceBoolean as D, EIP155Signature as E, FunctionCallData as F, ENVS as G, EnvironmentSchema as H, shortBlockchainAddress as I, ISO3CountryCode as J, ALPHA_2_COUNTRIES as K, Alpha2Country as L, countryISO3toISO2Mapping as M, NEXERA_CHAINS as N, countryISO2toISO3Mapping as O, POLYGON_NETWORK_NAMES as P, isoCountriesNameFromISO2 as Q, parseISO3CountryCode as R, StarknetAddress as S, TxHash as T, UuidString as U, ScenarioAuthorizationData as V, SdkVerificationResponseSchema as W, CloseScreenNotification as X, KycCompletionData as Y, ZodParse as Z, KycCompletionNotification as _, NEXERA_CHAIN_NAMES as a, MediaTypePID as a$, OffChainScenarioExecutionData as a0, OnChainScenarioExecutionData as a1, ScenarioExecutionData as a2, ScenarioExecutionNotification as a3, IsVerifiedNotification as a4, PolygonIdInitialized as a5, OcvSdkInitialized as a6, StartCompletedNotification as a7, IdentityNotificationMessage as a8, InitialDataRequest as a9, ScenarioStatuses as aA, ScenarioStatus as aB, RuleEngineResponse as aC, ScenarioExecutionResponse as aD, RuleResultStatuses as aE, RuleResultStatus as aF, RuleResultStatusLabels as aG, ComplianceImplementationStepsInput as aH, SimplifiedCredential as aI, GetCredentialsRequest as aJ, GetCredentialsResponse as aK, PolygonIdRequestData as aL, PolygonIdRequest as aM, PolygonIdResponseData as aN, PolygonIdResponse as aO, StartFlowRequest as aP, IsVerifiedRequest as aQ, IsVerifiedResponse as aR, GetTxAuthSigRequest as aS, GetTxAuthSigResponse as aT, HostRequestMessage as aU, IdentityResponseMessage as aV, HostMessage as aW, IdentityMessage as aX, RequiredDataRowSchema as aY, RequiredVerificationData as aZ, MediaType as a_, SignatureRequest as aa, TransactionData as ab, SendTransactionRequest as ac, IdentityRequestMessage as ad, AVAILABLE_FLOWS as ae, AvailableFlow as af, DataAvailableOnStart as ag, InitialDataResponse as ah, SignatureResponse as ai, TransactionResponse as aj, HostResponseMessage as ak, ChallengeQueryOperators as al, ChallengeQueryOperator as am, OperatorToChallengeQueryOperator as an, ChallengeQueryOperatorToOperator as ao, ChallengeQuerySchema as ap, ExecuteChallengeQueryInput as aq, ExecuteChallengeQueryConfig as ar, OpaChallengeQueryResponse as as, ExecuteChallengeQueryResponse as at, OPAChallengeQuery as au, OnChainRuleResult as av, OffChainZKPRuleResult as aw, SdkVerificationOutput as ax, ScenarioTypes as ay, ScenarioType as az, NEXERA_CHAIN_NAMES_LIST as b, OLD_IDImageCredentialSubjectSchema as b$, ZeroKnowledgeProofRequest as b0, AuthorizationRequestMessage as b1, ProofData as b2, ZeroKnowledgeProofResponse as b3, AuthorizationResponseMessage as b4, CredentialQrCodeData as b5, AuthQrCodeData as b6, QrCodeLinkWithSchemaType as b7, parseIden3Message as b8, parseSessionIdFromUrl as b9, UpdateQueryConfigurationInput as bA, UpdateQueryConfigurationResponse as bB, DeleteQueryConfigurationInput as bC, DeleteQueryConfigurationResponse as bD, QueryCredentialTypes as bE, QueryCredentialType as bF, TxAuthInput as bG, TxSignatureResponse as bH, GetTxAuthDataSignatureResponse as bI, ZKPRequest as bJ, ZKPRequestFromZKVerifier as bK, OffChainZKP as bL, CreateAuthRequestProps as bM, CreateZKProofRequestProps as bN, AllScenarioExecutionAuthorizationData as bO, ProjectAuthorizationData as bP, OnChainZKP as bQ, OnChainZKPFromNexeraID as bR, OnChainZKPScenarioFromCms as bS, OnChainZKPPayload as bT, SCENARIO_AUTHORIZATION_STATUSES as bU, ScenarioAuthorizationStatus as bV, _toConsumableArray as bW, ID3CredentialSubjectSchema as bX, IDScanCredentialSubjectSchema as bY, IDScanPassportCredentialSubjectSchema as bZ, IDScanSelfieCredentialSubjectSchema as b_, AllCredentialAttributes as ba, AllCredentialValues as bb, Operator as bc, ZKPOperator as bd, operatorDisplayMap as be, ARRAY_OPERATORS as bf, ArrayOperator as bg, STRING_OPERATORS as bh, StringOperator as bi, NUMERIC_OPERATORS as bj, NumericOperator as bk, BOOLEAN_OPERATORS as bl, BooleanOperator as bm, DATE_OPERATORS as bn, DateOperator as bo, SUPPORTED_TYPES as bp, SupportedType as bq, SupportedTypes as br, IDInformation as bs, QueryConfig as bt, QueryConfigSimplified as bu, PartialQueryConfigSimplified as bv, QueryConfigSimplifiedParsed as bw, QueryConfiguration as bx, CreateQueryConfigurationInput as by, CreateQueryConfigurationResponse as bz, NEXERA_CHAIN_VALUES as c, OLD_IDInformationCredentialSubjectSchema as c0, OLD_ProofOfResidenceCredentialSubjectSchema as c1, OLD_SelfieImageCredentialSubjectSchema as c2, OLD_AMLScreeningsResultsCredentialSubjectSchema as c3, IDInformationCredentialSubjectSchema as c4, IDImageCredentialSubjectSchema as c5, SelfieImageCredentialSubjectSchema as c6, ProofOfResidenceCredentialSubjectSchema as c7, GenericVerifiableCredentialSchema as c8, CredentialSchemas as c9, CredentialNames as ca, NexeraCredentialType as cb, getCredentialName as cc, CredentialType as cd, VerifiableCredential as ce, CredentialMediaType as cf, ChainId as d, PolygonNetworkNames as e, PrivateKey as f, AddressSchema as g, AptosAddress as h, isValidAddress as i, AptosSignature as j, StarknetSignature as k, PolkadotAddress as l, PolkadotSignature as m, CosmosAddress as n, CosmosSignature as o, TezosAddress as p, EdSignature as q, SpSignature as r, shortAddress as s, P2Signature as t, TezosSignature as u, CardanoAddress as v, CardanoSignature as w, BlockchainSignature as x, BLOCKCHAIN_NAMESPACES as y, BlockchainNamespace as z };
