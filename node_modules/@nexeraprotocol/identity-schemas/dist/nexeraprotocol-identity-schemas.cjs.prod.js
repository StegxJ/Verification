'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var zod = require('zod');
var kyc_schema = require('./kyc.schema-a594ef57.cjs.prod.js');

var decodeUint8Array = function decodeUint8Array(data) {
  var salt = data;
  return new Uint8Array(Object.keys(salt).map(function (key) {
    return salt[key];
  }));
};
var EncryptedKycKey = zod.z.object({
  address: zod.z.string(),
  encryptedPrivateKey: zod.z.string(),
  signingMessage: zod.z.string(),
  // Why use unknown here if it's going to be used as EncodedUint8Array in the decodeUint8Array func?
  salt: zod.z.preprocess(decodeUint8Array, zod.z.unknown()),
  iv: zod.z.preprocess(decodeUint8Array, zod.z.unknown()),
  did: zod.z.string().optional()
});
var EncryptedVerifiableCredentialDataSchema = zod.z.object({
  iv: zod.z.preprocess(decodeUint8Array, zod.z.unknown()),
  ephemPublicKey: zod.z.preprocess(decodeUint8Array, zod.z.unknown()),
  ciphertext: zod.z.preprocess(decodeUint8Array, zod.z.unknown()),
  mac: zod.z.preprocess(decodeUint8Array, zod.z.unknown())
});
var EncryptedVerifiableCredentialSchema = zod.z.object({
  id: zod.z.number().optional(),
  did: zod.z.string(),
  journeyId: zod.z.string().optional(),
  type: zod.z["enum"](kyc_schema.CredentialTypes),
  datetime: zod.z.coerce.date(),
  credential: EncryptedVerifiableCredentialDataSchema,
  identifier: zod.z.string().optional()
});
var DownloadableKycSchema = zod.z.object({
  vcs: zod.z.array(zod.z.any()),
  key: EncryptedKycKey
});

exports.ACTIVE_CHAIN_VALUES = kyc_schema.ACTIVE_CHAIN_VALUES;
exports.ALPHA_2_COUNTRIES = kyc_schema.ALPHA_2_COUNTRIES;
exports.AddressSchema = kyc_schema.AddressSchema;
exports.Alpha2Country = kyc_schema.Alpha2Country;
exports.AptosAddress = kyc_schema.AptosAddress;
exports.AptosSignature = kyc_schema.AptosSignature;
exports.BLOCKCHAIN_NAMESPACES = kyc_schema.BLOCKCHAIN_NAMESPACES;
exports.BlockchainAddress = kyc_schema.BlockchainAddress;
exports.BlockchainNamespace = kyc_schema.BlockchainNamespace;
exports.BlockchainSignature = kyc_schema.BlockchainSignature;
exports.CardanoAddress = kyc_schema.CardanoAddress;
exports.CardanoSignature = kyc_schema.CardanoSignature;
exports.ChainId = kyc_schema.ChainId;
exports.CosmosAddress = kyc_schema.CosmosAddress;
exports.CosmosSignature = kyc_schema.CosmosSignature;
exports.EIP155Signature = kyc_schema.EIP155Signature;
exports.ENVS = kyc_schema.ENVS;
exports.EdSignature = kyc_schema.EdSignature;
exports.EnvironmentSchema = kyc_schema.EnvironmentSchema;
exports.FunctionCallData = kyc_schema.FunctionCallData;
exports.ISO3CountryCode = kyc_schema.ISO3CountryCode;
exports.NEXERA_CHAINS = kyc_schema.NEXERA_CHAINS;
exports.NEXERA_CHAIN_NAMES = kyc_schema.NEXERA_CHAIN_NAMES;
exports.NEXERA_CHAIN_NAMES_LIST = kyc_schema.NEXERA_CHAIN_NAMES_LIST;
exports.NEXERA_CHAIN_VALUES = kyc_schema.NEXERA_CHAIN_VALUES;
exports.P2Signature = kyc_schema.P2Signature;
exports.POLYGON_NETWORK_NAMES = kyc_schema.POLYGON_NETWORK_NAMES;
exports.PolkadotAddress = kyc_schema.PolkadotAddress;
exports.PolkadotSignature = kyc_schema.PolkadotSignature;
exports.PolygonNetworkNames = kyc_schema.PolygonNetworkNames;
exports.PrivateKey = kyc_schema.PrivateKey;
exports.SpSignature = kyc_schema.SpSignature;
exports.StarknetAddress = kyc_schema.StarknetAddress;
exports.StarknetSignature = kyc_schema.StarknetSignature;
exports.TezosAddress = kyc_schema.TezosAddress;
exports.TezosSignature = kyc_schema.TezosSignature;
exports.TxHash = kyc_schema.TxHash;
exports.UuidString = kyc_schema.UuidString;
exports.ZodParse = kyc_schema.ZodParse;
exports.coerceBoolean = kyc_schema.coerceBoolean;
exports.countryISO2toISO3Mapping = kyc_schema.countryISO2toISO3Mapping;
exports.countryISO3toISO2Mapping = kyc_schema.countryISO3toISO2Mapping;
exports.isValidAddress = kyc_schema.isValidAddress;
exports.isoCountriesNameFromISO2 = kyc_schema.isoCountriesNameFromISO2;
exports.parseISO3CountryCode = kyc_schema.parseISO3CountryCode;
exports.shortAddress = kyc_schema.shortAddress;
exports.shortBlockchainAddress = kyc_schema.shortBlockchainAddress;
exports.DownloadableKycSchema = DownloadableKycSchema;
exports.EncryptedKycKey = EncryptedKycKey;
exports.EncryptedVerifiableCredentialDataSchema = EncryptedVerifiableCredentialDataSchema;
exports.EncryptedVerifiableCredentialSchema = EncryptedVerifiableCredentialSchema;
