import { z } from "zod";
export declare enum MediaType {
    ZKPMessage = "application/iden3-zkp-json",
    PlainMessage = "application/iden3comm-plain-json",
    SignedMessage = "application/iden3comm-signed-json"
}
export declare const MediaTypePID: z.ZodNativeEnum<typeof MediaType>;
export type MediaTypePID = z.infer<typeof MediaTypePID>;
export declare const ZeroKnowledgeProofRequest: z.ZodObject<{
    id: z.ZodNumber;
    circuitId: z.ZodString;
    optional: z.ZodOptional<z.ZodBoolean>;
    query: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    id: number;
    circuitId: string;
    query: Record<string, any>;
    optional?: boolean | undefined;
}, {
    id: number;
    circuitId: string;
    query: Record<string, any>;
    optional?: boolean | undefined;
}>;
export type ZeroKnowledgeProofRequest = z.infer<typeof ZeroKnowledgeProofRequest>;
export declare const AuthorizationRequestMessage: z.ZodObject<{
    id: z.ZodString;
    typ: z.ZodNativeEnum<typeof MediaType>;
    type: z.ZodString;
    thid: z.ZodOptional<z.ZodString>;
    body: z.ZodObject<{
        callbackUrl: z.ZodString;
        reason: z.ZodOptional<z.ZodString>;
        did_doc: z.ZodOptional<z.ZodAny>;
        message: z.ZodOptional<z.ZodString>;
        scope: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            optional: z.ZodOptional<z.ZodBoolean>;
            query: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        callbackUrl: string;
        scope: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }[];
        message?: string | undefined;
        reason?: string | undefined;
        did_doc?: any;
    }, {
        callbackUrl: string;
        scope: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }[];
        message?: string | undefined;
        reason?: string | undefined;
        did_doc?: any;
    }>;
    from: z.ZodString;
    to: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    typ: MediaType;
    body: {
        callbackUrl: string;
        scope: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }[];
        message?: string | undefined;
        reason?: string | undefined;
        did_doc?: any;
    };
    from: string;
    thid?: string | undefined;
    to?: string | undefined;
}, {
    id: string;
    type: string;
    typ: MediaType;
    body: {
        callbackUrl: string;
        scope: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }[];
        message?: string | undefined;
        reason?: string | undefined;
        did_doc?: any;
    };
    from: string;
    thid?: string | undefined;
    to?: string | undefined;
}>;
export type AuthorizationRequestMessage = z.infer<typeof AuthorizationRequestMessage>;
export declare const ProofData: z.ZodObject<{
    pi_a: z.ZodArray<z.ZodString, "many">;
    pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
    pi_c: z.ZodArray<z.ZodString, "many">;
    protocol: z.ZodString;
    curve: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    pi_a: string[];
    pi_b: string[][];
    pi_c: string[];
    protocol: string;
    curve?: string | undefined;
}, {
    pi_a: string[];
    pi_b: string[][];
    pi_c: string[];
    protocol: string;
    curve?: string | undefined;
}>;
export declare const ZeroKnowledgeProofResponse: z.ZodObject<{
    id: z.ZodNumber;
    circuitId: z.ZodString;
    vp: z.ZodOptional<z.ZodAny>;
    proof: z.ZodObject<{
        pi_a: z.ZodArray<z.ZodString, "many">;
        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
        pi_c: z.ZodArray<z.ZodString, "many">;
        protocol: z.ZodString;
        curve: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        pi_a: string[];
        pi_b: string[][];
        pi_c: string[];
        protocol: string;
        curve?: string | undefined;
    }, {
        pi_a: string[];
        pi_b: string[][];
        pi_c: string[];
        protocol: string;
        curve?: string | undefined;
    }>;
    pub_signals: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    id: number;
    proof: {
        pi_a: string[];
        pi_b: string[][];
        pi_c: string[];
        protocol: string;
        curve?: string | undefined;
    };
    circuitId: string;
    pub_signals: string[];
    vp?: any;
}, {
    id: number;
    proof: {
        pi_a: string[];
        pi_b: string[][];
        pi_c: string[];
        protocol: string;
        curve?: string | undefined;
    };
    circuitId: string;
    pub_signals: string[];
    vp?: any;
}>;
export type ZeroKnowledgeProofResponse = z.infer<typeof ZeroKnowledgeProofResponse>;
export declare const AuthorizationResponseMessage: z.ZodObject<{
    id: z.ZodString;
    typ: z.ZodOptional<z.ZodNativeEnum<typeof MediaType>>;
    type: z.ZodString;
    thid: z.ZodOptional<z.ZodString>;
    body: z.ZodObject<{
        did_doc: z.ZodOptional<z.ZodAny>;
        message: z.ZodOptional<z.ZodString>;
        scope: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            vp: z.ZodOptional<z.ZodAny>;
            proof: z.ZodObject<{
                pi_a: z.ZodArray<z.ZodString, "many">;
                pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                pi_c: z.ZodArray<z.ZodString, "many">;
                protocol: z.ZodString;
                curve: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }>;
            pub_signals: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        scope: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }[];
        message?: string | undefined;
        did_doc?: any;
    }, {
        scope: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }[];
        message?: string | undefined;
        did_doc?: any;
    }>;
    from: z.ZodOptional<z.ZodString>;
    to: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    body: {
        scope: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }[];
        message?: string | undefined;
        did_doc?: any;
    };
    typ?: MediaType | undefined;
    thid?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
}, {
    id: string;
    type: string;
    body: {
        scope: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }[];
        message?: string | undefined;
        did_doc?: any;
    };
    typ?: MediaType | undefined;
    thid?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
}>;
export type AuthorizationResponseMessage = z.infer<typeof AuthorizationResponseMessage>;
export declare const CredentialQrCodeData: z.ZodObject<{
    id: z.ZodString;
    typ: z.ZodString;
    type: z.ZodString;
    thid: z.ZodString;
    body: z.ZodObject<{
        url: z.ZodString;
        credentials: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        url: string;
        credentials?: unknown;
    }, {
        url: string;
        credentials?: unknown;
    }>;
    from: z.ZodString;
    to: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    typ: string;
    thid: string;
    body: {
        url: string;
        credentials?: unknown;
    };
    from: string;
    to: string;
}, {
    id: string;
    type: string;
    typ: string;
    thid: string;
    body: {
        url: string;
        credentials?: unknown;
    };
    from: string;
    to: string;
}>;
export type CredentialQrCodeData = z.infer<typeof CredentialQrCodeData>;
export declare const AuthQrCodeData: z.ZodObject<{
    id: z.ZodString;
    typ: z.ZodString;
    type: z.ZodString;
    thid: z.ZodString;
    body: z.ZodObject<{
        callbackUrl: z.ZodString;
        reason: z.ZodString;
        scope: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        callbackUrl: string;
        reason: string;
        scope?: unknown;
    }, {
        callbackUrl: string;
        reason: string;
        scope?: unknown;
    }>;
    from: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    typ: string;
    thid: string;
    body: {
        callbackUrl: string;
        reason: string;
        scope?: unknown;
    };
    from: string;
}, {
    id: string;
    type: string;
    typ: string;
    thid: string;
    body: {
        callbackUrl: string;
        reason: string;
        scope?: unknown;
    };
    from: string;
}>;
export type AuthQrCodeData = z.infer<typeof AuthQrCodeData>;
export declare const QrCodeLinkWithSchemaType: z.ZodObject<{
    qrCodeLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    schemaType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    qrCodeLink?: string | null | undefined;
    schemaType?: string | null | undefined;
}, {
    qrCodeLink?: string | null | undefined;
    schemaType?: string | null | undefined;
}>;
export type QrCodeLinkWithSchemaType = z.infer<typeof QrCodeLinkWithSchemaType>;
export declare function parseIden3Message(input: string): string;
export declare function parseSessionIdFromUrl(urlString: string): string;
//# sourceMappingURL=polygon-id.schema.d.ts.map