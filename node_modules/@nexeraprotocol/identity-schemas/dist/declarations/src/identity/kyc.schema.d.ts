import { z } from "zod";
import type { EncryptedVerifiableCredentialDataSchema } from "../credential-storage.schema.js";
export declare const HostMessage: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"getCredentials">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "getCredentials";
    data?: undefined;
}, {
    type: "getCredentials";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdRequest">;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authRequest: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferRequest: z.ZodObject<{
            qrCodeLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schemaType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpRequest: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            optional: z.ZodOptional<z.ZodBoolean>;
            query: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"startVerification">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startVerification";
    data?: undefined;
}, {
    type: "startVerification";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startManagement">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startManagement";
    data?: undefined;
}, {
    type: "startManagement";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startKYB">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startKYB";
    data?: undefined;
}, {
    type: "startKYB";
    data?: undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedRequest">;
    data: z.ZodObject<{
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        userAddress: `0x${string}`;
    }, {
        userAddress: string;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedRequest";
    data: {
        userAddress: `0x${string}`;
    };
    identifier: string;
}, {
    type: "isVerifiedRequest";
    data: {
        userAddress: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigRequest">;
    data: z.ZodObject<Omit<{
        chainId: z.ZodEffects<z.ZodEnum<[import("../index.js").NEXERA_CHAINS.ETHEREUM, import("../index.js").NEXERA_CHAINS.POLYGON, import("../index.js").NEXERA_CHAINS.POLYGON_AMOY, import("../index.js").NEXERA_CHAINS.AVALANCHE, import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI, import("../index.js").NEXERA_CHAINS.ARBITRUM, import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA, import("../index.js").NEXERA_CHAINS.SEPOLIA, import("../index.js").NEXERA_CHAINS.BASE, import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA, import("../index.js").NEXERA_CHAINS.MOONBEAM, import("../index.js").NEXERA_CHAINS.MOONRIVER, import("../index.js").NEXERA_CHAINS.OPTIMISM, import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA]>, import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER, unknown>;
        contractAbi: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
        contractAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        functionName: z.ZodString;
        args: z.ZodArray<z.ZodUnknown, "many">;
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
    }, "userAddress">, "strip", z.ZodTypeAny, {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }, {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigRequest";
    data: {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}, {
    type: "getTxAuthSigRequest";
    data: {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"onStartKyc">;
    data: z.ZodObject<{
        identifier: z.ZodOptional<z.ZodString>;
        flow: z.ZodOptional<z.ZodEnum<["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"]>>;
        accessToken: z.ZodString;
        signingMessage: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"signature">;
    data: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodUnion<[z.ZodEffects<z.ZodString, `edsig${string}`, string>, z.ZodEffects<z.ZodString, `spsig${string}`, string>, z.ZodEffects<z.ZodString, `p2sig${string}`, string>]>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
}, "strip", z.ZodTypeAny, {
    type: "signature";
    data: string;
}, {
    type: "signature";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"transactionResponse">;
    data: z.ZodObject<{
        txHash: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        txHash: `0x${string}`;
    }, {
        txHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "transactionResponse";
    data: {
        txHash: `0x${string}`;
    };
}, {
    type: "transactionResponse";
    data: {
        txHash: string;
    };
}>]>]>;
export type HostMessage = z.infer<typeof HostMessage>;
export declare const IdentityMessage: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"closeScreen">;
    identifier: z.ZodString;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdInitialized">;
    identifier: z.ZodString;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"ocvSdkInitialized">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "ocvSdkInitialized";
    identifier: string;
}, {
    type: "ocvSdkInitialized";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startCompletedNotification">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "startCompletedNotification";
    identifier: string;
}, {
    type: "startCompletedNotification";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"kycCompletion">;
    identifier: z.ZodString;
    data: z.ZodArray<z.ZodObject<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodAny, z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">, z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "kycCompletion";
    data: z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}, {
    type: "kycCompletion";
    data: z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"scenarioExecution">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"RuleEngineScenarioExecution">;
        data: z.ZodObject<{
            customerId: z.ZodString;
            scenarioExecutionId: z.ZodString;
            status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
            results: z.ZodArray<z.ZodArray<z.ZodObject<{
                objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
                objectId: z.ZodString;
                name: z.ZodString;
                address: z.ZodString;
                result: z.ZodObject<{
                    result: z.ZodObject<{
                        is_valid: z.ZodBoolean;
                        reasons: z.ZodArray<z.ZodUnknown, "many">;
                    }, "strip", z.ZodTypeAny, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }>;
                    executionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }>;
                executionId: z.ZodString;
                scenarioId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }>, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OffChainScenarioExecution">;
        data: z.ZodArray<z.ZodObject<{
            executionId: z.ZodString;
            sessionId: z.ZodString;
            projectId: z.ZodString;
            address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
            status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
            scenarioId: z.ZodString;
            scenarioName: z.ZodString;
            requestMessage: z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    callbackUrl: z.ZodString;
                    reason: z.ZodOptional<z.ZodString>;
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        optional: z.ZodOptional<z.ZodBoolean>;
                        query: z.ZodRecord<z.ZodString, z.ZodAny>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodString;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }>;
            responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        vp: z.ZodOptional<z.ZodAny>;
                        proof: z.ZodObject<{
                            pi_a: z.ZodArray<z.ZodString, "many">;
                            pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                            pi_c: z.ZodArray<z.ZodString, "many">;
                            protocol: z.ZodString;
                            curve: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }>;
                        pub_signals: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodOptional<z.ZodString>;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }>>>;
            verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            query: z.ZodObject<{
                type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
                requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                attribute: z.ZodString;
                value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
                operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
            }, "strip", z.ZodTypeAny, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OnChainScenarioExecution">;
        data: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "OnChainScenarioExecution";
        data?: any;
    }, {
        type: "OnChainScenarioExecution";
        data?: any;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedNotification">;
    identifier: z.ZodString;
    isVerified: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"initialDataRequest">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "initialDataRequest";
    identifier: string;
}, {
    type: "initialDataRequest";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"signatureRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"sendTransactionRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        accountAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        to: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        data: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        value: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    }, {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "sendTransactionRequest";
    data: {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    };
    identifier: string;
}, {
    type: "sendTransactionRequest";
    data: {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    };
    identifier: string;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"polygonIdCredentials">;
    credentials: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodArray<z.ZodString, "many">;
        issuanceDate: z.ZodString;
        journeyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }>, "many">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdResponse">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authResponse: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferResponse: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            type: z.ZodArray<z.ZodString, "many">;
            expirationDate: z.ZodOptional<z.ZodString>;
            issuanceDate: z.ZodOptional<z.ZodString>;
            credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
            credentialStatus: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
                revocationNonce: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }>;
            issuer: z.ZodString;
            credentialSchema: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
            }, {
                id: string;
                type: string;
            }>;
            proof: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpResponse: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            vp: z.ZodOptional<z.ZodAny>;
            proof: z.ZodObject<{
                pi_a: z.ZodArray<z.ZodString, "many">;
                pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                pi_c: z.ZodArray<z.ZodString, "many">;
                protocol: z.ZodString;
                curve: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }>;
            pub_signals: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"close">;
        screen: z.ZodEnum<["auth", "credentialOffer", "zkp", "getCredentials"]>;
        closeResponse: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedResponse">;
    isVerified: z.ZodBoolean;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}>, z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigResponse">;
    signatureResponse: z.ZodObject<{
        payload: z.ZodOptional<z.ZodString>;
        signature: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        isAuthorized: z.ZodBoolean;
        errorMessage: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }, {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}>]>]>;
export type IdentityMessage = z.infer<typeof IdentityMessage>;
export declare const RequiredDataRowSchema: z.ZodObject<{
    type: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>;
    requiredAttributes: z.ZodArray<z.ZodObject<{
        attribute: z.ZodString;
        value: z.ZodString;
        operator: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        attribute: string;
        operator: string;
    }, {
        value: string;
        attribute: string;
        operator: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
    requiredAttributes: {
        value: string;
        attribute: string;
        operator: string;
    }[];
}, {
    type: string;
    requiredAttributes: {
        value: string;
        attribute: string;
        operator: string;
    }[];
}>;
export declare const RequiredVerificationData: z.ZodObject<{
    ruleEngine: z.ZodObject<{
        requiredData: z.ZodArray<z.ZodObject<{
            type: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>;
            requiredAttributes: z.ZodArray<z.ZodObject<{
                attribute: z.ZodString;
                value: z.ZodString;
                operator: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                attribute: string;
                operator: string;
            }, {
                value: string;
                attribute: string;
                operator: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }, {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
    }, {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
    }>;
    onchainZKP: z.ZodObject<{
        requiredData: z.ZodArray<z.ZodObject<{
            type: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>;
            requiredAttributes: z.ZodArray<z.ZodObject<{
                attribute: z.ZodString;
                value: z.ZodString;
                operator: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                attribute: string;
                operator: string;
            }, {
                value: string;
                attribute: string;
                operator: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }, {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }>, "many">;
        conditions: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodEnum<["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]>;
            optional: z.ZodOptional<z.ZodBoolean>;
            query: z.ZodObject<{
                type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
                requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                attribute: z.ZodString;
                value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
                operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
            }, "strip", z.ZodTypeAny, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }, {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        conditions: {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }[];
    }, {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        conditions: {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }[];
    }>;
    offchainZKP: z.ZodObject<{
        requiredData: z.ZodArray<z.ZodObject<{
            type: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>;
            requiredAttributes: z.ZodArray<z.ZodObject<{
                attribute: z.ZodString;
                value: z.ZodString;
                operator: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                attribute: string;
                operator: string;
            }, {
                value: string;
                attribute: string;
                operator: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }, {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }>, "many">;
        verifications: z.ZodArray<z.ZodObject<{
            scenarioVerifierAddress: z.ZodString;
            conditions: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                circuitId: z.ZodEnum<["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]>;
                optional: z.ZodOptional<z.ZodBoolean>;
                query: z.ZodObject<{
                    type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
                    requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    attribute: z.ZodString;
                    value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
                    operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
                }, "strip", z.ZodTypeAny, {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                }, {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }, {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }, {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        verifications: {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }[];
    }, {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        verifications: {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    ruleEngine: {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
    };
    onchainZKP: {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        conditions: {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }[];
    };
    offchainZKP: {
        requiredData: {
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        verifications: {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }[];
    };
}, {
    ruleEngine: {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
    };
    onchainZKP: {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        conditions: {
            id: number;
            circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            optional?: boolean | undefined;
        }[];
    };
    offchainZKP: {
        requiredData: {
            type: string;
            requiredAttributes: {
                value: string;
                attribute: string;
                operator: string;
            }[];
        }[];
        verifications: {
            scenarioVerifierAddress: string;
            conditions: {
                id: number;
                circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
                query: {
                    value: string | number | boolean | (string | number)[];
                    type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                    attribute: string;
                    operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                    requestId?: number | null | undefined;
                };
                optional?: boolean | undefined;
            }[];
        }[];
    };
}>;
export type RequiredVerificationData = z.infer<typeof RequiredVerificationData>;
export type RequiredDataRow = z.infer<typeof RequiredDataRowSchema>;
export type EncryptedVerifiableCredentialData = z.infer<typeof EncryptedVerifiableCredentialDataSchema>;
//# sourceMappingURL=kyc.schema.d.ts.map