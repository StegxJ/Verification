import { z } from "zod";
export declare const SimplifiedCredential: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodArray<z.ZodString, "many">;
    issuanceDate: z.ZodString;
    journeyId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    journeyId: string;
    type: string[];
    issuanceDate: string;
}, {
    id: string;
    journeyId: string;
    type: string[];
    issuanceDate: string;
}>;
export type SimplifiedCredential = z.infer<typeof SimplifiedCredential>;
/**
 * GetCredentialsRequest
 */
export declare const GetCredentialsRequest: z.ZodObject<{
    type: z.ZodLiteral<"getCredentials">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "getCredentials";
    data?: undefined;
}, {
    type: "getCredentials";
    data?: undefined;
}>;
export type GetCredentialsRequest = z.infer<typeof GetCredentialsRequest>;
/**
 * GetCredentialsResponse
 */
export declare const GetCredentialsResponse: z.ZodObject<{
    type: z.ZodLiteral<"polygonIdCredentials">;
    credentials: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodArray<z.ZodString, "many">;
        issuanceDate: z.ZodString;
        journeyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }>, "many">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}>;
export type GetCredentialsResponse = z.infer<typeof GetCredentialsResponse>;
/**
 * PolygonIdRequest
 */
export declare const PolygonIdRequestData: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"auth">;
    authRequest: z.ZodObject<{
        id: z.ZodString;
        typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
        type: z.ZodString;
        thid: z.ZodOptional<z.ZodString>;
        body: z.ZodObject<{
            callbackUrl: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            did_doc: z.ZodOptional<z.ZodAny>;
            message: z.ZodOptional<z.ZodString>;
            scope: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                circuitId: z.ZodString;
                optional: z.ZodOptional<z.ZodBoolean>;
                query: z.ZodRecord<z.ZodString, z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }, {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        }, {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        }>;
        from: z.ZodString;
        to: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    }, {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "auth";
    authRequest: {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    };
}, {
    type: "auth";
    authRequest: {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"credentialOffer">;
    credentialOfferRequest: z.ZodObject<{
        qrCodeLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        schemaType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        qrCodeLink?: string | null | undefined;
        schemaType?: string | null | undefined;
    }, {
        qrCodeLink?: string | null | undefined;
        schemaType?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "credentialOffer";
    credentialOfferRequest: {
        qrCodeLink?: string | null | undefined;
        schemaType?: string | null | undefined;
    };
}, {
    type: "credentialOffer";
    credentialOfferRequest: {
        qrCodeLink?: string | null | undefined;
        schemaType?: string | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"zkp">;
    zkpRequest: z.ZodObject<{
        id: z.ZodNumber;
        circuitId: z.ZodString;
        optional: z.ZodOptional<z.ZodBoolean>;
        query: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        circuitId: string;
        query: Record<string, any>;
        optional?: boolean | undefined;
    }, {
        id: number;
        circuitId: string;
        query: Record<string, any>;
        optional?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "zkp";
    zkpRequest: {
        id: number;
        circuitId: string;
        query: Record<string, any>;
        optional?: boolean | undefined;
    };
}, {
    type: "zkp";
    zkpRequest: {
        id: number;
        circuitId: string;
        query: Record<string, any>;
        optional?: boolean | undefined;
    };
}>]>;
export type PolygonIdRequestData = z.infer<typeof PolygonIdRequestData>;
export declare const PolygonIdRequest: z.ZodObject<{
    type: z.ZodLiteral<"polygonIdRequest">;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authRequest: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferRequest: z.ZodObject<{
            qrCodeLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schemaType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpRequest: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            optional: z.ZodOptional<z.ZodBoolean>;
            query: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}>;
export type PolygonIdRequest = z.infer<typeof PolygonIdRequest>;
/**
 * PolygonIdResponse
 */
export declare const PolygonIdResponseData: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"auth">;
    authResponse: z.ZodObject<{
        id: z.ZodString;
        typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
        type: z.ZodString;
        thid: z.ZodOptional<z.ZodString>;
        body: z.ZodObject<{
            did_doc: z.ZodOptional<z.ZodAny>;
            message: z.ZodOptional<z.ZodString>;
            scope: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                circuitId: z.ZodString;
                vp: z.ZodOptional<z.ZodAny>;
                proof: z.ZodObject<{
                    pi_a: z.ZodArray<z.ZodString, "many">;
                    pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                    pi_c: z.ZodArray<z.ZodString, "many">;
                    protocol: z.ZodString;
                    curve: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                }, {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                }>;
                pub_signals: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }, {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        }, {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        }>;
        from: z.ZodOptional<z.ZodString>;
        to: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    }, {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "auth";
    authResponse: {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    };
}, {
    type: "auth";
    authResponse: {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"credentialOffer">;
    credentialOfferResponse: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        type: z.ZodArray<z.ZodString, "many">;
        expirationDate: z.ZodOptional<z.ZodString>;
        issuanceDate: z.ZodOptional<z.ZodString>;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
        credentialStatus: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
            revocationNonce: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        }, {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        }>;
        issuer: z.ZodString;
        credentialSchema: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
        }, {
            id: string;
            type: string;
        }>;
        proof: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }, {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "credentialOffer";
    credentialOfferResponse: {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }[];
}, {
    type: "credentialOffer";
    credentialOfferResponse: {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"zkp">;
    zkpResponse: z.ZodObject<{
        id: z.ZodNumber;
        circuitId: z.ZodString;
        vp: z.ZodOptional<z.ZodAny>;
        proof: z.ZodObject<{
            pi_a: z.ZodArray<z.ZodString, "many">;
            pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
            pi_c: z.ZodArray<z.ZodString, "many">;
            protocol: z.ZodString;
            curve: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        }, {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        }>;
        pub_signals: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        proof: {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        };
        circuitId: string;
        pub_signals: string[];
        vp?: any;
    }, {
        id: number;
        proof: {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        };
        circuitId: string;
        pub_signals: string[];
        vp?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "zkp";
    zkpResponse: {
        id: number;
        proof: {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        };
        circuitId: string;
        pub_signals: string[];
        vp?: any;
    };
}, {
    type: "zkp";
    zkpResponse: {
        id: number;
        proof: {
            pi_a: string[];
            pi_b: string[][];
            pi_c: string[];
            protocol: string;
            curve?: string | undefined;
        };
        circuitId: string;
        pub_signals: string[];
        vp?: any;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"close">;
    screen: z.ZodEnum<["auth", "credentialOffer", "zkp", "getCredentials"]>;
    closeResponse: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "close";
    screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
    closeResponse: string;
}, {
    type: "close";
    screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
    closeResponse: string;
}>]>;
export type PolygonIdResponseData = z.infer<typeof PolygonIdResponseData>;
export declare const PolygonIdResponse: z.ZodObject<{
    type: z.ZodLiteral<"polygonIdResponse">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authResponse: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferResponse: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            type: z.ZodArray<z.ZodString, "many">;
            expirationDate: z.ZodOptional<z.ZodString>;
            issuanceDate: z.ZodOptional<z.ZodString>;
            credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
            credentialStatus: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
                revocationNonce: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }>;
            issuer: z.ZodString;
            credentialSchema: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
            }, {
                id: string;
                type: string;
            }>;
            proof: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpResponse: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            vp: z.ZodOptional<z.ZodAny>;
            proof: z.ZodObject<{
                pi_a: z.ZodArray<z.ZodString, "many">;
                pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                pi_c: z.ZodArray<z.ZodString, "many">;
                protocol: z.ZodString;
                curve: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }>;
            pub_signals: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"close">;
        screen: z.ZodEnum<["auth", "credentialOffer", "zkp", "getCredentials"]>;
        closeResponse: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}>;
export type PolygonIdResponse = z.infer<typeof PolygonIdResponse>;
/**
 * StartFlowRequest
 */
export declare const StartFlowRequest: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"startVerification">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startVerification";
    data?: undefined;
}, {
    type: "startVerification";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startManagement">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startManagement";
    data?: undefined;
}, {
    type: "startManagement";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startKYB">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startKYB";
    data?: undefined;
}, {
    type: "startKYB";
    data?: undefined;
}>]>;
export type StartFlowRequest = z.infer<typeof StartFlowRequest>;
/**
 * IsVerifiedRequest
 */
export declare const IsVerifiedRequest: z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedRequest">;
    data: z.ZodObject<{
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        userAddress: `0x${string}`;
    }, {
        userAddress: string;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedRequest";
    data: {
        userAddress: `0x${string}`;
    };
    identifier: string;
}, {
    type: "isVerifiedRequest";
    data: {
        userAddress: string;
    };
    identifier: string;
}>;
export type IsVerifiedRequest = z.infer<typeof IsVerifiedRequest>;
/**
 * IsVerifiedResponse
 */
export declare const IsVerifiedResponse: z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedResponse">;
    isVerified: z.ZodBoolean;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}>;
export type IsVerifiedResponse = z.infer<typeof IsVerifiedResponse>;
/**
 * GetTxAuthSigRequest
 */
export declare const GetTxAuthSigRequest: z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigRequest">;
    data: z.ZodObject<Omit<{
        chainId: z.ZodEffects<z.ZodEnum<[import("../index.js").NEXERA_CHAINS.ETHEREUM, import("../index.js").NEXERA_CHAINS.POLYGON, import("../index.js").NEXERA_CHAINS.POLYGON_AMOY, import("../index.js").NEXERA_CHAINS.AVALANCHE, import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI, import("../index.js").NEXERA_CHAINS.ARBITRUM, import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA, import("../index.js").NEXERA_CHAINS.SEPOLIA, import("../index.js").NEXERA_CHAINS.BASE, import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA, import("../index.js").NEXERA_CHAINS.MOONBEAM, import("../index.js").NEXERA_CHAINS.MOONRIVER, import("../index.js").NEXERA_CHAINS.OPTIMISM, import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA]>, import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER, unknown>;
        contractAbi: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
        contractAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        functionName: z.ZodString;
        args: z.ZodArray<z.ZodUnknown, "many">;
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
    }, "userAddress">, "strip", z.ZodTypeAny, {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }, {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigRequest";
    data: {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}, {
    type: "getTxAuthSigRequest";
    data: {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}>;
export type GetTxAuthSigRequest = z.infer<typeof GetTxAuthSigRequest>;
/**
 * GetTxAuthSigResponse
 */
export declare const GetTxAuthSigResponse: z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigResponse">;
    signatureResponse: z.ZodObject<{
        payload: z.ZodOptional<z.ZodString>;
        signature: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        isAuthorized: z.ZodBoolean;
        errorMessage: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }, {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}>;
export type GetTxAuthSigResponse = z.infer<typeof GetTxAuthSigResponse>;
export declare const HostRequestMessage: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"getCredentials">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "getCredentials";
    data?: undefined;
}, {
    type: "getCredentials";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdRequest">;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authRequest: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferRequest: z.ZodObject<{
            qrCodeLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            schemaType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }, {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }, {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpRequest: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            optional: z.ZodOptional<z.ZodBoolean>;
            query: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }, {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }, {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}, {
    type: "polygonIdRequest";
    data: {
        type: "auth";
        authRequest: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferRequest: {
            qrCodeLink?: string | null | undefined;
            schemaType?: string | null | undefined;
        };
    } | {
        type: "zkp";
        zkpRequest: {
            id: number;
            circuitId: string;
            query: Record<string, any>;
            optional?: boolean | undefined;
        };
    };
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"startVerification">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startVerification";
    data?: undefined;
}, {
    type: "startVerification";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startManagement">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startManagement";
    data?: undefined;
}, {
    type: "startManagement";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startKYB">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "startKYB";
    data?: undefined;
}, {
    type: "startKYB";
    data?: undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedRequest">;
    data: z.ZodObject<{
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        userAddress: `0x${string}`;
    }, {
        userAddress: string;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedRequest";
    data: {
        userAddress: `0x${string}`;
    };
    identifier: string;
}, {
    type: "isVerifiedRequest";
    data: {
        userAddress: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigRequest">;
    data: z.ZodObject<Omit<{
        chainId: z.ZodEffects<z.ZodEnum<[import("../index.js").NEXERA_CHAINS.ETHEREUM, import("../index.js").NEXERA_CHAINS.POLYGON, import("../index.js").NEXERA_CHAINS.POLYGON_AMOY, import("../index.js").NEXERA_CHAINS.AVALANCHE, import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI, import("../index.js").NEXERA_CHAINS.ARBITRUM, import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA, import("../index.js").NEXERA_CHAINS.SEPOLIA, import("../index.js").NEXERA_CHAINS.BASE, import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA, import("../index.js").NEXERA_CHAINS.MOONBEAM, import("../index.js").NEXERA_CHAINS.MOONRIVER, import("../index.js").NEXERA_CHAINS.OPTIMISM, import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA]>, import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER, unknown>;
        contractAbi: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
        contractAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        functionName: z.ZodString;
        args: z.ZodArray<z.ZodUnknown, "many">;
        userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        nonce: z.ZodOptional<z.ZodNumber>;
    }, "userAddress">, "strip", z.ZodTypeAny, {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }, {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigRequest";
    data: {
        chainId: import("../index.js").NEXERA_CHAINS.ETHEREUM | import("../index.js").NEXERA_CHAINS.ARBITRUM | import("../index.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../index.js").NEXERA_CHAINS.OPTIMISM | import("../index.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../index.js").NEXERA_CHAINS.AVALANCHE | import("../index.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../index.js").NEXERA_CHAINS.POLYGON | import("../index.js").NEXERA_CHAINS.POLYGON_AMOY | import("../index.js").NEXERA_CHAINS.SEPOLIA | import("../index.js").NEXERA_CHAINS.BASE | import("../index.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../index.js").NEXERA_CHAINS.MOONBEAM | import("../index.js").NEXERA_CHAINS.MOONRIVER;
        contractAbi: Record<string, unknown>[];
        contractAddress: `0x${string}`;
        functionName: string;
        args: unknown[];
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}, {
    type: "getTxAuthSigRequest";
    data: {
        contractAbi: Record<string, unknown>[];
        contractAddress: string;
        functionName: string;
        args: unknown[];
        chainId?: unknown;
        blockExpiration?: number | undefined;
        nonce?: number | undefined;
    };
    identifier: string;
}>]>;
export type HostRequestMessage = z.infer<typeof HostRequestMessage>;
export declare const IdentityResponseMessage: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"polygonIdCredentials">;
    credentials: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodArray<z.ZodString, "many">;
        issuanceDate: z.ZodString;
        journeyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }, {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }>, "many">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}, {
    type: "polygonIdCredentials";
    identifier: string;
    credentials: {
        id: string;
        journeyId: string;
        type: string[];
        issuanceDate: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdResponse">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"auth">;
        authResponse: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }, {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"credentialOffer">;
        credentialOfferResponse: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            type: z.ZodArray<z.ZodString, "many">;
            expirationDate: z.ZodOptional<z.ZodString>;
            issuanceDate: z.ZodOptional<z.ZodString>;
            credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
            credentialStatus: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
                revocationNonce: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }>;
            issuer: z.ZodString;
            credentialSchema: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
            }, {
                id: string;
                type: string;
            }>;
            proof: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }, {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"zkp">;
        zkpResponse: z.ZodObject<{
            id: z.ZodNumber;
            circuitId: z.ZodString;
            vp: z.ZodOptional<z.ZodAny>;
            proof: z.ZodObject<{
                pi_a: z.ZodArray<z.ZodString, "many">;
                pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                pi_c: z.ZodArray<z.ZodString, "many">;
                protocol: z.ZodString;
                curve: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }, {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            }>;
            pub_signals: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }, {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }, {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"close">;
        screen: z.ZodEnum<["auth", "credentialOffer", "zkp", "getCredentials"]>;
        closeResponse: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }, {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}, {
    type: "polygonIdResponse";
    data: {
        type: "auth";
        authResponse: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        };
    } | {
        type: "credentialOffer";
        credentialOfferResponse: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
    } | {
        type: "zkp";
        zkpResponse: {
            id: number;
            proof: {
                pi_a: string[];
                pi_b: string[][];
                pi_c: string[];
                protocol: string;
                curve?: string | undefined;
            };
            circuitId: string;
            pub_signals: string[];
            vp?: any;
        };
    } | {
        type: "close";
        screen: "getCredentials" | "auth" | "credentialOffer" | "zkp";
        closeResponse: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedResponse">;
    isVerified: z.ZodBoolean;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedResponse";
    identifier: string;
    isVerified: boolean;
}>, z.ZodObject<{
    type: z.ZodLiteral<"getTxAuthSigResponse">;
    signatureResponse: z.ZodObject<{
        payload: z.ZodOptional<z.ZodString>;
        signature: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>>;
        blockExpiration: z.ZodOptional<z.ZodNumber>;
        isAuthorized: z.ZodBoolean;
        errorMessage: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }, {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    }>;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: `0x${string}` | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}, {
    type: "getTxAuthSigResponse";
    identifier: string;
    signatureResponse: {
        isAuthorized: boolean;
        signature?: string | undefined;
        blockExpiration?: number | undefined;
        payload?: string | undefined;
        errorMessage?: any;
    };
}>]>;
export type IdentityResponseMessage = z.infer<typeof IdentityResponseMessage>;
//# sourceMappingURL=host-requests.schema.d.ts.map