import { z } from "zod";
export declare const ScenarioTypes: readonly ["ChallengeQuery", "OnChainZKP", "OffChainZKP"];
export declare const ScenarioType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
export declare const ScenarioStatuses: readonly ["UpToDate", "NoRulesAdded", "HasNotDeployment"];
export declare const ScenarioStatus: z.ZodEnum<["UpToDate", "NoRulesAdded", "HasNotDeployment"]>;
export type ScenarioStatus = z.infer<typeof ScenarioStatus>;
export declare const RuleEngineResponse: z.ZodObject<{
    objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
    objectId: z.ZodString;
    name: z.ZodString;
    address: z.ZodString;
    result: z.ZodObject<{
        result: z.ZodObject<{
            is_valid: z.ZodBoolean;
            reasons: z.ZodArray<z.ZodUnknown, "many">;
        }, "strip", z.ZodTypeAny, {
            is_valid: boolean;
            reasons: unknown[];
        }, {
            is_valid: boolean;
            reasons: unknown[];
        }>;
        executionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    }, {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    }>;
    executionId: z.ZodString;
    scenarioId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    result: {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    };
    address: string;
    executionId: string;
    scenarioId: string;
    objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
    objectId: string;
}, {
    name: string;
    result: {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    };
    address: string;
    executionId: string;
    scenarioId: string;
    objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
    objectId: string;
}>;
export type RuleEngineResponse = z.infer<typeof RuleEngineResponse>;
export declare const ScenarioExecutionResponse: z.ZodArray<z.ZodObject<{
    objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
    objectId: z.ZodString;
    name: z.ZodString;
    address: z.ZodString;
    result: z.ZodObject<{
        result: z.ZodObject<{
            is_valid: z.ZodBoolean;
            reasons: z.ZodArray<z.ZodUnknown, "many">;
        }, "strip", z.ZodTypeAny, {
            is_valid: boolean;
            reasons: unknown[];
        }, {
            is_valid: boolean;
            reasons: unknown[];
        }>;
        executionId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    }, {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    }>;
    executionId: z.ZodString;
    scenarioId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    result: {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    };
    address: string;
    executionId: string;
    scenarioId: string;
    objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
    objectId: string;
}, {
    name: string;
    result: {
        result: {
            is_valid: boolean;
            reasons: unknown[];
        };
        executionId: string;
    };
    address: string;
    executionId: string;
    scenarioId: string;
    objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
    objectId: string;
}>, "many">;
export type ScenarioExecutionResponse = z.infer<typeof ScenarioExecutionResponse>;
export declare const RuleResultStatuses: readonly ["valid", "not-valid", "error", "unknown"];
export declare const RuleResultStatus: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
export type RuleResultStatus = z.infer<typeof RuleResultStatus>;
export declare const RuleResultStatusLabels: Record<RuleResultStatus, string>;
//# sourceMappingURL=execute-scenario.schema.d.ts.map