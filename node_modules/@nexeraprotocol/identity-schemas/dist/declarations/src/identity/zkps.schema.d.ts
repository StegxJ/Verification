import { z } from "zod";
export declare const ZKPRequest: z.ZodObject<{
    id: z.ZodNumber;
    circuitId: z.ZodEnum<["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]>;
    optional: z.ZodOptional<z.ZodBoolean>;
    query: z.ZodObject<{
        type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodString;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    id: number;
    circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    optional?: boolean | undefined;
}, {
    id: number;
    circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    optional?: boolean | undefined;
}>;
export type ZKPRequest = z.infer<typeof ZKPRequest>;
export declare const ZKPRequestFromZKVerifier: z.ZodObject<{
    id: z.ZodNumber;
    circuitId: z.ZodString;
    optional: z.ZodOptional<z.ZodBoolean>;
    query: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    id: number;
    circuitId: string;
    query: Record<string, unknown>;
    optional?: boolean | undefined;
}, {
    id: number;
    circuitId: string;
    query: Record<string, unknown>;
    optional?: boolean | undefined;
}>;
export type ZKPRequestFromZKVerifier = z.infer<typeof ZKPRequestFromZKVerifier>;
export declare const OffChainZKP: z.ZodObject<{
    requestingAuthorizationMessage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    zkpRequest: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        circuitId: z.ZodEnum<["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]>;
        optional: z.ZodOptional<z.ZodBoolean>;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }, {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    zkpRequest?: {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }[] | null | undefined;
    requestingAuthorizationMessage?: string | null | undefined;
}, {
    zkpRequest?: {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }[] | null | undefined;
    requestingAuthorizationMessage?: string | null | undefined;
}>;
export type OffChainZKP = z.infer<typeof OffChainZKP>;
export declare const CreateAuthRequestProps: z.ZodObject<{
    hostUrl: z.ZodString;
    sessionId: z.ZodString;
    audience: z.ZodString;
    callbackURL: z.ZodString;
    query: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodString;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, "many">;
    onChainVerification: z.ZodOptional<z.ZodBoolean>;
    id: z.ZodString;
    thid: z.ZodString;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    message: string;
    sessionId: string;
    thid: string;
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }[];
    hostUrl: string;
    audience: string;
    callbackURL: string;
    onChainVerification?: boolean | undefined;
}, {
    id: string;
    message: string;
    sessionId: string;
    thid: string;
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }[];
    hostUrl: string;
    audience: string;
    callbackURL: string;
    onChainVerification?: boolean | undefined;
}>;
export type CreateAuthRequestProps = z.infer<typeof CreateAuthRequestProps>;
export declare const CreateZKProofRequestProps: z.ZodObject<{
    requestId: z.ZodNumber;
    query: z.ZodObject<{
        type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodString;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>;
    onChainVerification: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    requestId: number;
    onChainVerification?: boolean | undefined;
}, {
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    requestId: number;
    onChainVerification?: boolean | undefined;
}>;
export type CreateZKProofRequestProps = z.infer<typeof CreateZKProofRequestProps>;
export declare const AllScenarioExecutionAuthorizationData: z.ZodObject<{
    executionId: z.ZodString;
    projectId: z.ZodString;
    scenarioExecutionIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    executionId: string;
    projectId: string;
    scenarioExecutionIds: string[];
}, {
    executionId: string;
    projectId: string;
    scenarioExecutionIds: string[];
}>;
export type AllScenarioExecutionAuthorizationData = z.infer<typeof AllScenarioExecutionAuthorizationData>;
export declare const ProjectAuthorizationData: z.ZodObject<{
    sessionId: z.ZodString;
    projectId: z.ZodString;
    address: z.ZodString;
    authorizations: z.ZodMap<z.ZodString, z.ZodObject<{
        executionId: z.ZodString;
        sessionId: z.ZodString;
        projectId: z.ZodString;
        address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
        status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
        scenarioId: z.ZodString;
        scenarioName: z.ZodString;
        requestMessage: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
        responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>>>;
        verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    address: string;
    sessionId: string;
    projectId: string;
    authorizations: Map<string, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }>;
}, {
    address: string;
    sessionId: string;
    projectId: string;
    authorizations: Map<string, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }>;
}>;
export type ProjectAuthorizationData = z.infer<typeof ProjectAuthorizationData>;
export declare const OnChainZKP: z.ZodObject<{
    scenarioVerifierAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    zkpRequests: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        circuitId: z.ZodEnum<["credentialAtomicQuerySigV2", "credentialAtomicQuerySigV2OnChain"]>;
        optional: z.ZodOptional<z.ZodBoolean>;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }, {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    scenarioVerifierAddress: `0x${string}`;
    zkpRequests: {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }[];
}, {
    scenarioVerifierAddress: string;
    zkpRequests: {
        id: number;
        circuitId: "credentialAtomicQuerySigV2" | "credentialAtomicQuerySigV2OnChain";
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        optional?: boolean | undefined;
    }[];
}>;
export type OnChainZKP = z.infer<typeof OnChainZKP>;
export declare const OnChainZKPFromNexeraID: z.ZodObject<{
    scenarioVerifierAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    zkpRequests: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        circuitId: z.ZodString;
        optional: z.ZodOptional<z.ZodBoolean>;
        query: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        circuitId: string;
        query: Record<string, unknown>;
        optional?: boolean | undefined;
    }, {
        id: number;
        circuitId: string;
        query: Record<string, unknown>;
        optional?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    scenarioVerifierAddress: `0x${string}`;
    zkpRequests: {
        id: number;
        circuitId: string;
        query: Record<string, unknown>;
        optional?: boolean | undefined;
    }[];
}, {
    scenarioVerifierAddress: string;
    zkpRequests: {
        id: number;
        circuitId: string;
        query: Record<string, unknown>;
        optional?: boolean | undefined;
    }[];
}>;
export type OnChainZKPFromNexeraID = z.infer<typeof OnChainZKPFromNexeraID>;
export declare const OnChainZKPScenarioFromCms: z.ZodObject<{
    scenarioVerifierAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    zkpRequests: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodString;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    scenarioVerifierAddress: `0x${string}`;
    zkpRequests: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }[];
}, {
    scenarioVerifierAddress: string;
    zkpRequests: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }[];
}>;
export type OnChainZKPScenarioFromCms = z.infer<typeof OnChainZKPScenarioFromCms>;
export declare const OnChainZKPPayload: z.ZodObject<{
    requestId: z.ZodBigInt;
    inputs: z.ZodArray<z.ZodBigInt, "many">;
    a: z.ZodTuple<[z.ZodBigInt, z.ZodBigInt], null>;
    b: z.ZodTuple<[z.ZodTuple<[z.ZodBigInt, z.ZodBigInt], null>, z.ZodTuple<[z.ZodBigInt, z.ZodBigInt], null>], null>;
    c: z.ZodTuple<[z.ZodBigInt, z.ZodBigInt], null>;
}, "strip", z.ZodTypeAny, {
    requestId: bigint;
    inputs: bigint[];
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
}, {
    requestId: bigint;
    inputs: bigint[];
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
}>;
export type OnChainZKPPayload = z.infer<typeof OnChainZKPPayload>;
export declare const SCENARIO_AUTHORIZATION_STATUSES: readonly ["pending", "authorised", "unauthorised"];
export declare const ScenarioAuthorizationStatus: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
export type ScenarioAuthorizationStatus = z.infer<typeof ScenarioAuthorizationStatus>;
//# sourceMappingURL=zkps.schema.d.ts.map