import { z } from "zod";
export declare const ScenarioAuthorizationData: z.ZodObject<{
    executionId: z.ZodString;
    sessionId: z.ZodString;
    projectId: z.ZodString;
    address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
    status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
    scenarioId: z.ZodString;
    scenarioName: z.ZodString;
    requestMessage: z.ZodObject<{
        id: z.ZodString;
        typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
        type: z.ZodString;
        thid: z.ZodOptional<z.ZodString>;
        body: z.ZodObject<{
            callbackUrl: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            did_doc: z.ZodOptional<z.ZodAny>;
            message: z.ZodOptional<z.ZodString>;
            scope: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                circuitId: z.ZodString;
                optional: z.ZodOptional<z.ZodBoolean>;
                query: z.ZodRecord<z.ZodString, z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }, {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        }, {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        }>;
        from: z.ZodString;
        to: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    }, {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    }>;
    responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        id: z.ZodString;
        typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
        type: z.ZodString;
        thid: z.ZodOptional<z.ZodString>;
        body: z.ZodObject<{
            did_doc: z.ZodOptional<z.ZodAny>;
            message: z.ZodOptional<z.ZodString>;
            scope: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                circuitId: z.ZodString;
                vp: z.ZodOptional<z.ZodAny>;
                proof: z.ZodObject<{
                    pi_a: z.ZodArray<z.ZodString, "many">;
                    pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                    pi_c: z.ZodArray<z.ZodString, "many">;
                    protocol: z.ZodString;
                    curve: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                }, {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                }>;
                pub_signals: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }, {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        }, {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        }>;
        from: z.ZodOptional<z.ZodString>;
        to: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    }, {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    }>>>;
    verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    query: z.ZodObject<{
        type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodString;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "authorised" | "unauthorised";
    address: string;
    executionId: string;
    sessionId: string;
    projectId: string;
    scenarioId: string;
    scenarioName: string;
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    requestMessage: {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    };
    responseMessage?: {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    } | null | undefined;
    verificationError?: string | null | undefined;
}, {
    status: "pending" | "authorised" | "unauthorised";
    address: string;
    executionId: string;
    sessionId: string;
    projectId: string;
    scenarioId: string;
    scenarioName: string;
    query: {
        value: string | number | boolean | (string | number)[];
        type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    requestMessage: {
        id: string;
        type: string;
        typ: import("./polygon-id.schema.js").MediaType;
        body: {
            callbackUrl: string;
            scope: {
                id: number;
                circuitId: string;
                query: Record<string, any>;
                optional?: boolean | undefined;
            }[];
            message?: string | undefined;
            reason?: string | undefined;
            did_doc?: any;
        };
        from: string;
        thid?: string | undefined;
        to?: string | undefined;
    };
    responseMessage?: {
        id: string;
        type: string;
        body: {
            scope: {
                id: number;
                proof: {
                    pi_a: string[];
                    pi_b: string[][];
                    pi_c: string[];
                    protocol: string;
                    curve?: string | undefined;
                };
                circuitId: string;
                pub_signals: string[];
                vp?: any;
            }[];
            message?: string | undefined;
            did_doc?: any;
        };
        typ?: import("./polygon-id.schema.js").MediaType | undefined;
        thid?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
    } | null | undefined;
    verificationError?: string | null | undefined;
}>;
export type ScenarioAuthorizationData = z.infer<typeof ScenarioAuthorizationData>;
export declare const SdkVerificationResponseSchema: z.ZodObject<{
    customerId: z.ZodString;
    scenarioExecutionId: z.ZodString;
    status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
    results: z.ZodArray<z.ZodArray<z.ZodObject<{
        objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
        objectId: z.ZodString;
        name: z.ZodString;
        address: z.ZodString;
        result: z.ZodObject<{
            result: z.ZodObject<{
                is_valid: z.ZodBoolean;
                reasons: z.ZodArray<z.ZodUnknown, "many">;
            }, "strip", z.ZodTypeAny, {
                is_valid: boolean;
                reasons: unknown[];
            }, {
                is_valid: boolean;
                reasons: unknown[];
            }>;
            executionId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        }, {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        }>;
        executionId: z.ZodString;
        scenarioId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }, {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }>, "many">, "many">;
}, "strip", z.ZodTypeAny, {
    status: "valid" | "unknown" | "not-valid" | "error";
    customerId: string;
    scenarioExecutionId: string;
    results: {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }[][];
}, {
    status: "valid" | "unknown" | "not-valid" | "error";
    customerId: string;
    scenarioExecutionId: string;
    results: {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }[][];
}>;
export type SdkVerificationResponseSchema = z.infer<typeof SdkVerificationResponseSchema>;
export declare const CloseScreenNotification: z.ZodObject<{
    type: z.ZodLiteral<"closeScreen">;
    identifier: z.ZodString;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}>;
export declare const KycCompletionData: z.ZodArray<z.ZodObject<{
    issuer: z.ZodString;
    type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
    credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodAny, z.objectOutputType<{
    issuer: z.ZodString;
    type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
    credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.ZodAny, "strip">, z.objectInputType<{
    issuer: z.ZodString;
    type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
    credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, z.ZodAny, "strip">>, "many">;
export declare const KycCompletionNotification: z.ZodObject<{
    type: z.ZodLiteral<"kycCompletion">;
    identifier: z.ZodString;
    data: z.ZodArray<z.ZodObject<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodAny, z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">, z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "kycCompletion";
    data: z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}, {
    type: "kycCompletion";
    data: z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}>;
export declare const RuleEngineScenarioExecutionData: z.ZodObject<{
    type: z.ZodLiteral<"RuleEngineScenarioExecution">;
    data: z.ZodObject<{
        customerId: z.ZodString;
        scenarioExecutionId: z.ZodString;
        status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
        results: z.ZodArray<z.ZodArray<z.ZodObject<{
            objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
            objectId: z.ZodString;
            name: z.ZodString;
            address: z.ZodString;
            result: z.ZodObject<{
                result: z.ZodObject<{
                    is_valid: z.ZodBoolean;
                    reasons: z.ZodArray<z.ZodUnknown, "many">;
                }, "strip", z.ZodTypeAny, {
                    is_valid: boolean;
                    reasons: unknown[];
                }, {
                    is_valid: boolean;
                    reasons: unknown[];
                }>;
                executionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            }, {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            }>;
            executionId: z.ZodString;
            scenarioId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }, {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }>, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    }, {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "RuleEngineScenarioExecution";
    data: {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    };
}, {
    type: "RuleEngineScenarioExecution";
    data: {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    };
}>;
export declare const OffChainScenarioExecutionData: z.ZodObject<{
    type: z.ZodLiteral<"OffChainScenarioExecution">;
    data: z.ZodArray<z.ZodObject<{
        executionId: z.ZodString;
        sessionId: z.ZodString;
        projectId: z.ZodString;
        address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
        status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
        scenarioId: z.ZodString;
        scenarioName: z.ZodString;
        requestMessage: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
        responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>>>;
        verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "OffChainScenarioExecution";
    data: {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }[];
}, {
    type: "OffChainScenarioExecution";
    data: {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }[];
}>;
export declare const OnChainScenarioExecutionData: z.ZodObject<{
    type: z.ZodLiteral<"OnChainScenarioExecution">;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "OnChainScenarioExecution";
    data?: any;
}, {
    type: "OnChainScenarioExecution";
    data?: any;
}>;
export declare const ScenarioExecutionData: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"RuleEngineScenarioExecution">;
    data: z.ZodObject<{
        customerId: z.ZodString;
        scenarioExecutionId: z.ZodString;
        status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
        results: z.ZodArray<z.ZodArray<z.ZodObject<{
            objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
            objectId: z.ZodString;
            name: z.ZodString;
            address: z.ZodString;
            result: z.ZodObject<{
                result: z.ZodObject<{
                    is_valid: z.ZodBoolean;
                    reasons: z.ZodArray<z.ZodUnknown, "many">;
                }, "strip", z.ZodTypeAny, {
                    is_valid: boolean;
                    reasons: unknown[];
                }, {
                    is_valid: boolean;
                    reasons: unknown[];
                }>;
                executionId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            }, {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            }>;
            executionId: z.ZodString;
            scenarioId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }, {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }>, "many">, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    }, {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "RuleEngineScenarioExecution";
    data: {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    };
}, {
    type: "RuleEngineScenarioExecution";
    data: {
        status: "valid" | "unknown" | "not-valid" | "error";
        customerId: string;
        scenarioExecutionId: string;
        results: {
            name: string;
            result: {
                result: {
                    is_valid: boolean;
                    reasons: unknown[];
                };
                executionId: string;
            };
            address: string;
            executionId: string;
            scenarioId: string;
            objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
            objectId: string;
        }[][];
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"OffChainScenarioExecution">;
    data: z.ZodArray<z.ZodObject<{
        executionId: z.ZodString;
        sessionId: z.ZodString;
        projectId: z.ZodString;
        address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
        status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
        scenarioId: z.ZodString;
        scenarioName: z.ZodString;
        requestMessage: z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                callbackUrl: z.ZodString;
                reason: z.ZodOptional<z.ZodString>;
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    optional: z.ZodOptional<z.ZodBoolean>;
                    query: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }, {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }, {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodString;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        }>;
        responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
            type: z.ZodString;
            thid: z.ZodOptional<z.ZodString>;
            body: z.ZodObject<{
                did_doc: z.ZodOptional<z.ZodAny>;
                message: z.ZodOptional<z.ZodString>;
                scope: z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    circuitId: z.ZodString;
                    vp: z.ZodOptional<z.ZodAny>;
                    proof: z.ZodObject<{
                        pi_a: z.ZodArray<z.ZodString, "many">;
                        pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                        pi_c: z.ZodArray<z.ZodString, "many">;
                        protocol: z.ZodString;
                        curve: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }, {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    }>;
                    pub_signals: z.ZodArray<z.ZodString, "many">;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }, {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }, {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            }>;
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }, {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        }>>>;
        verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }, {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "OffChainScenarioExecution";
    data: {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }[];
}, {
    type: "OffChainScenarioExecution";
    data: {
        status: "pending" | "authorised" | "unauthorised";
        address: string;
        executionId: string;
        sessionId: string;
        projectId: string;
        scenarioId: string;
        scenarioName: string;
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        requestMessage: {
            id: string;
            type: string;
            typ: import("./polygon-id.schema.js").MediaType;
            body: {
                callbackUrl: string;
                scope: {
                    id: number;
                    circuitId: string;
                    query: Record<string, any>;
                    optional?: boolean | undefined;
                }[];
                message?: string | undefined;
                reason?: string | undefined;
                did_doc?: any;
            };
            from: string;
            thid?: string | undefined;
            to?: string | undefined;
        };
        responseMessage?: {
            id: string;
            type: string;
            body: {
                scope: {
                    id: number;
                    proof: {
                        pi_a: string[];
                        pi_b: string[][];
                        pi_c: string[];
                        protocol: string;
                        curve?: string | undefined;
                    };
                    circuitId: string;
                    pub_signals: string[];
                    vp?: any;
                }[];
                message?: string | undefined;
                did_doc?: any;
            };
            typ?: import("./polygon-id.schema.js").MediaType | undefined;
            thid?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
        } | null | undefined;
        verificationError?: string | null | undefined;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"OnChainScenarioExecution">;
    data: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "OnChainScenarioExecution";
    data?: any;
}, {
    type: "OnChainScenarioExecution";
    data?: any;
}>]>;
export declare const ScenarioExecutionNotification: z.ZodObject<{
    type: z.ZodLiteral<"scenarioExecution">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"RuleEngineScenarioExecution">;
        data: z.ZodObject<{
            customerId: z.ZodString;
            scenarioExecutionId: z.ZodString;
            status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
            results: z.ZodArray<z.ZodArray<z.ZodObject<{
                objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
                objectId: z.ZodString;
                name: z.ZodString;
                address: z.ZodString;
                result: z.ZodObject<{
                    result: z.ZodObject<{
                        is_valid: z.ZodBoolean;
                        reasons: z.ZodArray<z.ZodUnknown, "many">;
                    }, "strip", z.ZodTypeAny, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }>;
                    executionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }>;
                executionId: z.ZodString;
                scenarioId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }>, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OffChainScenarioExecution">;
        data: z.ZodArray<z.ZodObject<{
            executionId: z.ZodString;
            sessionId: z.ZodString;
            projectId: z.ZodString;
            address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
            status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
            scenarioId: z.ZodString;
            scenarioName: z.ZodString;
            requestMessage: z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    callbackUrl: z.ZodString;
                    reason: z.ZodOptional<z.ZodString>;
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        optional: z.ZodOptional<z.ZodBoolean>;
                        query: z.ZodRecord<z.ZodString, z.ZodAny>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodString;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }>;
            responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        vp: z.ZodOptional<z.ZodAny>;
                        proof: z.ZodObject<{
                            pi_a: z.ZodArray<z.ZodString, "many">;
                            pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                            pi_c: z.ZodArray<z.ZodString, "many">;
                            protocol: z.ZodString;
                            curve: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }>;
                        pub_signals: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodOptional<z.ZodString>;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }>>>;
            verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            query: z.ZodObject<{
                type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
                requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                attribute: z.ZodString;
                value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
                operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
            }, "strip", z.ZodTypeAny, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OnChainScenarioExecution">;
        data: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "OnChainScenarioExecution";
        data?: any;
    }, {
        type: "OnChainScenarioExecution";
        data?: any;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}>;
export declare const IsVerifiedNotification: z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedNotification">;
    identifier: z.ZodString;
    isVerified: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}>;
export declare const PolygonIdInitialized: z.ZodObject<{
    type: z.ZodLiteral<"polygonIdInitialized">;
    identifier: z.ZodString;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}>;
export declare const OcvSdkInitialized: z.ZodObject<{
    type: z.ZodLiteral<"ocvSdkInitialized">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "ocvSdkInitialized";
    identifier: string;
}, {
    type: "ocvSdkInitialized";
    identifier: string;
}>;
export declare const StartCompletedNotification: z.ZodObject<{
    type: z.ZodLiteral<"startCompletedNotification">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "startCompletedNotification";
    identifier: string;
}, {
    type: "startCompletedNotification";
    identifier: string;
}>;
export declare const IdentityNotificationMessage: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"closeScreen">;
    identifier: z.ZodString;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}, {
    type: "closeScreen";
    identifier: string;
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"polygonIdInitialized">;
    identifier: z.ZodString;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}, {
    type: "polygonIdInitialized";
    data: string;
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"ocvSdkInitialized">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "ocvSdkInitialized";
    identifier: string;
}, {
    type: "ocvSdkInitialized";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startCompletedNotification">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "startCompletedNotification";
    identifier: string;
}, {
    type: "startCompletedNotification";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"kycCompletion">;
    identifier: z.ZodString;
    data: z.ZodArray<z.ZodObject<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodAny, z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">, z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "kycCompletion";
    data: z.objectOutputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}, {
    type: "kycCompletion";
    data: z.objectInputType<{
        issuer: z.ZodString;
        type: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodEnum<["AMLScreeningsResults", "ProofOfResidence", "SelfieImage", "IDImage", "IDInformation", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>>]>, "many">;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, z.ZodAny, "strip">[];
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"scenarioExecution">;
    identifier: z.ZodString;
    data: z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"RuleEngineScenarioExecution">;
        data: z.ZodObject<{
            customerId: z.ZodString;
            scenarioExecutionId: z.ZodString;
            status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
            results: z.ZodArray<z.ZodArray<z.ZodObject<{
                objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
                objectId: z.ZodString;
                name: z.ZodString;
                address: z.ZodString;
                result: z.ZodObject<{
                    result: z.ZodObject<{
                        is_valid: z.ZodBoolean;
                        reasons: z.ZodArray<z.ZodUnknown, "many">;
                    }, "strip", z.ZodTypeAny, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }, {
                        is_valid: boolean;
                        reasons: unknown[];
                    }>;
                    executionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }, {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                }>;
                executionId: z.ZodString;
                scenarioId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }, {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }>, "many">, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }, {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }, {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OffChainScenarioExecution">;
        data: z.ZodArray<z.ZodObject<{
            executionId: z.ZodString;
            sessionId: z.ZodString;
            projectId: z.ZodString;
            address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
            status: z.ZodEnum<["pending", "authorised", "unauthorised"]>;
            scenarioId: z.ZodString;
            scenarioName: z.ZodString;
            requestMessage: z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    callbackUrl: z.ZodString;
                    reason: z.ZodOptional<z.ZodString>;
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        optional: z.ZodOptional<z.ZodBoolean>;
                        query: z.ZodRecord<z.ZodString, z.ZodAny>;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }, {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }, {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodString;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            }>;
            responseMessage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodString;
                typ: z.ZodOptional<z.ZodNativeEnum<typeof import("./polygon-id.schema.js").MediaType>>;
                type: z.ZodString;
                thid: z.ZodOptional<z.ZodString>;
                body: z.ZodObject<{
                    did_doc: z.ZodOptional<z.ZodAny>;
                    message: z.ZodOptional<z.ZodString>;
                    scope: z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        circuitId: z.ZodString;
                        vp: z.ZodOptional<z.ZodAny>;
                        proof: z.ZodObject<{
                            pi_a: z.ZodArray<z.ZodString, "many">;
                            pi_b: z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">;
                            pi_c: z.ZodArray<z.ZodString, "many">;
                            protocol: z.ZodString;
                            curve: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }, {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        }>;
                        pub_signals: z.ZodArray<z.ZodString, "many">;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }, {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }, {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                }>;
                from: z.ZodOptional<z.ZodString>;
                to: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }, {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            }>>>;
            verificationError: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            query: z.ZodObject<{
                type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
                requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                attribute: z.ZodString;
                value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
                operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
            }, "strip", z.ZodTypeAny, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }, {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }, {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }, {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"OnChainScenarioExecution">;
        data: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        type: "OnChainScenarioExecution";
        data?: any;
    }, {
        type: "OnChainScenarioExecution";
        data?: any;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}, {
    type: "scenarioExecution";
    data: {
        type: "RuleEngineScenarioExecution";
        data: {
            status: "valid" | "unknown" | "not-valid" | "error";
            customerId: string;
            scenarioExecutionId: string;
            results: {
                name: string;
                result: {
                    result: {
                        is_valid: boolean;
                        reasons: unknown[];
                    };
                    executionId: string;
                };
                address: string;
                executionId: string;
                scenarioId: string;
                objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
                objectId: string;
            }[][];
        };
    } | {
        type: "OffChainScenarioExecution";
        data: {
            status: "pending" | "authorised" | "unauthorised";
            address: string;
            executionId: string;
            sessionId: string;
            projectId: string;
            scenarioId: string;
            scenarioName: string;
            query: {
                value: string | number | boolean | (string | number)[];
                type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
                attribute: string;
                operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
                requestId?: number | null | undefined;
            };
            requestMessage: {
                id: string;
                type: string;
                typ: import("./polygon-id.schema.js").MediaType;
                body: {
                    callbackUrl: string;
                    scope: {
                        id: number;
                        circuitId: string;
                        query: Record<string, any>;
                        optional?: boolean | undefined;
                    }[];
                    message?: string | undefined;
                    reason?: string | undefined;
                    did_doc?: any;
                };
                from: string;
                thid?: string | undefined;
                to?: string | undefined;
            };
            responseMessage?: {
                id: string;
                type: string;
                body: {
                    scope: {
                        id: number;
                        proof: {
                            pi_a: string[];
                            pi_b: string[][];
                            pi_c: string[];
                            protocol: string;
                            curve?: string | undefined;
                        };
                        circuitId: string;
                        pub_signals: string[];
                        vp?: any;
                    }[];
                    message?: string | undefined;
                    did_doc?: any;
                };
                typ?: import("./polygon-id.schema.js").MediaType | undefined;
                thid?: string | undefined;
                from?: string | undefined;
                to?: string | undefined;
            } | null | undefined;
            verificationError?: string | null | undefined;
        }[];
    } | {
        type: "OnChainScenarioExecution";
        data?: any;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"isVerifiedNotification">;
    identifier: z.ZodString;
    isVerified: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}, {
    type: "isVerifiedNotification";
    identifier: string;
    isVerified: boolean;
}>]>;
export declare const InitialDataRequest: z.ZodObject<{
    type: z.ZodLiteral<"initialDataRequest">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "initialDataRequest";
    identifier: string;
}, {
    type: "initialDataRequest";
    identifier: string;
}>;
export declare const SignatureRequest: z.ZodObject<{
    type: z.ZodLiteral<"signatureRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}>;
export declare const TransactionData: z.ZodObject<{
    accountAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    to: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    data: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    value: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    data: `0x${string}`;
    to: `0x${string}`;
    accountAddress: `0x${string}`;
    value?: string | undefined;
}, {
    data: string;
    to: string;
    accountAddress: string;
    value?: string | undefined;
}>;
export declare const SendTransactionRequest: z.ZodObject<{
    type: z.ZodLiteral<"sendTransactionRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        accountAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        to: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        data: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        value: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    }, {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "sendTransactionRequest";
    data: {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    };
    identifier: string;
}, {
    type: "sendTransactionRequest";
    data: {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    };
    identifier: string;
}>;
export declare const IdentityRequestMessage: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"initialDataRequest">;
    identifier: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "initialDataRequest";
    identifier: string;
}, {
    type: "initialDataRequest";
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"signatureRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}, {
    type: "signatureRequest";
    data: {
        message: string;
    };
    identifier: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"sendTransactionRequest">;
    identifier: z.ZodString;
    data: z.ZodObject<{
        accountAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        to: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        data: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        value: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    }, {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "sendTransactionRequest";
    data: {
        data: `0x${string}`;
        to: `0x${string}`;
        accountAddress: `0x${string}`;
        value?: string | undefined;
    };
    identifier: string;
}, {
    type: "sendTransactionRequest";
    data: {
        data: string;
        to: string;
        accountAddress: string;
        value?: string | undefined;
    };
    identifier: string;
}>]>;
export declare const AVAILABLE_FLOWS: readonly ["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"];
export declare const AvailableFlow: z.ZodEnum<["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"]>;
export declare const DataAvailableOnStart: z.ZodObject<{
    identifier: z.ZodOptional<z.ZodString>;
    flow: z.ZodOptional<z.ZodEnum<["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"]>>;
    accessToken: z.ZodString;
    signingMessage: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    signingMessage: string;
    accessToken: string;
    signature: string;
    identifier?: string | undefined;
    flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
}, {
    signingMessage: string;
    accessToken: string;
    signature: string;
    identifier?: string | undefined;
    flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
}>;
export declare const InitialDataResponse: z.ZodObject<{
    type: z.ZodLiteral<"onStartKyc">;
    data: z.ZodObject<{
        identifier: z.ZodOptional<z.ZodString>;
        flow: z.ZodOptional<z.ZodEnum<["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"]>>;
        accessToken: z.ZodString;
        signingMessage: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}>;
export declare const SignatureResponse: z.ZodObject<{
    type: z.ZodLiteral<"signature">;
    data: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodUnion<[z.ZodEffects<z.ZodString, `edsig${string}`, string>, z.ZodEffects<z.ZodString, `spsig${string}`, string>, z.ZodEffects<z.ZodString, `p2sig${string}`, string>]>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
}, "strip", z.ZodTypeAny, {
    type: "signature";
    data: string;
}, {
    type: "signature";
    data: string;
}>;
export declare const TransactionResponse: z.ZodObject<{
    type: z.ZodLiteral<"transactionResponse">;
    data: z.ZodObject<{
        txHash: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        txHash: `0x${string}`;
    }, {
        txHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "transactionResponse";
    data: {
        txHash: `0x${string}`;
    };
}, {
    type: "transactionResponse";
    data: {
        txHash: string;
    };
}>;
export declare const HostResponseMessage: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"onStartKyc">;
    data: z.ZodObject<{
        identifier: z.ZodOptional<z.ZodString>;
        flow: z.ZodOptional<z.ZodEnum<["VERIFICATION", "MANAGEMENT", "POLYGON_ID", "KYB"]>>;
        accessToken: z.ZodString;
        signingMessage: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }, {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}, {
    type: "onStartKyc";
    data: {
        signingMessage: string;
        accessToken: string;
        signature: string;
        identifier?: string | undefined;
        flow?: "VERIFICATION" | "MANAGEMENT" | "POLYGON_ID" | "KYB" | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"signature">;
    data: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodUnion<[z.ZodEffects<z.ZodString, `edsig${string}`, string>, z.ZodEffects<z.ZodString, `spsig${string}`, string>, z.ZodEffects<z.ZodString, `p2sig${string}`, string>]>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
}, "strip", z.ZodTypeAny, {
    type: "signature";
    data: string;
}, {
    type: "signature";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"transactionResponse">;
    data: z.ZodObject<{
        txHash: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        txHash: `0x${string}`;
    }, {
        txHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "transactionResponse";
    data: {
        txHash: `0x${string}`;
    };
}, {
    type: "transactionResponse";
    data: {
        txHash: string;
    };
}>]>;
/**
 * Exported types
 */
export type SendTransactionRequest = z.infer<typeof SendTransactionRequest>;
export type IdentityRequestMessage = z.infer<typeof IdentityRequestMessage>;
export type AvailableFlow = z.infer<typeof AvailableFlow>;
export type DataAvailableOnStart = z.infer<typeof DataAvailableOnStart>;
export type InitialDataResponse = z.infer<typeof InitialDataResponse>;
export type SignatureResponse = z.infer<typeof SignatureResponse>;
export type TransactionData = z.infer<typeof TransactionData>;
export type TransactionResponse = z.infer<typeof TransactionResponse>;
export type HostResponseMessage = z.infer<typeof HostResponseMessage>;
export type CloseScreenNotification = z.infer<typeof CloseScreenNotification>;
export type KycCompletionData = z.infer<typeof KycCompletionData>;
export type KycCompletionNotification = z.infer<typeof KycCompletionNotification>;
export type RuleEngineScenarioExecutionData = z.infer<typeof RuleEngineScenarioExecutionData>;
export type OffChainScenarioExecutionData = z.infer<typeof OffChainScenarioExecutionData>;
export type OnChainScenarioExecutionData = z.infer<typeof OnChainScenarioExecutionData>;
export type ScenarioExecutionData = z.infer<typeof ScenarioExecutionData>;
export type ScenarioExecutionNotification = z.infer<typeof ScenarioExecutionNotification>;
export type IsVerifiedNotification = z.infer<typeof IsVerifiedNotification>;
export type PolygonIdInitialized = z.infer<typeof PolygonIdInitialized>;
export type StartCompletedNotification = z.infer<typeof StartCompletedNotification>;
export type IdentityNotificationMessage = z.infer<typeof IdentityNotificationMessage>;
export type InitialDataRequest = z.infer<typeof InitialDataRequest>;
export type SignatureRequest = z.infer<typeof SignatureRequest>;
//# sourceMappingURL=app-requests.schema.d.ts.map