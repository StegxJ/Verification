import { z } from "zod";
export declare const TxAuthInput: z.ZodObject<{
    chainId: z.ZodEffects<z.ZodEnum<[import("../blockchain.schema.js").NEXERA_CHAINS.ETHEREUM, import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON, import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON_AMOY, import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE, import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE_FUJI, import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM, import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA, import("../blockchain.schema.js").NEXERA_CHAINS.SEPOLIA, import("../blockchain.schema.js").NEXERA_CHAINS.BASE, import("../blockchain.schema.js").NEXERA_CHAINS.BASE_SEPOLIA, import("../blockchain.schema.js").NEXERA_CHAINS.MOONBEAM, import("../blockchain.schema.js").NEXERA_CHAINS.MOONRIVER, import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM, import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA]>, import("../blockchain.schema.js").NEXERA_CHAINS.ETHEREUM | import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM | import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM | import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE | import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON | import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON_AMOY | import("../blockchain.schema.js").NEXERA_CHAINS.SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.BASE | import("../blockchain.schema.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.MOONBEAM | import("../blockchain.schema.js").NEXERA_CHAINS.MOONRIVER, unknown>;
    contractAbi: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnknown>, "many">;
    contractAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    functionName: z.ZodString;
    args: z.ZodArray<z.ZodUnknown, "many">;
    userAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    blockExpiration: z.ZodOptional<z.ZodNumber>;
    nonce: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    userAddress: `0x${string}`;
    chainId: import("../blockchain.schema.js").NEXERA_CHAINS.ETHEREUM | import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM | import("../blockchain.schema.js").NEXERA_CHAINS.ARBITRUM_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM | import("../blockchain.schema.js").NEXERA_CHAINS.OPTIMISM_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE | import("../blockchain.schema.js").NEXERA_CHAINS.AVALANCHE_FUJI | import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON | import("../blockchain.schema.js").NEXERA_CHAINS.POLYGON_AMOY | import("../blockchain.schema.js").NEXERA_CHAINS.SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.BASE | import("../blockchain.schema.js").NEXERA_CHAINS.BASE_SEPOLIA | import("../blockchain.schema.js").NEXERA_CHAINS.MOONBEAM | import("../blockchain.schema.js").NEXERA_CHAINS.MOONRIVER;
    contractAbi: Record<string, unknown>[];
    contractAddress: `0x${string}`;
    functionName: string;
    args: unknown[];
    blockExpiration?: number | undefined;
    nonce?: number | undefined;
}, {
    userAddress: string;
    contractAbi: Record<string, unknown>[];
    contractAddress: string;
    functionName: string;
    args: unknown[];
    chainId?: unknown;
    blockExpiration?: number | undefined;
    nonce?: number | undefined;
}>;
export type TxAuthInput = z.infer<typeof TxAuthInput>;
export declare const TxSignatureResponse: z.ZodObject<{
    signature: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    blockExpiration: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    signature: `0x${string}`;
    blockExpiration: number;
}, {
    signature: string;
    blockExpiration: number;
}>;
export type TxSignatureResponse = z.infer<typeof TxSignatureResponse>;
export declare const GetTxAuthDataSignatureResponse: z.ZodObject<{
    payload: z.ZodOptional<z.ZodString>;
    signature: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>>;
    blockExpiration: z.ZodOptional<z.ZodNumber>;
    isAuthorized: z.ZodBoolean;
    errorMessage: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    isAuthorized: boolean;
    signature?: `0x${string}` | undefined;
    blockExpiration?: number | undefined;
    payload?: string | undefined;
    errorMessage?: any;
}, {
    isAuthorized: boolean;
    signature?: string | undefined;
    blockExpiration?: number | undefined;
    payload?: string | undefined;
    errorMessage?: any;
}>;
export type GetTxAuthDataSignatureResponse = z.infer<typeof GetTxAuthDataSignatureResponse>;
//# sourceMappingURL=txAuthData.schema.d.ts.map