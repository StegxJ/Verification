import { z } from "zod";
export declare const ChallengeQueryOperators: z.ZodEffects<z.ZodObject<{
    GREATER_THAN: z.ZodOptional<z.ZodNumber>;
    LESS_THAN: z.ZodOptional<z.ZodNumber>;
    EQUAL_TO: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodArray<z.ZodNever, "many">, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    NOT_EQUAL_TO: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodArray<z.ZodNever, "many">, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    LESS_THAN_OR_EQUAL_TO: z.ZodOptional<z.ZodNumber>;
    GREATER_THAN_OR_EQUAL_TO: z.ZodOptional<z.ZodNumber>;
    IN: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    NOT_IN: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>;
export declare const ChallengeQueryOperator: z.ZodEnum<["GREATER_THAN", "LESS_THAN", "EQUAL_TO", "NOT_EQUAL_TO", "LESS_THAN_OR_EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO", "IN", "NOT_IN"]>;
export declare const OperatorToChallengeQueryOperator: {
    $noop: "EQUAL_TO";
    $eq: "EQUAL_TO";
    $lt: "LESS_THAN";
    $lte: "LESS_THAN_OR_EQUAL_TO";
    $gt: "GREATER_THAN";
    $gte: "GREATER_THAN_OR_EQUAL_TO";
    $in: "IN";
    $nin: "NOT_IN";
    $ne: "NOT_EQUAL_TO";
};
export declare const ChallengeQueryOperatorToOperator: {
    EQUAL_TO: "$eq";
    LESS_THAN: "$lt";
    LESS_THAN_OR_EQUAL_TO: "$lte";
    GREATER_THAN: "$gt";
    GREATER_THAN_OR_EQUAL_TO: "$gte";
    IN: "$in";
    NOT_IN: "$nin";
    NOT_EQUAL_TO: "$ne";
};
export declare const ChallengeQuerySchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    query: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"IDInformation">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"IDImage">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"SelfieImage">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ProofOfResidence">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode", ...("id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    query: {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    id?: string | undefined;
}, {
    query: {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
    id?: string | undefined;
}>;
export declare const ExecuteChallengeQueryInput: z.ZodObject<{
    address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
    credentials: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        type: z.ZodArray<z.ZodString, "many">;
        expirationDate: z.ZodOptional<z.ZodString>;
        issuanceDate: z.ZodOptional<z.ZodString>;
        credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
        credentialStatus: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
            revocationNonce: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        }, {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        }>;
        issuer: z.ZodString;
        credentialSchema: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string;
        }, {
            id: string;
            type: string;
        }>;
        proof: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }, {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }>, "many">;
    challengeQuery: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"IDInformation">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"IDImage">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"SelfieImage">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"ProofOfResidence">;
        requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode", ...("id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode")[]]>]>;
        value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
        operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
    }, "strip", z.ZodTypeAny, {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }, {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    address: string;
    credentials: {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }[];
    challengeQuery: {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
}, {
    address: string;
    credentials: {
        id: string;
        type: string[];
        credentialSubject: Record<string, any>;
        credentialStatus: {
            id: string;
            type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
            revocationNonce?: number | undefined;
        };
        issuer: string;
        credentialSchema: {
            id: string;
            type: string;
        };
        "@context"?: string[] | undefined;
        expirationDate?: string | undefined;
        issuanceDate?: string | undefined;
        proof?: any;
    }[];
    challengeQuery: {
        value: string | number | boolean | (string | number)[];
        type: "IDInformation";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "IDImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "SelfieImage";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    } | {
        value: string | number | boolean | (string | number)[];
        type: "ProofOfResidence";
        attribute: string;
        operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
        requestId?: number | null | undefined;
    };
}>;
export declare const ExecuteChallengeQueryConfig: z.ZodObject<{
    input: z.ZodObject<{
        address: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `tz${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodString, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `cosmos${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `addr${string}`, string>]>;
        credentials: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            "@context": z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            type: z.ZodArray<z.ZodString, "many">;
            expirationDate: z.ZodOptional<z.ZodString>;
            issuanceDate: z.ZodOptional<z.ZodString>;
            credentialSubject: z.ZodRecord<z.ZodString, z.ZodAny>;
            credentialStatus: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodEnum<["SparseMerkleTreeProof", "Iden3ReverseSparseMerkleTreeProof", "Iden3commRevocationStatusV1.0", "Iden3OnchainSparseMerkleTreeProof2023"]>;
                revocationNonce: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }, {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            }>;
            issuer: z.ZodString;
            credentialSchema: z.ZodObject<{
                id: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
            }, {
                id: string;
                type: string;
            }>;
            proof: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }, {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }>, "many">;
        challengeQuery: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"IDInformation">;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "personalData" | "isSandbox")[]]>]>;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"IDImage">;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "documentType" | "entryDate" | "entryTime" | "isSandbox" | "base64_front" | "base64_back" | "name" | "mediaType_front" | "mediaType_back")[]]>]>;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SelfieImage">;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType", ...("id" | "journeyId" | "reviewAnswer" | "reviewRejectType" | "reviewRejectLabels" | "entryDate" | "entryTime" | "isSandbox" | "name" | "base64" | "mediaType")[]]>]>;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"ProofOfResidence">;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodUnion<[z.ZodString, z.ZodEnum<["id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode", ...("id" | "journeyId" | "documentType" | "entryDate" | "entryTime" | "country" | "isSandbox" | "name" | "base64" | "mediaType" | "county" | "city" | "streetName" | "postalCode")[]]>]>;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        address: string;
        credentials: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
        challengeQuery: {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
    }, {
        address: string;
        credentials: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
        challengeQuery: {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
    }>;
    executionId: z.ZodString;
    cmsObjectId: z.ZodString;
    cmsScenarioId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    executionId: string;
    input: {
        address: string;
        credentials: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
        challengeQuery: {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
    };
    cmsObjectId: string;
    cmsScenarioId?: string | undefined;
}, {
    executionId: string;
    input: {
        address: string;
        credentials: {
            id: string;
            type: string[];
            credentialSubject: Record<string, any>;
            credentialStatus: {
                id: string;
                type: "SparseMerkleTreeProof" | "Iden3ReverseSparseMerkleTreeProof" | "Iden3commRevocationStatusV1.0" | "Iden3OnchainSparseMerkleTreeProof2023";
                revocationNonce?: number | undefined;
            };
            issuer: string;
            credentialSchema: {
                id: string;
                type: string;
            };
            "@context"?: string[] | undefined;
            expirationDate?: string | undefined;
            issuanceDate?: string | undefined;
            proof?: any;
        }[];
        challengeQuery: {
            value: string | number | boolean | (string | number)[];
            type: "IDInformation";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "IDImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "SelfieImage";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        } | {
            value: string | number | boolean | (string | number)[];
            type: "ProofOfResidence";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
    };
    cmsObjectId: string;
    cmsScenarioId?: string | undefined;
}>;
export declare const OpaChallengeQueryResponse: z.ZodObject<{
    result: z.ZodObject<{
        is_valid: z.ZodBoolean;
        reasons: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        is_valid: boolean;
        reasons: string[];
    }, {
        is_valid: boolean;
        reasons: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    result: {
        is_valid: boolean;
        reasons: string[];
    };
}, {
    result: {
        is_valid: boolean;
        reasons: string[];
    };
}>;
export declare const ExecuteChallengeQueryResponse: z.ZodObject<z.objectUtil.extendShape<{
    result: z.ZodObject<{
        is_valid: z.ZodBoolean;
        reasons: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        is_valid: boolean;
        reasons: string[];
    }, {
        is_valid: boolean;
        reasons: string[];
    }>;
}, {
    executionId: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    result: {
        is_valid: boolean;
        reasons: string[];
    };
    executionId: string;
}, {
    result: {
        is_valid: boolean;
        reasons: string[];
    };
    executionId: string;
}>;
export declare const OPAChallengeQuery: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodObject<{
    GREATER_THAN: z.ZodOptional<z.ZodNumber>;
    LESS_THAN: z.ZodOptional<z.ZodNumber>;
    EQUAL_TO: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodArray<z.ZodNever, "many">, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    NOT_EQUAL_TO: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodArray<z.ZodNever, "many">, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    LESS_THAN_OR_EQUAL_TO: z.ZodOptional<z.ZodNumber>;
    GREATER_THAN_OR_EQUAL_TO: z.ZodOptional<z.ZodNumber>;
    IN: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
    NOT_IN: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodNumber, "many">, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>>, Record<string, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>, Record<string, {
    IN?: string | string[] | number[] | undefined;
    GREATER_THAN?: number | undefined;
    LESS_THAN?: number | undefined;
    EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    NOT_EQUAL_TO?: string | number | never[] | string[] | number[] | undefined;
    LESS_THAN_OR_EQUAL_TO?: number | undefined;
    GREATER_THAN_OR_EQUAL_TO?: number | undefined;
    NOT_IN?: string | string[] | number[] | undefined;
}>>;
export declare const OnChainRuleResult: z.ZodObject<{
    result: z.ZodObject<{
        is_valid: z.ZodBoolean;
        txHash: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        scenarioVerifierAddress: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
        reasons: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        is_valid: boolean;
        reasons: string[];
        txHash: `0x${string}`;
        scenarioVerifierAddress: `0x${string}`;
    }, {
        is_valid: boolean;
        reasons: string[];
        txHash: string;
        scenarioVerifierAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    result: {
        is_valid: boolean;
        reasons: string[];
        txHash: `0x${string}`;
        scenarioVerifierAddress: `0x${string}`;
    };
}, {
    result: {
        is_valid: boolean;
        reasons: string[];
        txHash: string;
        scenarioVerifierAddress: string;
    };
}>;
export declare const OffChainZKPRuleResult: z.ZodObject<{
    result: z.ZodObject<{
        is_valid: z.ZodBoolean;
        query: z.ZodObject<{
            type: z.ZodEnum<["IDInformation", "SelfieImage", "IDImage", "ProofOfResidence", "AMLScreeningsResults", "ID3", "IDScan", "IDScanSelfie", "IDScanPassport"]>;
            requestId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            attribute: z.ZodString;
            value: z.ZodUnion<[z.ZodBoolean, z.ZodString, z.ZodNumber, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">]>;
            operator: z.ZodEnum<["$noop", "$eq", "$lt", "$lte", "$gt", "$gte", "$in", "$nin", "$ne"]>;
        }, "strip", z.ZodTypeAny, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }, {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        }>;
        reasons: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        is_valid: boolean;
        reasons: string[];
    }, {
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        is_valid: boolean;
        reasons: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    result: {
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        is_valid: boolean;
        reasons: string[];
    };
}, {
    result: {
        query: {
            value: string | number | boolean | (string | number)[];
            type: "AMLScreeningsResults" | "ProofOfResidence" | "SelfieImage" | "IDImage" | "IDInformation" | "ID3" | "IDScan" | "IDScanSelfie" | "IDScanPassport";
            attribute: string;
            operator: "$noop" | "$eq" | "$lt" | "$lte" | "$gt" | "$gte" | "$in" | "$nin" | "$ne";
            requestId?: number | null | undefined;
        };
        is_valid: boolean;
        reasons: string[];
    };
}>;
export type OnChainRuleResult = z.infer<typeof OnChainRuleResult>;
export type OffChainZKPRuleResult = z.infer<typeof OffChainZKPRuleResult>;
export type ChallengeQueryOperators = z.infer<typeof ChallengeQueryOperators>;
export type ChallengeQueryOperator = keyof ChallengeQueryOperators;
export type OpaChallengeQueryResponse = z.infer<typeof OpaChallengeQueryResponse>;
export type ExecuteChallengeQueryInput = z.infer<typeof ExecuteChallengeQueryInput>;
export type OPAChallengeQuery = z.infer<typeof OPAChallengeQuery>;
export type ExecuteChallengeQueryConfig = z.infer<typeof ExecuteChallengeQueryConfig>;
export type ChallengeQuery = z.infer<typeof ChallengeQuerySchema>;
export type ExecuteChallengeQueryResponse = z.infer<typeof ExecuteChallengeQueryResponse>;
export declare const SdkVerificationOutput: z.ZodObject<{
    customerId: z.ZodString;
    scenarioExecutionId: z.ZodString;
    status: z.ZodEnum<["valid", "not-valid", "error", "unknown"]>;
    results: z.ZodArray<z.ZodArray<z.ZodObject<{
        objectType: z.ZodEnum<["ChallengeQuery", "OnChainZKP", "OffChainZKP"]>;
        objectId: z.ZodString;
        name: z.ZodString;
        address: z.ZodString;
        result: z.ZodObject<{
            result: z.ZodObject<{
                is_valid: z.ZodBoolean;
                reasons: z.ZodArray<z.ZodUnknown, "many">;
            }, "strip", z.ZodTypeAny, {
                is_valid: boolean;
                reasons: unknown[];
            }, {
                is_valid: boolean;
                reasons: unknown[];
            }>;
            executionId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        }, {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        }>;
        executionId: z.ZodString;
        scenarioId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }, {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }>, "many">, "many">;
}, "strip", z.ZodTypeAny, {
    status: "valid" | "unknown" | "not-valid" | "error";
    customerId: string;
    scenarioExecutionId: string;
    results: {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }[][];
}, {
    status: "valid" | "unknown" | "not-valid" | "error";
    customerId: string;
    scenarioExecutionId: string;
    results: {
        name: string;
        result: {
            result: {
                is_valid: boolean;
                reasons: unknown[];
            };
            executionId: string;
        };
        address: string;
        executionId: string;
        scenarioId: string;
        objectType: "ChallengeQuery" | "OnChainZKP" | "OffChainZKP";
        objectId: string;
    }[][];
}>;
export type SdkVerificationOutput = z.infer<typeof SdkVerificationOutput>;
//# sourceMappingURL=challenge-query.schema.d.ts.map