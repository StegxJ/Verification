import type { BlockchainSignature } from "@nexeraprotocol/identity-schemas";
import type { DataAvailableOnStart, GetTxAuthDataSignatureResponse, KycCompletionData, PolygonIdResponse, ScenarioExecutionData, TransactionData } from "@nexeraprotocol/identity-schemas/identity";
export type Callbacks = {
    onStartKycCallback?: (data: DataAvailableOnStart) => DataAvailableOnStart;
    onSignMessageCallback?: (data: {
        message: string;
    }) => Promise<BlockchainSignature>;
    onSendTransaction?: (data: TransactionData) => Promise<`0x${string}` | undefined>;
    closeScreenCallback?: () => Promise<string>;
    kycCompletionCallback?: (data: KycCompletionData) => void;
    scenarioExecutionCallback?: (data: ScenarioExecutionData) => void;
    sdkInitializedCallback?: (data: {
        did: string;
    }) => void;
    resolvePolygonIdRequest?: (data: PolygonIdResponse) => void;
    resolveIsVerifiedRequest?: (isVerified: boolean) => void;
    resolveGetTxAuthSigRequest?: (signatureResponse: GetTxAuthDataSignatureResponse) => void;
    onVerification?: (isVerified: boolean) => void;
};
//# sourceMappingURL=actions.d.ts.map