import { BlockchainAddress } from '@nexeraprotocol/identity-schemas';
import { ScenarioExecutionData, KycCompletionData, IdentityMessage } from '@nexeraprotocol/identity-schemas/identity';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var getBaseUrl = function getBaseUrl(env) {
  switch (env) {
    case "prod":
      return "https://identity.nexera.id";
    case "stage":
      return "https://identity-staging.nexera.id";
    case "dev":
      return "https://identity-dev.nexera.id";
    case "local":
      return "http://localhost:3008";
    case "test-dev-1":
      return "https://identity-test-dev-1.nexera.id";
    case "test-dev-2":
      return "https://identity-test-dev-2.nexera.id";
    default:
      return "https://identity.nexera.id";
  }
};

/**
 * Represents the initial css configuration for the IdentityClient.
 */
var START_FLOW_STYLE = "z-index: 99999999; overflow: hidden auto; visibility: visible; margin: 0px; padding: 0px; position: fixed; border-color: transparent; border-width: 0; border-style: none; left: 0px; top: 0px; width: 100%; height: 100%; -webkit-tap-highlight-color: transparent;";

/**
 * Build a signature message for generating a seed.
 * @param address - The wallet address to include in the message.
 * @returns The signature message as a string.
 */
var buildSignatureMessage = function buildSignatureMessage(address) {
  var parsedAddress = BlockchainAddress.parse(address);
  return "Sign this message to generate a seed.\n" + "It is used to generate keys to protect your KYC data.\n" + "\n" + "Wallet address: " + parsedAddress;
};

/**
 * Represents the configuration object for the IdentityClient.
 */

var IdentityClient = /*#__PURE__*/_createClass(
/**
 * Constructs a new IdentityClient object.
 * @param config - Optional configuration object for the IdentityClient.
 * See {@link IdentityClientConfig}  for further details.
 * If `env` is not defined, prod is used as default, using <https://identity.nexera.id> as Nexera KYC app
 */
function IdentityClient(config) {
  var _this = this;
  _classCallCheck(this, IdentityClient);
  _defineProperty(this, "callbacks", {});
  _defineProperty(this, "flowInProgress", false);
  _defineProperty(this, "initDataSent", false);
  // Sould this be linked to onSdkReady instead?
  _defineProperty(this, "startCompleted", false);
  // variables for the different steps of the kyc app setup
  _defineProperty(this, "polygonWalletReady", false);
  _defineProperty(this, "did", "");
  _defineProperty(this, "ocvSdkReady", false);
  /**
   * Callback function. Called when a message needs to be signed.
   * 
   * This needs to be registered by the integrator. It requires a function that will provide a signature from the connected wallet.
   * 
   * @example
   * IDENTITY_CLIENT.onSignMessage(async (data: { message: string }) => {
   *   return await signMessageAsync({ message: data.message });
   * });
    * @param signMessageCallback
   */
  _defineProperty(this, "onSignMessage", function (signMessageCallback) {
    _this.callbacks.onSignMessageCallback = signMessageCallback;
  });
  /**
   * Callback function. Used to sign transactions on the on-chain ZKP allowlist system.
   *
   * The ZKPs and associated transaction data is prepared in the identity app by making a call to the API to get the ZKPrequests and creating the ZKP using the PolygonID Wallet.
   *
   * Then, the transaction is signed and sent using this callback. to be registered by client to send transaction.
   *
   * @example
   * import { useWalletClient } from 'wagmi';
   * IDENTITY_CLIENT.onSendTransaction(async (data: TransactionData) => {
   *   return walletClient.sendTransaction({
   *     account: data.accountAddress,
   *     to: data.to,
   *     data: data.data,
   *     value: data.value ? parseEther(data.value) : parseEther("0"),
   *   });
   * });
   * @param sendTransactionCallback (data: TransactionData) => Promise<txHash: string>
   */
  _defineProperty(this, "onSendTransaction", function (sendTransactionCallback) {
    _this.callbacks.onSendTransaction = sendTransactionCallback;
  });
  /**
   * @ignore
   * Callback function.  Called when a kyc process is completed and data is sent to the registered webhook.
   * @param kycCompletionCallback
   */
  _defineProperty(this, "onKycCompletion", function (kycCompletionCallback) {
    _this.callbacks.kycCompletionCallback = kycCompletionCallback;
  });
  /**
   * Callback function. Called when a scenario is executed by the NexeraID Rules Engine.
   *
   * @example
   * IDENTITY_CLIENT.onScenarioExecution(
   *   (data) => {}
   * );
   * @param onScenarioExecutionCallback
   */
  _defineProperty(this, "onScenarioExecution", function (onScenarioExecutionCallback) {
    _this.callbacks.scenarioExecutionCallback = onScenarioExecutionCallback;
  });
  /**
   * Callback function. Called when the identity modal is closed.
   *
   * @example
   * public onCloseScreen = (
   *   onCloseScreenCallback: () => Promise<string>) => {
   *     this.callbacks.closeScreenCallback = onCloseScreenCallback;
   *   };
   * )
   * @param onCloseScreenCallback
   */
  _defineProperty(this, "onCloseScreen", function (onCloseScreenCallback) {
    _this.callbacks.closeScreenCallback = onCloseScreenCallback;
  });
  /**
   * Callback function. Called when the SDK is ready. `onSdkReady` means that the Polygon ID wallet is ready and the blockchain client and SDK are set up.
   *
   * This must be emitted _before_ you use `init`.
   *
   * @example
   * IDENTITY_CLIENT.onSdkReady((data) => {
   *   setDID(data.did);
   * });
   *
   * @param onSdkReadyCallback
   */
  _defineProperty(this, "onSdkReady", function (onSdkReadyCallback) {
    _this.callbacks.sdkInitializedCallback = onSdkReadyCallback;
  });
  /**
   * Callback function. Called when any type of verification happens (ZKP or NexeraID Rules Engine).
   * 
   * @example
   * IDENTITY_CLIENT.onVerification((isVerified) => {
   *    setVerified(isVerified);
   * });
    * @param onVerification
   */
  _defineProperty(this, "onVerification", function (onVerification) {
    _this.callbacks.onVerification = onVerification;
  });
  /**
   * The `init` method receives the authorization inputs. It must be called before any flow starts.
   *
   * There are several callbacks that can be used to integrate with the SDK lifecycle. They are [`onSignMessage`](#onsignmessage), [`onSendTransaction`](#onsendtransaction), [`onSdkReady`](#onsdkready), [`onVerification`](#onverification), and [`onScenarioExecution`](#onscenarioexecution).
   *
   * Ideally, these should all be registered before calling `init`.
   *
   * | Argument         | Description                                                           | Required |
   * |------------------|-----------------------------------------------------------------------|----------|
   * | `accessToken`    | The access token from your back end server                            | Yes      |
   * | `signature`      | Signature                                                             | Yes      |
   * | `signingMessage` | Signing message, used to store the KYC data in the customer's browser | Yes      |
   *
   * For some examples, see [`init` examples](../init.md).
   *
   * @param authenticationInputs
   */
  _defineProperty(this, "init", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authenticationInputs) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (authenticationInputs.signature) {
              _context.next = 2;
              break;
            }
            throw new Error("Signature is required when using external wallet. Please provide it in authenticationInputs.signature");
          case 2:
            _this._startFlow(authenticationInputs);
            _context.next = 5;
            return _this._waitForStartCompleted();
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  /**
   * Starts a verification flow.
   *
   * After [`onSdkReady`](#onsdkready) is emitted, you can start the verification flow using the `startVerification` method. It does have any arguments.
   * :::tip
   * `onSdkReady` means that the Polygon ID wallet is ready and the blockchain client and SDK are set up.
   * :::
   *
   * When flow is completed, a response is sent to the webhooks.
   *
   * After the flow is completed, you should tell the customer of your decision and proceed with the transaction if appropriate.
   *
   * See [line 32](https://github.com/NexeraProtocol/nexeraid-examples/blob/d12cf5ce8ed992cd8e5527edab59964c23041a33/example-apps/src/features/gated-nfts/gated-nfts/identity/IdentityFlow.tsx#L32) and [line 73](https://github.com/NexeraProtocol/nexeraid-examples/blob/d12cf5ce8ed992cd8e5527edab59964c23041a33/example-apps/src/features/gated-nfts/gated-nfts/identity/IdentityFlow.tsx#L73) in [`IdentityFlow.tsx`](https://github.com/NexeraProtocol/nexeraid-examples/blob/d12cf5ce8ed992cd8e5527edab59964c23041a33/example-apps/src/features/gated-nfts/gated-nfts/identity/IdentityFlow.tsx) for examples.
   *
   * @example
   * // This code should be in a hook.
   * IDENTITY_CLIENT.onSdkReady((data) => {
   *   setDID(data.did);
   * });
   *
   * @example
   * // This code should be in the return statement of a react component.
   * <Button
   *   id="example-kyc-verify-link-button"
   *   onClick={() => {
   *     IDENTITY_CLIENT.startVerification();
   *     close();
   *   }}
   *   disabled={!did}
   * >
   * Verify
   * </Button>;
   */
  _defineProperty(this, "startVerification", function () {
    if (!_this.iframe) throw new Error("iframe not initialized");
    if (!_this.iframeName) throw new Error("iframeName not initialized");
    _this._sendMessageToIdentityApp({
      type: "startVerification",
      data: undefined
    });
    _this.iframe.setAttribute("style", START_FLOW_STYLE);
  });
  /**
   * @ignore
   * Starts a management flow.
   * The iframe is revealed with management components
   * Requires init to be run before
   */
  _defineProperty(this, "startManagement", function () {
    if (!_this.iframe) throw new Error("iframe not initialized");
    if (!_this.iframeName) throw new Error("iframeName not initialized");
    _this._sendMessageToIdentityApp({
      type: "startManagement",
      data: undefined
    });
    _this.iframe.setAttribute("style", START_FLOW_STYLE);
  });
  /**
   * Starts a KYB flow.
   *
   * After [`onSdkReady`](#onsdkready) is emitted, you can start the KYB flow using the `startKYB` method. It does have any arguments.
   *
   * :::tip
   * `onSdkReady` means that the Polygon ID wallet is ready and the blockchain client and SDK are set up.
   * :::
   *
   * When flow is completed, a response is sent to the webhooks.
   *
   * After the flow is completed, you should tell the customer of your decision and proceed with the transaction if appropriate.
   *
   * @example
   * //This code should be in a hook.
   * IDENTITY_CLIENT.onSdkReady((data) => {
   *   setDID(data.did);
   * });
   *
   * @example
   * // This code should be in the return statement of a react component.
   * <Button
   *   id="example-kyc-verify-link-button"
   *   onClick={() => {
   *     IDENTITY_CLIENT.startKYB();
   *   }}
   *   disabled={!did}
   * >
   * Verify
   * </Button>;
   */
  _defineProperty(this, "startKYB", function () {
    if (!_this.iframe) throw new Error("iframe not initialized");
    if (!_this.iframeName) throw new Error("iframeName not initialized");
    _this._sendMessageToIdentityApp({
      type: "startKYB",
      data: undefined
    });
    _this.iframe.setAttribute("style", START_FLOW_STYLE);
  });
  /**
   * Closes the Identity SDK.
   *
   * @example
   * IDENTITY_CLIENT.close();
   */
  _defineProperty(this, "close", function () {
    if (!_this.iframe) throw new Error("iframe not initialized");
    _this._closeFlow();
  });
  /**
   *
   * Starts a PolygonId protocol flow.
   *
   * Supports:
   *
   * - auth handles `AuthorizationRequestMessage` :
   * generates a zk-request for the given inputs and
   * automatically calls verify endpoint
   * with zk-proof generated with the wallet
   * - credentialOffer handles CredentialOffer object in string format
   * adds a credential to the polygon wallet (sent from a third party)
   * - credentialRequest `ZeroKnowledgeProofRequest`:
   * generates a zk-request for the given inputs
   *
   * | Argument     | Required | Description                                              |
   * |--------------|----------|----------------------------------------------------------|
   * | `type`       | Yes      | Request type; can be `auth`, `zkp`, or `credentialOffer` |
   * | `zkpRequest` | No       | Set to `zkpRequest` when `type` is `zkp`                 |
   *
   * :::note
   * The examples follow the [Iden3comm standard](https://0xpolygonid.github.io/tutorials/wallet/wallet-sdk/polygonid-sdk/iden3comm/overview/).
   * :::
   * @example
   *
   * // generates a zero-knowledge request for the given inputs and automatically
   * // calls the verify endpoint with the zero-knowledge proof generated by the wallet.
   *
   * import type { AuthorizationRequestMessage } from "@nexeraprotocol/nexera-id-schemas";
   * const authRequest: AuthorizationRequestMessage = {...}
   * await IDENTITY_CLIENT.polygonIdRequest(
   *   { type: "auth", authRequest}
   * );
   *
   * @example
   * // Generates a zero-knowledge request for the given inputs.
   *
   * import type { ZeroKnowledgeProofRequest } from "@nexeraprotocol/nexera-id-schemas";
   * const zkpRequest: ZeroKnowledgeProofRequest = {...}
   * await IDENTITY_CLIENT.polygonIdRequest(
   *   { type: "zkp", zkpRequest: zkpRequest }
   * );
   *
   * @example
   * //Handles a CredentialOffer object in string format. It adds a credential, sent from a third party, to the Polygon ID wallet.
   *
   * const authRequest:string="{...}"
   * await IDENTITY_CLIENT.polygonIdRequest(
   *   { type: "credentialOffer", credentialOfferRequest }
   * );
   *
   * @param data
   */
  _defineProperty(this, "polygonIdRequest", function (data) {
    return new Promise(function (resolve, _reject) {
      if (!_this.iframe) throw new Error("iframe not initialized");
      if (!_this.iframeName) throw new Error("iframeName not initialized");
      console.log("polygonIdRequest", data);
      _this.callbacks.resolvePolygonIdRequest = resolve;
      _this._sendMessageToIdentityApp({
        type: "polygonIdRequest",
        data: data
      });
      _this.iframe.setAttribute("style", START_FLOW_STYLE);
    });
  });
  /**
   * Returns the stored credentials of the connected wallet.
   *
   * | Argument | Required | Description                    |
   * |----------|----------|--------------------------------|
   * | `type`   | Yes      | Always set to `getCredentials` |
   * | `data`   | Yes      | Always set to `undefined`      |
   *
   * @example
   * const credentials = await IDENTITY_CLIENT.getStoredCredentials(
   *   { type: "getCredentials", data: undefined }, // data will be able to add filters later
   * );
   *
   * @param props
   */
  _defineProperty(this, "getStoredCredentials", function (props) {
    return new Promise(function (resolve, _reject) {
      if (!_this.iframe) throw new Error("iframe not initialized");
      console.log("getStoredCredentials", props);
      _this._sendMessageToIdentityApp(props);
      _this.iframe.setAttribute("style", START_FLOW_STYLE);
      // create listener for polygonId response
      window.addEventListener("message", function (event) {
        if (event.data.type === "polygonIdCredentials") {
          resolve(event.data.credentials);
        }
      });
    });
  });
  /**
   * @ignore
   * Returns true if a user address is whitelisted.
   * @param userAddress
   */
  _defineProperty(this, "isUserAllowedForEntrypoint", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userAddress) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (resolve, _reject) {
              if (!_this.identifier) throw new Error("Wait for identitfier to be set (init process)");
              _this.callbacks.resolveIsVerifiedRequest = resolve;
              _this._sendMessageToIdentityApp({
                type: "isVerifiedRequest",
                data: {
                  userAddress: userAddress
                },
                identifier: _this.identifier
              });
            }));
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  /**
   * Used to retrieve a signature from the Nexera API to authorize a contract call gated with the `TxAuthDataSignature` smart contract gating.
   *
   * It returns a `signatureResponse` object that has three properties:
   *
   * - `isAuthorized`: boolean. True if this customer is authorized.
   * - `blockExpiration`: the block number after which the request is considered expired.
   * - `signature`: the signature.
   *
   * By default, `blockExpiration` is 50 greater than the latest block, giving the signature a validity of 50 blocks. If you want to change this (for security or convenience, for example) you can set an explicit value for `blockExpiration`, as shown in the example below.
   *
   * `getTxAuthSignature` has one argument, a `txAuthInput` object with the following properties.
   *
   * | Property          | Description                                                          |
   * |-------------------|----------------------------------------------------------------------|
   * | `contractAbi`     | The ABI for the gated smart contract                                 |
   * | `contractAddress` | The address of the gated smart contract                              |
   * | `functionName`    | The name of the function in the gated smart contract                 |
   * | `args`            | An array containing the input for the function                       |
   * | `chainId`         | The ID of the chain that the tx will be posted on                    |
   * | `blockExpiration` | Block number after which the request is considered expired; optional |
   *
   * @example
   * // optional blockExpiration
   * const blockExpiration = Number((await txAuthWalletClient.getBlock({ blockTag: "latest" })).number) +100;
   *
   * // get chain ID from client
   * const chainId = await client.getChainId();
   *
   * // Tx Auth Input
   * // with our example Gated NFT Minter
   * const txAuthInput = {
   *   contractAbi: ExampleGatedNFTMinterABI,
   *   contractAddress: ExampleGatedNFTMinterAddress,
   *   functionName: "mintNFTGated",
   *   args: [recipientAddress],
   *   blockExpiration,
   *   chainId
   * };
   *
   * // Get signature Response
   * const signatureResponse: GetTxAuthDataSignatureResponse = await IDENTITY_CLIENT.getTxAuthSignature(
   *   txAuthInput
   * );
   *
   * @param input
   */
  _defineProperty(this, "getTxAuthSignature", /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(input) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise(function (resolve, _reject) {
              if (!_this.identifier) throw new Error("Wait for identitfier to be set (init process)");
              _this.callbacks.resolveGetTxAuthSigRequest = resolve;
              _this._sendMessageToIdentityApp({
                type: "getTxAuthSigRequest",
                data: input,
                identifier: _this.identifier
              });
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }());
  _defineProperty(this, "_waitForStartCompleted", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (_this.startCompleted) {
            _context4.next = 5;
            break;
          }
          _context4.next = 3;
          return new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          });
        case 3:
          _context4.next = 0;
          break;
        case 5:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  /**
   * Private method to initialize the iframe (hidden) with kyc-app and start event listening.
   * That way, third party apps can communicate with kyc-app.
   * To display the frame, use startVerification or startManagement
   * It performs necessary checks, sets the flow in progress, and opens a session.
   * signPersonalData callback is needed for initializing flow.
   *
   * @param authenticationInputs - Authentication inputs required to start the flow.
   */
  _defineProperty(this, "_startFlow", function (authenticationInputs) {
    if (!_this.callbacks.onSignMessageCallback) {
      throw new Error("onSignMessageCallback was not set. Please define it before starting flow.");
    }
    if (_this.flowInProgress) {
      console.warn("Identity flow in progress. Finish it to start a new one.");
      return;
    }
    _this.flowInProgress = true;

    // Init style
    var styleSheet = document.createElement("style");
    styleSheet.innerText = ".identity-sdk-loader-modal{position:fixed;left:0;top:0;display:flex; justify-content:center;align-items:center;width:100%;height:100%;z-index:9999;background-color:rgb(1,1,1,0.65);}.identity-sdk-loader-embed{position:relative;left:0;top:0;width:100%;height:100%;z-index:9999};";
    document.head.appendChild(styleSheet);
    var identifier = "".concat((Math.random() + 1).toString(36).substring(2, 7));
    console.log("identifier", identifier);
    _this.identifier = identifier;
    _this.iframeName = "identity-".concat(identifier);
    _this._initEvents(identifier, authenticationInputs);
    _this._openSession(identifier);
  });
  /**
   * Sends message to the kyc-app iframe.
   * @param message
   */
  _defineProperty(this, "_sendMessageToIdentityApp", function (message) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
    frames[_this.iframeName].postMessage(message, _this.baseURL);
  });
  _defineProperty(this, "_initEvents", function (identifier, authenticationInputs) {
    window.addEventListener("message", function (event) {
      var msgEventHandler = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
          var _this$callbacks, _this$callbacks2, _this$callbacks3, _this$callbacks4, _this$callbacks5, _this$callbacks$resol, _this$callbacks8, _this$callbacks$resol2, _this$callbacks9, _this$callbacks$resol3, _this$callbacks10, _this$callbacks11;
          var identityMessage, identityMessageData, signedMessage, txHash, parsedData, _this$callbacks$sdkIn, _this$callbacks6, _this$callbacks$sdkIn2, _this$callbacks7;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                // if (event.origin !== this.baseURL) return; TODO let's think about security later
                if (["finish", "close"].includes(event.type)) {
                  _this._closeFlow();
                }
                identityMessage = IdentityMessage.safeParse(event.data);
                if (identityMessage.success) {
                  _context5.next = 4;
                  break;
                }
                return _context5.abrupt("return");
              case 4:
                identityMessageData = identityMessage.data; // Assuming this snippet is inside an async function due to the use of 'await'
                if (!(!authenticationInputs.signature || !authenticationInputs.signingMessage)) {
                  _context5.next = 7;
                  break;
                }
                throw new Error("Identity message data is undefined");
              case 7:
                if (!(identifier === (identityMessageData === null || identityMessageData === void 0 ? void 0 : identityMessageData.identifier))) {
                  _context5.next = 70;
                  break;
                }
                _context5.t0 = identityMessageData.type;
                _context5.next = _context5.t0 === "initialDataRequest" ? 11 : _context5.t0 === "startCompletedNotification" ? 13 : _context5.t0 === "signatureRequest" ? 16 : _context5.t0 === "sendTransactionRequest" ? 23 : _context5.t0 === "kycCompletion" ? 32 : _context5.t0 === "scenarioExecution" ? 34 : _context5.t0 === "closeScreen" ? 36 : _context5.t0 === "polygonIdInitialized" ? 43 : _context5.t0 === "ocvSdkInitialized" ? 49 : _context5.t0 === "polygonIdResponse" ? 52 : _context5.t0 === "isVerifiedResponse" ? 56 : _context5.t0 === "getTxAuthSigResponse" ? 60 : _context5.t0 === "isVerifiedNotification" ? 64 : 66;
                break;
              case 11:
                if (!_this.initDataSent) {
                  _this.initDataSent = true;
                  _this._sendMessageToIdentityApp({
                    type: "onStartKyc",
                    data: {
                      identifier: identifier,
                      accessToken: authenticationInputs.accessToken,
                      signature: authenticationInputs.signature,
                      signingMessage: authenticationInputs.signingMessage
                    }
                  });
                  console.log("initialDataRequest sent");
                }
                return _context5.abrupt("break", 68);
              case 13:
                _this.startCompleted = true;
                console.log("Start completed notification received");
                return _context5.abrupt("break", 68);
              case 16:
                if (!((_this$callbacks = _this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onSignMessageCallback)) {
                  _context5.next = 22;
                  break;
                }
                _context5.next = 19;
                return _this.callbacks.onSignMessageCallback(identityMessageData.data);
              case 19:
                signedMessage = _context5.sent;
                _this._sendMessageToIdentityApp({
                  type: "signature",
                  data: signedMessage
                });
                console.log("Signature request processed");
              case 22:
                return _context5.abrupt("break", 68);
              case 23:
                if (!((_this$callbacks2 = _this.callbacks) !== null && _this$callbacks2 !== void 0 && _this$callbacks2.onSendTransaction)) {
                  _context5.next = 31;
                  break;
                }
                _context5.next = 26;
                return _this.callbacks.onSendTransaction(identityMessageData.data);
              case 26:
                txHash = _context5.sent;
                if (!(txHash === undefined)) {
                  _context5.next = 29;
                  break;
                }
                throw new Error("Returned TxHash was undefined");
              case 29:
                _this._sendMessageToIdentityApp({
                  type: "transactionResponse",
                  data: {
                    txHash: txHash
                  }
                });
                console.log("Transaction request processed, txHash:", txHash);
              case 31:
                return _context5.abrupt("break", 68);
              case 32:
                if ((_this$callbacks3 = _this.callbacks) !== null && _this$callbacks3 !== void 0 && _this$callbacks3.kycCompletionCallback) {
                  _this.callbacks.kycCompletionCallback(KycCompletionData.parse(identityMessageData.data));
                  console.log("KYC completion processed");
                }
                return _context5.abrupt("break", 68);
              case 34:
                if ((_this$callbacks4 = _this.callbacks) !== null && _this$callbacks4 !== void 0 && _this$callbacks4.scenarioExecutionCallback) {
                  console.log("scenarioExecution", identityMessageData);
                  parsedData = ScenarioExecutionData.parse(identityMessageData.data);
                  _this.callbacks.scenarioExecutionCallback(parsedData);
                  _this._closeFlow();
                }
                return _context5.abrupt("break", 68);
              case 36:
                if (!((_this$callbacks5 = _this.callbacks) !== null && _this$callbacks5 !== void 0 && _this$callbacks5.closeScreenCallback)) {
                  _context5.next = 40;
                  break;
                }
                _context5.next = 39;
                return _this.callbacks.closeScreenCallback();
              case 39:
                _this._closeFlow();
              case 40:
                _this._closeFlow();
                console.log("Screen closed");
                return _context5.abrupt("break", 68);
              case 43:
                console.log("polygonIdInitialized", identityMessageData);
                _this.polygonIdDID = identityMessageData.data;
                _this.polygonWalletReady = true;
                _this.did = identityMessageData.data;
                if (_this.polygonWalletReady && _this.ocvSdkReady) {
                  (_this$callbacks$sdkIn = (_this$callbacks6 = _this.callbacks).sdkInitializedCallback) === null || _this$callbacks$sdkIn === void 0 || _this$callbacks$sdkIn.call(_this$callbacks6, {
                    did: _this.did
                  });
                }
                return _context5.abrupt("break", 68);
              case 49:
                console.log("ocvSdkInitialized", identityMessageData);
                if (!_this.ocvSdkReady) {
                  _this.ocvSdkReady = true;
                  if (_this.polygonWalletReady && _this.ocvSdkReady) {
                    (_this$callbacks$sdkIn2 = (_this$callbacks7 = _this.callbacks).sdkInitializedCallback) === null || _this$callbacks$sdkIn2 === void 0 || _this$callbacks$sdkIn2.call(_this$callbacks7, {
                      did: _this.did
                    });
                  }
                }
                return _context5.abrupt("break", 68);
              case 52:
                console.log("polygonIdResponse", identityMessageData);
                (_this$callbacks$resol = (_this$callbacks8 = _this.callbacks).resolvePolygonIdRequest) === null || _this$callbacks$resol === void 0 || _this$callbacks$resol.call(_this$callbacks8, identityMessageData);
                _this.callbacks.resolvePolygonIdRequest = undefined;
                return _context5.abrupt("break", 68);
              case 56:
                console.log("isVerifiedResponse", identityMessageData);
                (_this$callbacks$resol2 = (_this$callbacks9 = _this.callbacks).resolveIsVerifiedRequest) === null || _this$callbacks$resol2 === void 0 || _this$callbacks$resol2.call(_this$callbacks9, identityMessageData.isVerified);
                _this.callbacks.resolveIsVerifiedRequest = undefined;
                return _context5.abrupt("break", 68);
              case 60:
                console.log("getTxAuthSigResponse", identityMessageData);
                (_this$callbacks$resol3 = (_this$callbacks10 = _this.callbacks).resolveGetTxAuthSigRequest) === null || _this$callbacks$resol3 === void 0 || _this$callbacks$resol3.call(_this$callbacks10, identityMessageData.signatureResponse);
                _this.callbacks.resolveGetTxAuthSigRequest = undefined;
                return _context5.abrupt("break", 68);
              case 64:
                if ((_this$callbacks11 = _this.callbacks) !== null && _this$callbacks11 !== void 0 && _this$callbacks11.onVerification) {
                  _this.callbacks.onVerification(identityMessageData.isVerified);
                  console.log("Verification status received:", identityMessageData.isVerified);
                }
                return _context5.abrupt("break", 68);
              case 66:
                console.log("Unhandled message type:", identityMessageData.type);
                return _context5.abrupt("break", 68);
              case 68:
                _context5.next = 71;
                break;
              case 70:
                console.log("Identifier mismatch or message type not handled.");
              case 71:
              case "end":
                return _context5.stop();
            }
          }, _callee5);
        }));
        return function msgEventHandler() {
          return _ref5.apply(this, arguments);
        };
      }();
      void msgEventHandler();
    });
  });
  _defineProperty(this, "_openSession", function (identifier) {
    _this.iframe = document.createElement("iframe");
    _this.iframe.setAttribute("src", "".concat(_this.baseURL, "?identifier=").concat(identifier));
    _this.iframe.setAttribute("name", "identity-".concat(identifier));
    _this.iframe.setAttribute("title", "identity-".concat(identifier));
    _this._setIframeAttributes(_this.iframe);
    document.body.appendChild(_this.iframe);
  });
  _defineProperty(this, "_setIframeAttributes", function (iframe) {
    iframe.setAttribute("allow", "microphone; camera; midi; encrypted-media; usb; ethereum");
    iframe.setAttribute("allowtransparency", "true");
    iframe.setAttribute("allowfullscreen", "true");
    iframe.setAttribute("frameborder", "none");
    iframe.setAttribute("border", "0");
    iframe.setAttribute("resize", "none");
    // hide iframe until activated by the user
    iframe.setAttribute("style", "display: none;");
  });
  _defineProperty(this, "_closeFlow", function () {
    if (!_this.iframe) throw new Error("iframe not initialized");
    _this.iframe.setAttribute("style", "display: none;");
  });
  this.baseURL = getBaseUrl(config ? config.env : "prod");
});

export { IdentityClient, buildSignatureMessage };
